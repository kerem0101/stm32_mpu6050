
stm32_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005a30  08005a30  00015a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd8  08005bd8  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08005bd8  08005bd8  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bd8  08005bd8  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005be0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  08005ce4  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08005ce4  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be61  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a16  00000000  00000000  0002bf8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002d9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104fc  00000000  00000000  0002eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c34a  00000000  00000000  0003efac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061725  00000000  00000000  0004b2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aca1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002298  00000000  00000000  000aca70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000108 	.word	0x20000108
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a14 	.word	0x08005a14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000010c 	.word	0x2000010c
 8000104:	08005a14 	.word	0x08005a14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fa21 	bl	8001678 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f96b 	bl	800151c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fa13 	bl	8001678 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fa09 	bl	8001678 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f98d 	bl	8001594 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f983 	bl	8001594 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_fadd>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	4646      	mov	r6, r8
 80002a0:	46d6      	mov	lr, sl
 80002a2:	464f      	mov	r7, r9
 80002a4:	024d      	lsls	r5, r1, #9
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	b5c0      	push	{r6, r7, lr}
 80002aa:	0a52      	lsrs	r2, r2, #9
 80002ac:	0a6e      	lsrs	r6, r5, #9
 80002ae:	0047      	lsls	r7, r0, #1
 80002b0:	46b0      	mov	r8, r6
 80002b2:	0e3f      	lsrs	r7, r7, #24
 80002b4:	004e      	lsls	r6, r1, #1
 80002b6:	0fc4      	lsrs	r4, r0, #31
 80002b8:	00d0      	lsls	r0, r2, #3
 80002ba:	4694      	mov	ip, r2
 80002bc:	003b      	movs	r3, r7
 80002be:	4682      	mov	sl, r0
 80002c0:	0e36      	lsrs	r6, r6, #24
 80002c2:	0fc9      	lsrs	r1, r1, #31
 80002c4:	09ad      	lsrs	r5, r5, #6
 80002c6:	428c      	cmp	r4, r1
 80002c8:	d06d      	beq.n	80003a6 <__aeabi_fadd+0x10a>
 80002ca:	1bb8      	subs	r0, r7, r6
 80002cc:	4681      	mov	r9, r0
 80002ce:	2800      	cmp	r0, #0
 80002d0:	dd4d      	ble.n	800036e <__aeabi_fadd+0xd2>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fadd+0x3c>
 80002d6:	e088      	b.n	80003ea <__aeabi_fadd+0x14e>
 80002d8:	2fff      	cmp	r7, #255	; 0xff
 80002da:	d05a      	beq.n	8000392 <__aeabi_fadd+0xf6>
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	04db      	lsls	r3, r3, #19
 80002e0:	431d      	orrs	r5, r3
 80002e2:	464b      	mov	r3, r9
 80002e4:	2201      	movs	r2, #1
 80002e6:	2b1b      	cmp	r3, #27
 80002e8:	dc0a      	bgt.n	8000300 <__aeabi_fadd+0x64>
 80002ea:	002b      	movs	r3, r5
 80002ec:	464a      	mov	r2, r9
 80002ee:	4649      	mov	r1, r9
 80002f0:	40d3      	lsrs	r3, r2
 80002f2:	2220      	movs	r2, #32
 80002f4:	1a52      	subs	r2, r2, r1
 80002f6:	4095      	lsls	r5, r2
 80002f8:	002a      	movs	r2, r5
 80002fa:	1e55      	subs	r5, r2, #1
 80002fc:	41aa      	sbcs	r2, r5
 80002fe:	431a      	orrs	r2, r3
 8000300:	4653      	mov	r3, sl
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	0153      	lsls	r3, r2, #5
 8000306:	d400      	bmi.n	800030a <__aeabi_fadd+0x6e>
 8000308:	e0b9      	b.n	800047e <__aeabi_fadd+0x1e2>
 800030a:	0192      	lsls	r2, r2, #6
 800030c:	0996      	lsrs	r6, r2, #6
 800030e:	0030      	movs	r0, r6
 8000310:	f002 f894 	bl	800243c <__clzsi2>
 8000314:	3805      	subs	r0, #5
 8000316:	4086      	lsls	r6, r0
 8000318:	4287      	cmp	r7, r0
 800031a:	dd00      	ble.n	800031e <__aeabi_fadd+0x82>
 800031c:	e0d4      	b.n	80004c8 <__aeabi_fadd+0x22c>
 800031e:	0033      	movs	r3, r6
 8000320:	1bc7      	subs	r7, r0, r7
 8000322:	2020      	movs	r0, #32
 8000324:	3701      	adds	r7, #1
 8000326:	40fb      	lsrs	r3, r7
 8000328:	1bc7      	subs	r7, r0, r7
 800032a:	40be      	lsls	r6, r7
 800032c:	0032      	movs	r2, r6
 800032e:	1e56      	subs	r6, r2, #1
 8000330:	41b2      	sbcs	r2, r6
 8000332:	2700      	movs	r7, #0
 8000334:	431a      	orrs	r2, r3
 8000336:	0753      	lsls	r3, r2, #29
 8000338:	d004      	beq.n	8000344 <__aeabi_fadd+0xa8>
 800033a:	230f      	movs	r3, #15
 800033c:	4013      	ands	r3, r2
 800033e:	2b04      	cmp	r3, #4
 8000340:	d000      	beq.n	8000344 <__aeabi_fadd+0xa8>
 8000342:	3204      	adds	r2, #4
 8000344:	0153      	lsls	r3, r2, #5
 8000346:	d400      	bmi.n	800034a <__aeabi_fadd+0xae>
 8000348:	e09c      	b.n	8000484 <__aeabi_fadd+0x1e8>
 800034a:	1c7b      	adds	r3, r7, #1
 800034c:	2ffe      	cmp	r7, #254	; 0xfe
 800034e:	d100      	bne.n	8000352 <__aeabi_fadd+0xb6>
 8000350:	e09a      	b.n	8000488 <__aeabi_fadd+0x1ec>
 8000352:	0192      	lsls	r2, r2, #6
 8000354:	0a52      	lsrs	r2, r2, #9
 8000356:	4694      	mov	ip, r2
 8000358:	b2db      	uxtb	r3, r3
 800035a:	05d8      	lsls	r0, r3, #23
 800035c:	4663      	mov	r3, ip
 800035e:	07e4      	lsls	r4, r4, #31
 8000360:	4318      	orrs	r0, r3
 8000362:	4320      	orrs	r0, r4
 8000364:	bce0      	pop	{r5, r6, r7}
 8000366:	46ba      	mov	sl, r7
 8000368:	46b1      	mov	r9, r6
 800036a:	46a8      	mov	r8, r5
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036e:	2800      	cmp	r0, #0
 8000370:	d049      	beq.n	8000406 <__aeabi_fadd+0x16a>
 8000372:	1bf3      	subs	r3, r6, r7
 8000374:	2f00      	cmp	r7, #0
 8000376:	d000      	beq.n	800037a <__aeabi_fadd+0xde>
 8000378:	e0b6      	b.n	80004e8 <__aeabi_fadd+0x24c>
 800037a:	4652      	mov	r2, sl
 800037c:	2a00      	cmp	r2, #0
 800037e:	d060      	beq.n	8000442 <__aeabi_fadd+0x1a6>
 8000380:	3b01      	subs	r3, #1
 8000382:	2b00      	cmp	r3, #0
 8000384:	d100      	bne.n	8000388 <__aeabi_fadd+0xec>
 8000386:	e0fc      	b.n	8000582 <__aeabi_fadd+0x2e6>
 8000388:	2eff      	cmp	r6, #255	; 0xff
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0xf2>
 800038c:	e0b4      	b.n	80004f8 <__aeabi_fadd+0x25c>
 800038e:	000c      	movs	r4, r1
 8000390:	4642      	mov	r2, r8
 8000392:	2a00      	cmp	r2, #0
 8000394:	d078      	beq.n	8000488 <__aeabi_fadd+0x1ec>
 8000396:	2080      	movs	r0, #128	; 0x80
 8000398:	03c0      	lsls	r0, r0, #15
 800039a:	4310      	orrs	r0, r2
 800039c:	0242      	lsls	r2, r0, #9
 800039e:	0a53      	lsrs	r3, r2, #9
 80003a0:	469c      	mov	ip, r3
 80003a2:	23ff      	movs	r3, #255	; 0xff
 80003a4:	e7d9      	b.n	800035a <__aeabi_fadd+0xbe>
 80003a6:	1bb9      	subs	r1, r7, r6
 80003a8:	2900      	cmp	r1, #0
 80003aa:	dd71      	ble.n	8000490 <__aeabi_fadd+0x1f4>
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d03f      	beq.n	8000430 <__aeabi_fadd+0x194>
 80003b0:	2fff      	cmp	r7, #255	; 0xff
 80003b2:	d0ee      	beq.n	8000392 <__aeabi_fadd+0xf6>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	04db      	lsls	r3, r3, #19
 80003b8:	431d      	orrs	r5, r3
 80003ba:	2201      	movs	r2, #1
 80003bc:	291b      	cmp	r1, #27
 80003be:	dc07      	bgt.n	80003d0 <__aeabi_fadd+0x134>
 80003c0:	002a      	movs	r2, r5
 80003c2:	2320      	movs	r3, #32
 80003c4:	40ca      	lsrs	r2, r1
 80003c6:	1a59      	subs	r1, r3, r1
 80003c8:	408d      	lsls	r5, r1
 80003ca:	1e6b      	subs	r3, r5, #1
 80003cc:	419d      	sbcs	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	4452      	add	r2, sl
 80003d2:	0153      	lsls	r3, r2, #5
 80003d4:	d553      	bpl.n	800047e <__aeabi_fadd+0x1e2>
 80003d6:	3701      	adds	r7, #1
 80003d8:	2fff      	cmp	r7, #255	; 0xff
 80003da:	d055      	beq.n	8000488 <__aeabi_fadd+0x1ec>
 80003dc:	2301      	movs	r3, #1
 80003de:	497b      	ldr	r1, [pc, #492]	; (80005cc <__aeabi_fadd+0x330>)
 80003e0:	4013      	ands	r3, r2
 80003e2:	0852      	lsrs	r2, r2, #1
 80003e4:	400a      	ands	r2, r1
 80003e6:	431a      	orrs	r2, r3
 80003e8:	e7a5      	b.n	8000336 <__aeabi_fadd+0x9a>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d02c      	beq.n	8000448 <__aeabi_fadd+0x1ac>
 80003ee:	2301      	movs	r3, #1
 80003f0:	425b      	negs	r3, r3
 80003f2:	469c      	mov	ip, r3
 80003f4:	44e1      	add	r9, ip
 80003f6:	464b      	mov	r3, r9
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_fadd+0x162>
 80003fc:	e0ad      	b.n	800055a <__aeabi_fadd+0x2be>
 80003fe:	2fff      	cmp	r7, #255	; 0xff
 8000400:	d000      	beq.n	8000404 <__aeabi_fadd+0x168>
 8000402:	e76e      	b.n	80002e2 <__aeabi_fadd+0x46>
 8000404:	e7c5      	b.n	8000392 <__aeabi_fadd+0xf6>
 8000406:	20fe      	movs	r0, #254	; 0xfe
 8000408:	1c7e      	adds	r6, r7, #1
 800040a:	4230      	tst	r0, r6
 800040c:	d160      	bne.n	80004d0 <__aeabi_fadd+0x234>
 800040e:	2f00      	cmp	r7, #0
 8000410:	d000      	beq.n	8000414 <__aeabi_fadd+0x178>
 8000412:	e093      	b.n	800053c <__aeabi_fadd+0x2a0>
 8000414:	4652      	mov	r2, sl
 8000416:	2a00      	cmp	r2, #0
 8000418:	d100      	bne.n	800041c <__aeabi_fadd+0x180>
 800041a:	e0b6      	b.n	800058a <__aeabi_fadd+0x2ee>
 800041c:	2d00      	cmp	r5, #0
 800041e:	d09c      	beq.n	800035a <__aeabi_fadd+0xbe>
 8000420:	1b52      	subs	r2, r2, r5
 8000422:	0150      	lsls	r0, r2, #5
 8000424:	d400      	bmi.n	8000428 <__aeabi_fadd+0x18c>
 8000426:	e0c3      	b.n	80005b0 <__aeabi_fadd+0x314>
 8000428:	4653      	mov	r3, sl
 800042a:	000c      	movs	r4, r1
 800042c:	1aea      	subs	r2, r5, r3
 800042e:	e782      	b.n	8000336 <__aeabi_fadd+0x9a>
 8000430:	2d00      	cmp	r5, #0
 8000432:	d009      	beq.n	8000448 <__aeabi_fadd+0x1ac>
 8000434:	3901      	subs	r1, #1
 8000436:	2900      	cmp	r1, #0
 8000438:	d100      	bne.n	800043c <__aeabi_fadd+0x1a0>
 800043a:	e08b      	b.n	8000554 <__aeabi_fadd+0x2b8>
 800043c:	2fff      	cmp	r7, #255	; 0xff
 800043e:	d1bc      	bne.n	80003ba <__aeabi_fadd+0x11e>
 8000440:	e7a7      	b.n	8000392 <__aeabi_fadd+0xf6>
 8000442:	000c      	movs	r4, r1
 8000444:	4642      	mov	r2, r8
 8000446:	0037      	movs	r7, r6
 8000448:	2fff      	cmp	r7, #255	; 0xff
 800044a:	d0a2      	beq.n	8000392 <__aeabi_fadd+0xf6>
 800044c:	0252      	lsls	r2, r2, #9
 800044e:	0a53      	lsrs	r3, r2, #9
 8000450:	469c      	mov	ip, r3
 8000452:	b2fb      	uxtb	r3, r7
 8000454:	e781      	b.n	800035a <__aeabi_fadd+0xbe>
 8000456:	21fe      	movs	r1, #254	; 0xfe
 8000458:	3701      	adds	r7, #1
 800045a:	4239      	tst	r1, r7
 800045c:	d165      	bne.n	800052a <__aeabi_fadd+0x28e>
 800045e:	2b00      	cmp	r3, #0
 8000460:	d17e      	bne.n	8000560 <__aeabi_fadd+0x2c4>
 8000462:	2800      	cmp	r0, #0
 8000464:	d100      	bne.n	8000468 <__aeabi_fadd+0x1cc>
 8000466:	e0aa      	b.n	80005be <__aeabi_fadd+0x322>
 8000468:	2d00      	cmp	r5, #0
 800046a:	d100      	bne.n	800046e <__aeabi_fadd+0x1d2>
 800046c:	e775      	b.n	800035a <__aeabi_fadd+0xbe>
 800046e:	002a      	movs	r2, r5
 8000470:	4452      	add	r2, sl
 8000472:	2700      	movs	r7, #0
 8000474:	0153      	lsls	r3, r2, #5
 8000476:	d502      	bpl.n	800047e <__aeabi_fadd+0x1e2>
 8000478:	4b55      	ldr	r3, [pc, #340]	; (80005d0 <__aeabi_fadd+0x334>)
 800047a:	3701      	adds	r7, #1
 800047c:	401a      	ands	r2, r3
 800047e:	0753      	lsls	r3, r2, #29
 8000480:	d000      	beq.n	8000484 <__aeabi_fadd+0x1e8>
 8000482:	e75a      	b.n	800033a <__aeabi_fadd+0x9e>
 8000484:	08d2      	lsrs	r2, r2, #3
 8000486:	e7df      	b.n	8000448 <__aeabi_fadd+0x1ac>
 8000488:	2200      	movs	r2, #0
 800048a:	23ff      	movs	r3, #255	; 0xff
 800048c:	4694      	mov	ip, r2
 800048e:	e764      	b.n	800035a <__aeabi_fadd+0xbe>
 8000490:	2900      	cmp	r1, #0
 8000492:	d0e0      	beq.n	8000456 <__aeabi_fadd+0x1ba>
 8000494:	1bf3      	subs	r3, r6, r7
 8000496:	2f00      	cmp	r7, #0
 8000498:	d03e      	beq.n	8000518 <__aeabi_fadd+0x27c>
 800049a:	2eff      	cmp	r6, #255	; 0xff
 800049c:	d100      	bne.n	80004a0 <__aeabi_fadd+0x204>
 800049e:	e777      	b.n	8000390 <__aeabi_fadd+0xf4>
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0001      	movs	r1, r0
 80004a4:	04d2      	lsls	r2, r2, #19
 80004a6:	4311      	orrs	r1, r2
 80004a8:	468a      	mov	sl, r1
 80004aa:	2201      	movs	r2, #1
 80004ac:	2b1b      	cmp	r3, #27
 80004ae:	dc08      	bgt.n	80004c2 <__aeabi_fadd+0x226>
 80004b0:	4652      	mov	r2, sl
 80004b2:	2120      	movs	r1, #32
 80004b4:	4650      	mov	r0, sl
 80004b6:	40da      	lsrs	r2, r3
 80004b8:	1acb      	subs	r3, r1, r3
 80004ba:	4098      	lsls	r0, r3
 80004bc:	1e43      	subs	r3, r0, #1
 80004be:	4198      	sbcs	r0, r3
 80004c0:	4302      	orrs	r2, r0
 80004c2:	0037      	movs	r7, r6
 80004c4:	1952      	adds	r2, r2, r5
 80004c6:	e784      	b.n	80003d2 <__aeabi_fadd+0x136>
 80004c8:	4a41      	ldr	r2, [pc, #260]	; (80005d0 <__aeabi_fadd+0x334>)
 80004ca:	1a3f      	subs	r7, r7, r0
 80004cc:	4032      	ands	r2, r6
 80004ce:	e732      	b.n	8000336 <__aeabi_fadd+0x9a>
 80004d0:	4653      	mov	r3, sl
 80004d2:	1b5e      	subs	r6, r3, r5
 80004d4:	0173      	lsls	r3, r6, #5
 80004d6:	d42d      	bmi.n	8000534 <__aeabi_fadd+0x298>
 80004d8:	2e00      	cmp	r6, #0
 80004da:	d000      	beq.n	80004de <__aeabi_fadd+0x242>
 80004dc:	e717      	b.n	800030e <__aeabi_fadd+0x72>
 80004de:	2200      	movs	r2, #0
 80004e0:	2400      	movs	r4, #0
 80004e2:	2300      	movs	r3, #0
 80004e4:	4694      	mov	ip, r2
 80004e6:	e738      	b.n	800035a <__aeabi_fadd+0xbe>
 80004e8:	2eff      	cmp	r6, #255	; 0xff
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x252>
 80004ec:	e74f      	b.n	800038e <__aeabi_fadd+0xf2>
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	4650      	mov	r0, sl
 80004f2:	04d2      	lsls	r2, r2, #19
 80004f4:	4310      	orrs	r0, r2
 80004f6:	4682      	mov	sl, r0
 80004f8:	2201      	movs	r2, #1
 80004fa:	2b1b      	cmp	r3, #27
 80004fc:	dc08      	bgt.n	8000510 <__aeabi_fadd+0x274>
 80004fe:	4652      	mov	r2, sl
 8000500:	2420      	movs	r4, #32
 8000502:	4650      	mov	r0, sl
 8000504:	40da      	lsrs	r2, r3
 8000506:	1ae3      	subs	r3, r4, r3
 8000508:	4098      	lsls	r0, r3
 800050a:	1e43      	subs	r3, r0, #1
 800050c:	4198      	sbcs	r0, r3
 800050e:	4302      	orrs	r2, r0
 8000510:	000c      	movs	r4, r1
 8000512:	0037      	movs	r7, r6
 8000514:	1aaa      	subs	r2, r5, r2
 8000516:	e6f5      	b.n	8000304 <__aeabi_fadd+0x68>
 8000518:	2800      	cmp	r0, #0
 800051a:	d093      	beq.n	8000444 <__aeabi_fadd+0x1a8>
 800051c:	3b01      	subs	r3, #1
 800051e:	2b00      	cmp	r3, #0
 8000520:	d04f      	beq.n	80005c2 <__aeabi_fadd+0x326>
 8000522:	2eff      	cmp	r6, #255	; 0xff
 8000524:	d1c1      	bne.n	80004aa <__aeabi_fadd+0x20e>
 8000526:	4642      	mov	r2, r8
 8000528:	e733      	b.n	8000392 <__aeabi_fadd+0xf6>
 800052a:	2fff      	cmp	r7, #255	; 0xff
 800052c:	d0ac      	beq.n	8000488 <__aeabi_fadd+0x1ec>
 800052e:	4455      	add	r5, sl
 8000530:	086a      	lsrs	r2, r5, #1
 8000532:	e7a4      	b.n	800047e <__aeabi_fadd+0x1e2>
 8000534:	4653      	mov	r3, sl
 8000536:	000c      	movs	r4, r1
 8000538:	1aee      	subs	r6, r5, r3
 800053a:	e6e8      	b.n	800030e <__aeabi_fadd+0x72>
 800053c:	4653      	mov	r3, sl
 800053e:	2b00      	cmp	r3, #0
 8000540:	d128      	bne.n	8000594 <__aeabi_fadd+0x2f8>
 8000542:	2d00      	cmp	r5, #0
 8000544:	d000      	beq.n	8000548 <__aeabi_fadd+0x2ac>
 8000546:	e722      	b.n	800038e <__aeabi_fadd+0xf2>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	03db      	lsls	r3, r3, #15
 800054c:	469c      	mov	ip, r3
 800054e:	2400      	movs	r4, #0
 8000550:	23ff      	movs	r3, #255	; 0xff
 8000552:	e702      	b.n	800035a <__aeabi_fadd+0xbe>
 8000554:	002a      	movs	r2, r5
 8000556:	4452      	add	r2, sl
 8000558:	e73b      	b.n	80003d2 <__aeabi_fadd+0x136>
 800055a:	4653      	mov	r3, sl
 800055c:	1b5a      	subs	r2, r3, r5
 800055e:	e6d1      	b.n	8000304 <__aeabi_fadd+0x68>
 8000560:	2800      	cmp	r0, #0
 8000562:	d100      	bne.n	8000566 <__aeabi_fadd+0x2ca>
 8000564:	e714      	b.n	8000390 <__aeabi_fadd+0xf4>
 8000566:	2d00      	cmp	r5, #0
 8000568:	d100      	bne.n	800056c <__aeabi_fadd+0x2d0>
 800056a:	e712      	b.n	8000392 <__aeabi_fadd+0xf6>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	03db      	lsls	r3, r3, #15
 8000570:	421a      	tst	r2, r3
 8000572:	d100      	bne.n	8000576 <__aeabi_fadd+0x2da>
 8000574:	e70d      	b.n	8000392 <__aeabi_fadd+0xf6>
 8000576:	4641      	mov	r1, r8
 8000578:	4219      	tst	r1, r3
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0x2e2>
 800057c:	e709      	b.n	8000392 <__aeabi_fadd+0xf6>
 800057e:	4642      	mov	r2, r8
 8000580:	e707      	b.n	8000392 <__aeabi_fadd+0xf6>
 8000582:	000c      	movs	r4, r1
 8000584:	0037      	movs	r7, r6
 8000586:	1aaa      	subs	r2, r5, r2
 8000588:	e6bc      	b.n	8000304 <__aeabi_fadd+0x68>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d013      	beq.n	80005b6 <__aeabi_fadd+0x31a>
 800058e:	000c      	movs	r4, r1
 8000590:	46c4      	mov	ip, r8
 8000592:	e6e2      	b.n	800035a <__aeabi_fadd+0xbe>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x2fe>
 8000598:	e6fb      	b.n	8000392 <__aeabi_fadd+0xf6>
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	03db      	lsls	r3, r3, #15
 800059e:	421a      	tst	r2, r3
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x308>
 80005a2:	e6f6      	b.n	8000392 <__aeabi_fadd+0xf6>
 80005a4:	4640      	mov	r0, r8
 80005a6:	4218      	tst	r0, r3
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0x310>
 80005aa:	e6f2      	b.n	8000392 <__aeabi_fadd+0xf6>
 80005ac:	000c      	movs	r4, r1
 80005ae:	e6ef      	b.n	8000390 <__aeabi_fadd+0xf4>
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fadd+0x31a>
 80005b4:	e763      	b.n	800047e <__aeabi_fadd+0x1e2>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2400      	movs	r4, #0
 80005ba:	4694      	mov	ip, r2
 80005bc:	e6cd      	b.n	800035a <__aeabi_fadd+0xbe>
 80005be:	46c4      	mov	ip, r8
 80005c0:	e6cb      	b.n	800035a <__aeabi_fadd+0xbe>
 80005c2:	002a      	movs	r2, r5
 80005c4:	0037      	movs	r7, r6
 80005c6:	4452      	add	r2, sl
 80005c8:	e703      	b.n	80003d2 <__aeabi_fadd+0x136>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	7dffffff 	.word	0x7dffffff
 80005d0:	fbffffff 	.word	0xfbffffff

080005d4 <__aeabi_fdiv>:
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	464f      	mov	r7, r9
 80005d8:	4646      	mov	r6, r8
 80005da:	46d6      	mov	lr, sl
 80005dc:	0245      	lsls	r5, r0, #9
 80005de:	b5c0      	push	{r6, r7, lr}
 80005e0:	0047      	lsls	r7, r0, #1
 80005e2:	1c0c      	adds	r4, r1, #0
 80005e4:	0a6d      	lsrs	r5, r5, #9
 80005e6:	0e3f      	lsrs	r7, r7, #24
 80005e8:	0fc6      	lsrs	r6, r0, #31
 80005ea:	2f00      	cmp	r7, #0
 80005ec:	d066      	beq.n	80006bc <__aeabi_fdiv+0xe8>
 80005ee:	2fff      	cmp	r7, #255	; 0xff
 80005f0:	d06c      	beq.n	80006cc <__aeabi_fdiv+0xf8>
 80005f2:	2300      	movs	r3, #0
 80005f4:	00ea      	lsls	r2, r5, #3
 80005f6:	2580      	movs	r5, #128	; 0x80
 80005f8:	4699      	mov	r9, r3
 80005fa:	469a      	mov	sl, r3
 80005fc:	04ed      	lsls	r5, r5, #19
 80005fe:	4315      	orrs	r5, r2
 8000600:	3f7f      	subs	r7, #127	; 0x7f
 8000602:	0260      	lsls	r0, r4, #9
 8000604:	0061      	lsls	r1, r4, #1
 8000606:	0a43      	lsrs	r3, r0, #9
 8000608:	4698      	mov	r8, r3
 800060a:	0e09      	lsrs	r1, r1, #24
 800060c:	0fe4      	lsrs	r4, r4, #31
 800060e:	2900      	cmp	r1, #0
 8000610:	d048      	beq.n	80006a4 <__aeabi_fdiv+0xd0>
 8000612:	29ff      	cmp	r1, #255	; 0xff
 8000614:	d010      	beq.n	8000638 <__aeabi_fdiv+0x64>
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	00d8      	lsls	r0, r3, #3
 800061a:	04d2      	lsls	r2, r2, #19
 800061c:	4302      	orrs	r2, r0
 800061e:	4690      	mov	r8, r2
 8000620:	2000      	movs	r0, #0
 8000622:	397f      	subs	r1, #127	; 0x7f
 8000624:	464a      	mov	r2, r9
 8000626:	0033      	movs	r3, r6
 8000628:	1a7f      	subs	r7, r7, r1
 800062a:	4302      	orrs	r2, r0
 800062c:	496c      	ldr	r1, [pc, #432]	; (80007e0 <__aeabi_fdiv+0x20c>)
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	588a      	ldr	r2, [r1, r2]
 8000632:	4063      	eors	r3, r4
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4697      	mov	pc, r2
 8000638:	2b00      	cmp	r3, #0
 800063a:	d16d      	bne.n	8000718 <__aeabi_fdiv+0x144>
 800063c:	2002      	movs	r0, #2
 800063e:	3fff      	subs	r7, #255	; 0xff
 8000640:	e033      	b.n	80006aa <__aeabi_fdiv+0xd6>
 8000642:	2300      	movs	r3, #0
 8000644:	4698      	mov	r8, r3
 8000646:	0026      	movs	r6, r4
 8000648:	4645      	mov	r5, r8
 800064a:	4682      	mov	sl, r0
 800064c:	4653      	mov	r3, sl
 800064e:	2b02      	cmp	r3, #2
 8000650:	d100      	bne.n	8000654 <__aeabi_fdiv+0x80>
 8000652:	e07f      	b.n	8000754 <__aeabi_fdiv+0x180>
 8000654:	2b03      	cmp	r3, #3
 8000656:	d100      	bne.n	800065a <__aeabi_fdiv+0x86>
 8000658:	e094      	b.n	8000784 <__aeabi_fdiv+0x1b0>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d017      	beq.n	800068e <__aeabi_fdiv+0xba>
 800065e:	0038      	movs	r0, r7
 8000660:	307f      	adds	r0, #127	; 0x7f
 8000662:	2800      	cmp	r0, #0
 8000664:	dd5f      	ble.n	8000726 <__aeabi_fdiv+0x152>
 8000666:	076b      	lsls	r3, r5, #29
 8000668:	d004      	beq.n	8000674 <__aeabi_fdiv+0xa0>
 800066a:	230f      	movs	r3, #15
 800066c:	402b      	ands	r3, r5
 800066e:	2b04      	cmp	r3, #4
 8000670:	d000      	beq.n	8000674 <__aeabi_fdiv+0xa0>
 8000672:	3504      	adds	r5, #4
 8000674:	012b      	lsls	r3, r5, #4
 8000676:	d503      	bpl.n	8000680 <__aeabi_fdiv+0xac>
 8000678:	0038      	movs	r0, r7
 800067a:	4b5a      	ldr	r3, [pc, #360]	; (80007e4 <__aeabi_fdiv+0x210>)
 800067c:	3080      	adds	r0, #128	; 0x80
 800067e:	401d      	ands	r5, r3
 8000680:	28fe      	cmp	r0, #254	; 0xfe
 8000682:	dc67      	bgt.n	8000754 <__aeabi_fdiv+0x180>
 8000684:	01ad      	lsls	r5, r5, #6
 8000686:	0a6d      	lsrs	r5, r5, #9
 8000688:	b2c0      	uxtb	r0, r0
 800068a:	e002      	b.n	8000692 <__aeabi_fdiv+0xbe>
 800068c:	001e      	movs	r6, r3
 800068e:	2000      	movs	r0, #0
 8000690:	2500      	movs	r5, #0
 8000692:	05c0      	lsls	r0, r0, #23
 8000694:	4328      	orrs	r0, r5
 8000696:	07f6      	lsls	r6, r6, #31
 8000698:	4330      	orrs	r0, r6
 800069a:	bce0      	pop	{r5, r6, r7}
 800069c:	46ba      	mov	sl, r7
 800069e:	46b1      	mov	r9, r6
 80006a0:	46a8      	mov	r8, r5
 80006a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d12b      	bne.n	8000700 <__aeabi_fdiv+0x12c>
 80006a8:	2001      	movs	r0, #1
 80006aa:	464a      	mov	r2, r9
 80006ac:	0033      	movs	r3, r6
 80006ae:	494e      	ldr	r1, [pc, #312]	; (80007e8 <__aeabi_fdiv+0x214>)
 80006b0:	4302      	orrs	r2, r0
 80006b2:	0092      	lsls	r2, r2, #2
 80006b4:	588a      	ldr	r2, [r1, r2]
 80006b6:	4063      	eors	r3, r4
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4697      	mov	pc, r2
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d113      	bne.n	80006e8 <__aeabi_fdiv+0x114>
 80006c0:	2304      	movs	r3, #4
 80006c2:	4699      	mov	r9, r3
 80006c4:	3b03      	subs	r3, #3
 80006c6:	2700      	movs	r7, #0
 80006c8:	469a      	mov	sl, r3
 80006ca:	e79a      	b.n	8000602 <__aeabi_fdiv+0x2e>
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d105      	bne.n	80006dc <__aeabi_fdiv+0x108>
 80006d0:	2308      	movs	r3, #8
 80006d2:	4699      	mov	r9, r3
 80006d4:	3b06      	subs	r3, #6
 80006d6:	27ff      	movs	r7, #255	; 0xff
 80006d8:	469a      	mov	sl, r3
 80006da:	e792      	b.n	8000602 <__aeabi_fdiv+0x2e>
 80006dc:	230c      	movs	r3, #12
 80006de:	4699      	mov	r9, r3
 80006e0:	3b09      	subs	r3, #9
 80006e2:	27ff      	movs	r7, #255	; 0xff
 80006e4:	469a      	mov	sl, r3
 80006e6:	e78c      	b.n	8000602 <__aeabi_fdiv+0x2e>
 80006e8:	0028      	movs	r0, r5
 80006ea:	f001 fea7 	bl	800243c <__clzsi2>
 80006ee:	2776      	movs	r7, #118	; 0x76
 80006f0:	1f43      	subs	r3, r0, #5
 80006f2:	409d      	lsls	r5, r3
 80006f4:	2300      	movs	r3, #0
 80006f6:	427f      	negs	r7, r7
 80006f8:	4699      	mov	r9, r3
 80006fa:	469a      	mov	sl, r3
 80006fc:	1a3f      	subs	r7, r7, r0
 80006fe:	e780      	b.n	8000602 <__aeabi_fdiv+0x2e>
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fe9b 	bl	800243c <__clzsi2>
 8000706:	4642      	mov	r2, r8
 8000708:	1f43      	subs	r3, r0, #5
 800070a:	2176      	movs	r1, #118	; 0x76
 800070c:	409a      	lsls	r2, r3
 800070e:	4249      	negs	r1, r1
 8000710:	1a09      	subs	r1, r1, r0
 8000712:	4690      	mov	r8, r2
 8000714:	2000      	movs	r0, #0
 8000716:	e785      	b.n	8000624 <__aeabi_fdiv+0x50>
 8000718:	21ff      	movs	r1, #255	; 0xff
 800071a:	2003      	movs	r0, #3
 800071c:	e782      	b.n	8000624 <__aeabi_fdiv+0x50>
 800071e:	001e      	movs	r6, r3
 8000720:	20ff      	movs	r0, #255	; 0xff
 8000722:	2500      	movs	r5, #0
 8000724:	e7b5      	b.n	8000692 <__aeabi_fdiv+0xbe>
 8000726:	2301      	movs	r3, #1
 8000728:	1a1b      	subs	r3, r3, r0
 800072a:	2b1b      	cmp	r3, #27
 800072c:	dcaf      	bgt.n	800068e <__aeabi_fdiv+0xba>
 800072e:	379e      	adds	r7, #158	; 0x9e
 8000730:	0029      	movs	r1, r5
 8000732:	40bd      	lsls	r5, r7
 8000734:	40d9      	lsrs	r1, r3
 8000736:	1e6a      	subs	r2, r5, #1
 8000738:	4195      	sbcs	r5, r2
 800073a:	430d      	orrs	r5, r1
 800073c:	076b      	lsls	r3, r5, #29
 800073e:	d004      	beq.n	800074a <__aeabi_fdiv+0x176>
 8000740:	230f      	movs	r3, #15
 8000742:	402b      	ands	r3, r5
 8000744:	2b04      	cmp	r3, #4
 8000746:	d000      	beq.n	800074a <__aeabi_fdiv+0x176>
 8000748:	3504      	adds	r5, #4
 800074a:	016b      	lsls	r3, r5, #5
 800074c:	d544      	bpl.n	80007d8 <__aeabi_fdiv+0x204>
 800074e:	2001      	movs	r0, #1
 8000750:	2500      	movs	r5, #0
 8000752:	e79e      	b.n	8000692 <__aeabi_fdiv+0xbe>
 8000754:	20ff      	movs	r0, #255	; 0xff
 8000756:	2500      	movs	r5, #0
 8000758:	e79b      	b.n	8000692 <__aeabi_fdiv+0xbe>
 800075a:	2580      	movs	r5, #128	; 0x80
 800075c:	2600      	movs	r6, #0
 800075e:	20ff      	movs	r0, #255	; 0xff
 8000760:	03ed      	lsls	r5, r5, #15
 8000762:	e796      	b.n	8000692 <__aeabi_fdiv+0xbe>
 8000764:	2300      	movs	r3, #0
 8000766:	4698      	mov	r8, r3
 8000768:	2080      	movs	r0, #128	; 0x80
 800076a:	03c0      	lsls	r0, r0, #15
 800076c:	4205      	tst	r5, r0
 800076e:	d009      	beq.n	8000784 <__aeabi_fdiv+0x1b0>
 8000770:	4643      	mov	r3, r8
 8000772:	4203      	tst	r3, r0
 8000774:	d106      	bne.n	8000784 <__aeabi_fdiv+0x1b0>
 8000776:	4645      	mov	r5, r8
 8000778:	4305      	orrs	r5, r0
 800077a:	026d      	lsls	r5, r5, #9
 800077c:	0026      	movs	r6, r4
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	0a6d      	lsrs	r5, r5, #9
 8000782:	e786      	b.n	8000692 <__aeabi_fdiv+0xbe>
 8000784:	2080      	movs	r0, #128	; 0x80
 8000786:	03c0      	lsls	r0, r0, #15
 8000788:	4305      	orrs	r5, r0
 800078a:	026d      	lsls	r5, r5, #9
 800078c:	20ff      	movs	r0, #255	; 0xff
 800078e:	0a6d      	lsrs	r5, r5, #9
 8000790:	e77f      	b.n	8000692 <__aeabi_fdiv+0xbe>
 8000792:	4641      	mov	r1, r8
 8000794:	016a      	lsls	r2, r5, #5
 8000796:	0148      	lsls	r0, r1, #5
 8000798:	4282      	cmp	r2, r0
 800079a:	d219      	bcs.n	80007d0 <__aeabi_fdiv+0x1fc>
 800079c:	211b      	movs	r1, #27
 800079e:	2500      	movs	r5, #0
 80007a0:	3f01      	subs	r7, #1
 80007a2:	2601      	movs	r6, #1
 80007a4:	0014      	movs	r4, r2
 80007a6:	006d      	lsls	r5, r5, #1
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	db01      	blt.n	80007b2 <__aeabi_fdiv+0x1de>
 80007ae:	4290      	cmp	r0, r2
 80007b0:	d801      	bhi.n	80007b6 <__aeabi_fdiv+0x1e2>
 80007b2:	1a12      	subs	r2, r2, r0
 80007b4:	4335      	orrs	r5, r6
 80007b6:	3901      	subs	r1, #1
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d1f3      	bne.n	80007a4 <__aeabi_fdiv+0x1d0>
 80007bc:	1e50      	subs	r0, r2, #1
 80007be:	4182      	sbcs	r2, r0
 80007c0:	0038      	movs	r0, r7
 80007c2:	307f      	adds	r0, #127	; 0x7f
 80007c4:	001e      	movs	r6, r3
 80007c6:	4315      	orrs	r5, r2
 80007c8:	2800      	cmp	r0, #0
 80007ca:	dd00      	ble.n	80007ce <__aeabi_fdiv+0x1fa>
 80007cc:	e74b      	b.n	8000666 <__aeabi_fdiv+0x92>
 80007ce:	e7aa      	b.n	8000726 <__aeabi_fdiv+0x152>
 80007d0:	211a      	movs	r1, #26
 80007d2:	2501      	movs	r5, #1
 80007d4:	1a12      	subs	r2, r2, r0
 80007d6:	e7e4      	b.n	80007a2 <__aeabi_fdiv+0x1ce>
 80007d8:	01ad      	lsls	r5, r5, #6
 80007da:	2000      	movs	r0, #0
 80007dc:	0a6d      	lsrs	r5, r5, #9
 80007de:	e758      	b.n	8000692 <__aeabi_fdiv+0xbe>
 80007e0:	08005a50 	.word	0x08005a50
 80007e4:	f7ffffff 	.word	0xf7ffffff
 80007e8:	08005a90 	.word	0x08005a90

080007ec <__aeabi_i2f>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d013      	beq.n	800081a <__aeabi_i2f+0x2e>
 80007f2:	17c3      	asrs	r3, r0, #31
 80007f4:	18c5      	adds	r5, r0, r3
 80007f6:	405d      	eors	r5, r3
 80007f8:	0fc4      	lsrs	r4, r0, #31
 80007fa:	0028      	movs	r0, r5
 80007fc:	f001 fe1e 	bl	800243c <__clzsi2>
 8000800:	239e      	movs	r3, #158	; 0x9e
 8000802:	0001      	movs	r1, r0
 8000804:	1a1b      	subs	r3, r3, r0
 8000806:	2b96      	cmp	r3, #150	; 0x96
 8000808:	dc0f      	bgt.n	800082a <__aeabi_i2f+0x3e>
 800080a:	2808      	cmp	r0, #8
 800080c:	dd01      	ble.n	8000812 <__aeabi_i2f+0x26>
 800080e:	3908      	subs	r1, #8
 8000810:	408d      	lsls	r5, r1
 8000812:	026d      	lsls	r5, r5, #9
 8000814:	0a6d      	lsrs	r5, r5, #9
 8000816:	b2d8      	uxtb	r0, r3
 8000818:	e002      	b.n	8000820 <__aeabi_i2f+0x34>
 800081a:	2400      	movs	r4, #0
 800081c:	2000      	movs	r0, #0
 800081e:	2500      	movs	r5, #0
 8000820:	05c0      	lsls	r0, r0, #23
 8000822:	4328      	orrs	r0, r5
 8000824:	07e4      	lsls	r4, r4, #31
 8000826:	4320      	orrs	r0, r4
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	2b99      	cmp	r3, #153	; 0x99
 800082c:	dd0b      	ble.n	8000846 <__aeabi_i2f+0x5a>
 800082e:	2205      	movs	r2, #5
 8000830:	002e      	movs	r6, r5
 8000832:	1a12      	subs	r2, r2, r0
 8000834:	40d6      	lsrs	r6, r2
 8000836:	0002      	movs	r2, r0
 8000838:	321b      	adds	r2, #27
 800083a:	4095      	lsls	r5, r2
 800083c:	0028      	movs	r0, r5
 800083e:	1e45      	subs	r5, r0, #1
 8000840:	41a8      	sbcs	r0, r5
 8000842:	0035      	movs	r5, r6
 8000844:	4305      	orrs	r5, r0
 8000846:	2905      	cmp	r1, #5
 8000848:	dd01      	ble.n	800084e <__aeabi_i2f+0x62>
 800084a:	1f4a      	subs	r2, r1, #5
 800084c:	4095      	lsls	r5, r2
 800084e:	002a      	movs	r2, r5
 8000850:	4e08      	ldr	r6, [pc, #32]	; (8000874 <__aeabi_i2f+0x88>)
 8000852:	4032      	ands	r2, r6
 8000854:	0768      	lsls	r0, r5, #29
 8000856:	d009      	beq.n	800086c <__aeabi_i2f+0x80>
 8000858:	200f      	movs	r0, #15
 800085a:	4028      	ands	r0, r5
 800085c:	2804      	cmp	r0, #4
 800085e:	d005      	beq.n	800086c <__aeabi_i2f+0x80>
 8000860:	3204      	adds	r2, #4
 8000862:	0150      	lsls	r0, r2, #5
 8000864:	d502      	bpl.n	800086c <__aeabi_i2f+0x80>
 8000866:	239f      	movs	r3, #159	; 0x9f
 8000868:	4032      	ands	r2, r6
 800086a:	1a5b      	subs	r3, r3, r1
 800086c:	0192      	lsls	r2, r2, #6
 800086e:	0a55      	lsrs	r5, r2, #9
 8000870:	b2d8      	uxtb	r0, r3
 8000872:	e7d5      	b.n	8000820 <__aeabi_i2f+0x34>
 8000874:	fbffffff 	.word	0xfbffffff

08000878 <__aeabi_dadd>:
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	464f      	mov	r7, r9
 800087c:	46d6      	mov	lr, sl
 800087e:	4646      	mov	r6, r8
 8000880:	000d      	movs	r5, r1
 8000882:	0001      	movs	r1, r0
 8000884:	0018      	movs	r0, r3
 8000886:	b5c0      	push	{r6, r7, lr}
 8000888:	0017      	movs	r7, r2
 800088a:	032b      	lsls	r3, r5, #12
 800088c:	0a5a      	lsrs	r2, r3, #9
 800088e:	0f4b      	lsrs	r3, r1, #29
 8000890:	4313      	orrs	r3, r2
 8000892:	00ca      	lsls	r2, r1, #3
 8000894:	4691      	mov	r9, r2
 8000896:	0302      	lsls	r2, r0, #12
 8000898:	006e      	lsls	r6, r5, #1
 800089a:	0041      	lsls	r1, r0, #1
 800089c:	0a52      	lsrs	r2, r2, #9
 800089e:	0fec      	lsrs	r4, r5, #31
 80008a0:	0f7d      	lsrs	r5, r7, #29
 80008a2:	4315      	orrs	r5, r2
 80008a4:	0d76      	lsrs	r6, r6, #21
 80008a6:	0d49      	lsrs	r1, r1, #21
 80008a8:	0fc0      	lsrs	r0, r0, #31
 80008aa:	4682      	mov	sl, r0
 80008ac:	46ac      	mov	ip, r5
 80008ae:	00ff      	lsls	r7, r7, #3
 80008b0:	1a72      	subs	r2, r6, r1
 80008b2:	4284      	cmp	r4, r0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x40>
 80008b6:	e098      	b.n	80009ea <__aeabi_dadd+0x172>
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	dc00      	bgt.n	80008be <__aeabi_dadd+0x46>
 80008bc:	e081      	b.n	80009c2 <__aeabi_dadd+0x14a>
 80008be:	2900      	cmp	r1, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x4c>
 80008c2:	e0b6      	b.n	8000a32 <__aeabi_dadd+0x1ba>
 80008c4:	49c9      	ldr	r1, [pc, #804]	; (8000bec <__aeabi_dadd+0x374>)
 80008c6:	428e      	cmp	r6, r1
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x54>
 80008ca:	e172      	b.n	8000bb2 <__aeabi_dadd+0x33a>
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0028      	movs	r0, r5
 80008d0:	0409      	lsls	r1, r1, #16
 80008d2:	4308      	orrs	r0, r1
 80008d4:	4684      	mov	ip, r0
 80008d6:	2a38      	cmp	r2, #56	; 0x38
 80008d8:	dd00      	ble.n	80008dc <__aeabi_dadd+0x64>
 80008da:	e15e      	b.n	8000b9a <__aeabi_dadd+0x322>
 80008dc:	2a1f      	cmp	r2, #31
 80008de:	dd00      	ble.n	80008e2 <__aeabi_dadd+0x6a>
 80008e0:	e1ee      	b.n	8000cc0 <__aeabi_dadd+0x448>
 80008e2:	2020      	movs	r0, #32
 80008e4:	0039      	movs	r1, r7
 80008e6:	4665      	mov	r5, ip
 80008e8:	1a80      	subs	r0, r0, r2
 80008ea:	4087      	lsls	r7, r0
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	4085      	lsls	r5, r0
 80008f0:	430d      	orrs	r5, r1
 80008f2:	0039      	movs	r1, r7
 80008f4:	1e4f      	subs	r7, r1, #1
 80008f6:	41b9      	sbcs	r1, r7
 80008f8:	4667      	mov	r7, ip
 80008fa:	40d7      	lsrs	r7, r2
 80008fc:	4329      	orrs	r1, r5
 80008fe:	1bdb      	subs	r3, r3, r7
 8000900:	464a      	mov	r2, r9
 8000902:	1a55      	subs	r5, r2, r1
 8000904:	45a9      	cmp	r9, r5
 8000906:	4189      	sbcs	r1, r1
 8000908:	4249      	negs	r1, r1
 800090a:	1a5b      	subs	r3, r3, r1
 800090c:	4698      	mov	r8, r3
 800090e:	4643      	mov	r3, r8
 8000910:	021b      	lsls	r3, r3, #8
 8000912:	d400      	bmi.n	8000916 <__aeabi_dadd+0x9e>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_dadd+0x238>
 8000916:	4643      	mov	r3, r8
 8000918:	025b      	lsls	r3, r3, #9
 800091a:	0a5b      	lsrs	r3, r3, #9
 800091c:	4698      	mov	r8, r3
 800091e:	4643      	mov	r3, r8
 8000920:	2b00      	cmp	r3, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0xae>
 8000924:	e12c      	b.n	8000b80 <__aeabi_dadd+0x308>
 8000926:	4640      	mov	r0, r8
 8000928:	f001 fd88 	bl	800243c <__clzsi2>
 800092c:	0001      	movs	r1, r0
 800092e:	3908      	subs	r1, #8
 8000930:	2220      	movs	r2, #32
 8000932:	0028      	movs	r0, r5
 8000934:	4643      	mov	r3, r8
 8000936:	1a52      	subs	r2, r2, r1
 8000938:	408b      	lsls	r3, r1
 800093a:	40d0      	lsrs	r0, r2
 800093c:	408d      	lsls	r5, r1
 800093e:	4303      	orrs	r3, r0
 8000940:	428e      	cmp	r6, r1
 8000942:	dd00      	ble.n	8000946 <__aeabi_dadd+0xce>
 8000944:	e117      	b.n	8000b76 <__aeabi_dadd+0x2fe>
 8000946:	1b8e      	subs	r6, r1, r6
 8000948:	1c72      	adds	r2, r6, #1
 800094a:	2a1f      	cmp	r2, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0xd8>
 800094e:	e1a7      	b.n	8000ca0 <__aeabi_dadd+0x428>
 8000950:	2120      	movs	r1, #32
 8000952:	0018      	movs	r0, r3
 8000954:	002e      	movs	r6, r5
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	408d      	lsls	r5, r1
 800095a:	4088      	lsls	r0, r1
 800095c:	40d6      	lsrs	r6, r2
 800095e:	40d3      	lsrs	r3, r2
 8000960:	1e69      	subs	r1, r5, #1
 8000962:	418d      	sbcs	r5, r1
 8000964:	4330      	orrs	r0, r6
 8000966:	4698      	mov	r8, r3
 8000968:	2600      	movs	r6, #0
 800096a:	4305      	orrs	r5, r0
 800096c:	076b      	lsls	r3, r5, #29
 800096e:	d009      	beq.n	8000984 <__aeabi_dadd+0x10c>
 8000970:	230f      	movs	r3, #15
 8000972:	402b      	ands	r3, r5
 8000974:	2b04      	cmp	r3, #4
 8000976:	d005      	beq.n	8000984 <__aeabi_dadd+0x10c>
 8000978:	1d2b      	adds	r3, r5, #4
 800097a:	42ab      	cmp	r3, r5
 800097c:	41ad      	sbcs	r5, r5
 800097e:	426d      	negs	r5, r5
 8000980:	44a8      	add	r8, r5
 8000982:	001d      	movs	r5, r3
 8000984:	4643      	mov	r3, r8
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	d400      	bmi.n	800098c <__aeabi_dadd+0x114>
 800098a:	e094      	b.n	8000ab6 <__aeabi_dadd+0x23e>
 800098c:	4b97      	ldr	r3, [pc, #604]	; (8000bec <__aeabi_dadd+0x374>)
 800098e:	1c72      	adds	r2, r6, #1
 8000990:	429a      	cmp	r2, r3
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x11e>
 8000994:	e09d      	b.n	8000ad2 <__aeabi_dadd+0x25a>
 8000996:	4641      	mov	r1, r8
 8000998:	4b95      	ldr	r3, [pc, #596]	; (8000bf0 <__aeabi_dadd+0x378>)
 800099a:	08ed      	lsrs	r5, r5, #3
 800099c:	4019      	ands	r1, r3
 800099e:	000b      	movs	r3, r1
 80009a0:	0552      	lsls	r2, r2, #21
 80009a2:	0749      	lsls	r1, r1, #29
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	4329      	orrs	r1, r5
 80009a8:	0b1b      	lsrs	r3, r3, #12
 80009aa:	0d52      	lsrs	r2, r2, #21
 80009ac:	0512      	lsls	r2, r2, #20
 80009ae:	4313      	orrs	r3, r2
 80009b0:	07e4      	lsls	r4, r4, #31
 80009b2:	4323      	orrs	r3, r4
 80009b4:	0008      	movs	r0, r1
 80009b6:	0019      	movs	r1, r3
 80009b8:	bce0      	pop	{r5, r6, r7}
 80009ba:	46ba      	mov	sl, r7
 80009bc:	46b1      	mov	r9, r6
 80009be:	46a8      	mov	r8, r5
 80009c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c2:	2a00      	cmp	r2, #0
 80009c4:	d043      	beq.n	8000a4e <__aeabi_dadd+0x1d6>
 80009c6:	1b8a      	subs	r2, r1, r6
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x156>
 80009cc:	e12a      	b.n	8000c24 <__aeabi_dadd+0x3ac>
 80009ce:	464c      	mov	r4, r9
 80009d0:	431c      	orrs	r4, r3
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dadd+0x15e>
 80009d4:	e1d1      	b.n	8000d7a <__aeabi_dadd+0x502>
 80009d6:	1e54      	subs	r4, r2, #1
 80009d8:	2a01      	cmp	r2, #1
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x166>
 80009dc:	e21f      	b.n	8000e1e <__aeabi_dadd+0x5a6>
 80009de:	4d83      	ldr	r5, [pc, #524]	; (8000bec <__aeabi_dadd+0x374>)
 80009e0:	42aa      	cmp	r2, r5
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x16e>
 80009e4:	e272      	b.n	8000ecc <__aeabi_dadd+0x654>
 80009e6:	0022      	movs	r2, r4
 80009e8:	e123      	b.n	8000c32 <__aeabi_dadd+0x3ba>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	dc00      	bgt.n	80009f0 <__aeabi_dadd+0x178>
 80009ee:	e098      	b.n	8000b22 <__aeabi_dadd+0x2aa>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	d042      	beq.n	8000a7a <__aeabi_dadd+0x202>
 80009f4:	497d      	ldr	r1, [pc, #500]	; (8000bec <__aeabi_dadd+0x374>)
 80009f6:	428e      	cmp	r6, r1
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x184>
 80009fa:	e0da      	b.n	8000bb2 <__aeabi_dadd+0x33a>
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	0028      	movs	r0, r5
 8000a00:	0409      	lsls	r1, r1, #16
 8000a02:	4308      	orrs	r0, r1
 8000a04:	4684      	mov	ip, r0
 8000a06:	2a38      	cmp	r2, #56	; 0x38
 8000a08:	dd00      	ble.n	8000a0c <__aeabi_dadd+0x194>
 8000a0a:	e129      	b.n	8000c60 <__aeabi_dadd+0x3e8>
 8000a0c:	2a1f      	cmp	r2, #31
 8000a0e:	dc00      	bgt.n	8000a12 <__aeabi_dadd+0x19a>
 8000a10:	e187      	b.n	8000d22 <__aeabi_dadd+0x4aa>
 8000a12:	0011      	movs	r1, r2
 8000a14:	4665      	mov	r5, ip
 8000a16:	3920      	subs	r1, #32
 8000a18:	40cd      	lsrs	r5, r1
 8000a1a:	2a20      	cmp	r2, #32
 8000a1c:	d004      	beq.n	8000a28 <__aeabi_dadd+0x1b0>
 8000a1e:	2040      	movs	r0, #64	; 0x40
 8000a20:	4661      	mov	r1, ip
 8000a22:	1a82      	subs	r2, r0, r2
 8000a24:	4091      	lsls	r1, r2
 8000a26:	430f      	orrs	r7, r1
 8000a28:	0039      	movs	r1, r7
 8000a2a:	1e4f      	subs	r7, r1, #1
 8000a2c:	41b9      	sbcs	r1, r7
 8000a2e:	430d      	orrs	r5, r1
 8000a30:	e11b      	b.n	8000c6a <__aeabi_dadd+0x3f2>
 8000a32:	0029      	movs	r1, r5
 8000a34:	4339      	orrs	r1, r7
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dadd+0x1c2>
 8000a38:	e0b5      	b.n	8000ba6 <__aeabi_dadd+0x32e>
 8000a3a:	1e51      	subs	r1, r2, #1
 8000a3c:	2a01      	cmp	r2, #1
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x1ca>
 8000a40:	e1ab      	b.n	8000d9a <__aeabi_dadd+0x522>
 8000a42:	486a      	ldr	r0, [pc, #424]	; (8000bec <__aeabi_dadd+0x374>)
 8000a44:	4282      	cmp	r2, r0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x1d2>
 8000a48:	e1b2      	b.n	8000db0 <__aeabi_dadd+0x538>
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	e743      	b.n	80008d6 <__aeabi_dadd+0x5e>
 8000a4e:	4969      	ldr	r1, [pc, #420]	; (8000bf4 <__aeabi_dadd+0x37c>)
 8000a50:	1c75      	adds	r5, r6, #1
 8000a52:	420d      	tst	r5, r1
 8000a54:	d000      	beq.n	8000a58 <__aeabi_dadd+0x1e0>
 8000a56:	e0cf      	b.n	8000bf8 <__aeabi_dadd+0x380>
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_dadd+0x1e6>
 8000a5c:	e193      	b.n	8000d86 <__aeabi_dadd+0x50e>
 8000a5e:	4649      	mov	r1, r9
 8000a60:	4319      	orrs	r1, r3
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dadd+0x1ee>
 8000a64:	e1d1      	b.n	8000e0a <__aeabi_dadd+0x592>
 8000a66:	4661      	mov	r1, ip
 8000a68:	4339      	orrs	r1, r7
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_dadd+0x1f6>
 8000a6c:	e1e3      	b.n	8000e36 <__aeabi_dadd+0x5be>
 8000a6e:	4649      	mov	r1, r9
 8000a70:	0758      	lsls	r0, r3, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	4301      	orrs	r1, r0
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	e026      	b.n	8000ac8 <__aeabi_dadd+0x250>
 8000a7a:	0029      	movs	r1, r5
 8000a7c:	4339      	orrs	r1, r7
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x20a>
 8000a80:	e091      	b.n	8000ba6 <__aeabi_dadd+0x32e>
 8000a82:	1e51      	subs	r1, r2, #1
 8000a84:	2a01      	cmp	r2, #1
 8000a86:	d005      	beq.n	8000a94 <__aeabi_dadd+0x21c>
 8000a88:	4858      	ldr	r0, [pc, #352]	; (8000bec <__aeabi_dadd+0x374>)
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x218>
 8000a8e:	e18f      	b.n	8000db0 <__aeabi_dadd+0x538>
 8000a90:	000a      	movs	r2, r1
 8000a92:	e7b8      	b.n	8000a06 <__aeabi_dadd+0x18e>
 8000a94:	003d      	movs	r5, r7
 8000a96:	444d      	add	r5, r9
 8000a98:	454d      	cmp	r5, r9
 8000a9a:	4189      	sbcs	r1, r1
 8000a9c:	4463      	add	r3, ip
 8000a9e:	4698      	mov	r8, r3
 8000aa0:	4249      	negs	r1, r1
 8000aa2:	4488      	add	r8, r1
 8000aa4:	4643      	mov	r3, r8
 8000aa6:	2602      	movs	r6, #2
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	d500      	bpl.n	8000aae <__aeabi_dadd+0x236>
 8000aac:	e0eb      	b.n	8000c86 <__aeabi_dadd+0x40e>
 8000aae:	3e01      	subs	r6, #1
 8000ab0:	076b      	lsls	r3, r5, #29
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_dadd+0x23e>
 8000ab4:	e75c      	b.n	8000970 <__aeabi_dadd+0xf8>
 8000ab6:	4643      	mov	r3, r8
 8000ab8:	08e9      	lsrs	r1, r5, #3
 8000aba:	075a      	lsls	r2, r3, #29
 8000abc:	4311      	orrs	r1, r2
 8000abe:	0032      	movs	r2, r6
 8000ac0:	08db      	lsrs	r3, r3, #3
 8000ac2:	484a      	ldr	r0, [pc, #296]	; (8000bec <__aeabi_dadd+0x374>)
 8000ac4:	4282      	cmp	r2, r0
 8000ac6:	d021      	beq.n	8000b0c <__aeabi_dadd+0x294>
 8000ac8:	031b      	lsls	r3, r3, #12
 8000aca:	0552      	lsls	r2, r2, #21
 8000acc:	0b1b      	lsrs	r3, r3, #12
 8000ace:	0d52      	lsrs	r2, r2, #21
 8000ad0:	e76c      	b.n	80009ac <__aeabi_dadd+0x134>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e769      	b.n	80009ac <__aeabi_dadd+0x134>
 8000ad8:	002a      	movs	r2, r5
 8000ada:	433a      	orrs	r2, r7
 8000adc:	d069      	beq.n	8000bb2 <__aeabi_dadd+0x33a>
 8000ade:	464a      	mov	r2, r9
 8000ae0:	0758      	lsls	r0, r3, #29
 8000ae2:	08d1      	lsrs	r1, r2, #3
 8000ae4:	08da      	lsrs	r2, r3, #3
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	031b      	lsls	r3, r3, #12
 8000aea:	4308      	orrs	r0, r1
 8000aec:	421a      	tst	r2, r3
 8000aee:	d007      	beq.n	8000b00 <__aeabi_dadd+0x288>
 8000af0:	0029      	movs	r1, r5
 8000af2:	08ed      	lsrs	r5, r5, #3
 8000af4:	421d      	tst	r5, r3
 8000af6:	d103      	bne.n	8000b00 <__aeabi_dadd+0x288>
 8000af8:	002a      	movs	r2, r5
 8000afa:	08ff      	lsrs	r7, r7, #3
 8000afc:	0748      	lsls	r0, r1, #29
 8000afe:	4338      	orrs	r0, r7
 8000b00:	0f43      	lsrs	r3, r0, #29
 8000b02:	00c1      	lsls	r1, r0, #3
 8000b04:	075b      	lsls	r3, r3, #29
 8000b06:	08c9      	lsrs	r1, r1, #3
 8000b08:	4319      	orrs	r1, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	000a      	movs	r2, r1
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x29c>
 8000b12:	e213      	b.n	8000f3c <__aeabi_dadd+0x6c4>
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	0312      	lsls	r2, r2, #12
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	031b      	lsls	r3, r3, #12
 8000b1c:	4a33      	ldr	r2, [pc, #204]	; (8000bec <__aeabi_dadd+0x374>)
 8000b1e:	0b1b      	lsrs	r3, r3, #12
 8000b20:	e744      	b.n	80009ac <__aeabi_dadd+0x134>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d04b      	beq.n	8000bbe <__aeabi_dadd+0x346>
 8000b26:	1b8a      	subs	r2, r1, r6
 8000b28:	2e00      	cmp	r6, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x2b6>
 8000b2c:	e0e7      	b.n	8000cfe <__aeabi_dadd+0x486>
 8000b2e:	482f      	ldr	r0, [pc, #188]	; (8000bec <__aeabi_dadd+0x374>)
 8000b30:	4281      	cmp	r1, r0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x2be>
 8000b34:	e195      	b.n	8000e62 <__aeabi_dadd+0x5ea>
 8000b36:	2080      	movs	r0, #128	; 0x80
 8000b38:	0400      	lsls	r0, r0, #16
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	2a38      	cmp	r2, #56	; 0x38
 8000b3e:	dd00      	ble.n	8000b42 <__aeabi_dadd+0x2ca>
 8000b40:	e143      	b.n	8000dca <__aeabi_dadd+0x552>
 8000b42:	2a1f      	cmp	r2, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x2d0>
 8000b46:	e1db      	b.n	8000f00 <__aeabi_dadd+0x688>
 8000b48:	2020      	movs	r0, #32
 8000b4a:	001d      	movs	r5, r3
 8000b4c:	464e      	mov	r6, r9
 8000b4e:	1a80      	subs	r0, r0, r2
 8000b50:	4085      	lsls	r5, r0
 8000b52:	40d6      	lsrs	r6, r2
 8000b54:	4335      	orrs	r5, r6
 8000b56:	464e      	mov	r6, r9
 8000b58:	4086      	lsls	r6, r0
 8000b5a:	0030      	movs	r0, r6
 8000b5c:	40d3      	lsrs	r3, r2
 8000b5e:	1e46      	subs	r6, r0, #1
 8000b60:	41b0      	sbcs	r0, r6
 8000b62:	449c      	add	ip, r3
 8000b64:	4305      	orrs	r5, r0
 8000b66:	19ed      	adds	r5, r5, r7
 8000b68:	42bd      	cmp	r5, r7
 8000b6a:	419b      	sbcs	r3, r3
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	4463      	add	r3, ip
 8000b70:	4698      	mov	r8, r3
 8000b72:	000e      	movs	r6, r1
 8000b74:	e07f      	b.n	8000c76 <__aeabi_dadd+0x3fe>
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <__aeabi_dadd+0x378>)
 8000b78:	1a76      	subs	r6, r6, r1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	4698      	mov	r8, r3
 8000b7e:	e6f5      	b.n	800096c <__aeabi_dadd+0xf4>
 8000b80:	0028      	movs	r0, r5
 8000b82:	f001 fc5b 	bl	800243c <__clzsi2>
 8000b86:	0001      	movs	r1, r0
 8000b88:	3118      	adds	r1, #24
 8000b8a:	291f      	cmp	r1, #31
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_dadd+0x318>
 8000b8e:	e6cf      	b.n	8000930 <__aeabi_dadd+0xb8>
 8000b90:	002b      	movs	r3, r5
 8000b92:	3808      	subs	r0, #8
 8000b94:	4083      	lsls	r3, r0
 8000b96:	2500      	movs	r5, #0
 8000b98:	e6d2      	b.n	8000940 <__aeabi_dadd+0xc8>
 8000b9a:	4662      	mov	r2, ip
 8000b9c:	433a      	orrs	r2, r7
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	1e4f      	subs	r7, r1, #1
 8000ba2:	41b9      	sbcs	r1, r7
 8000ba4:	e6ac      	b.n	8000900 <__aeabi_dadd+0x88>
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	0758      	lsls	r0, r3, #29
 8000baa:	08c9      	lsrs	r1, r1, #3
 8000bac:	4301      	orrs	r1, r0
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	e787      	b.n	8000ac2 <__aeabi_dadd+0x24a>
 8000bb2:	4649      	mov	r1, r9
 8000bb4:	075a      	lsls	r2, r3, #29
 8000bb6:	08c9      	lsrs	r1, r1, #3
 8000bb8:	4311      	orrs	r1, r2
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	e7a6      	b.n	8000b0c <__aeabi_dadd+0x294>
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <__aeabi_dadd+0x37c>)
 8000bc0:	1c70      	adds	r0, r6, #1
 8000bc2:	4208      	tst	r0, r1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_dadd+0x350>
 8000bc6:	e0bb      	b.n	8000d40 <__aeabi_dadd+0x4c8>
 8000bc8:	2e00      	cmp	r6, #0
 8000bca:	d000      	beq.n	8000bce <__aeabi_dadd+0x356>
 8000bcc:	e114      	b.n	8000df8 <__aeabi_dadd+0x580>
 8000bce:	4649      	mov	r1, r9
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x35e>
 8000bd4:	e175      	b.n	8000ec2 <__aeabi_dadd+0x64a>
 8000bd6:	0029      	movs	r1, r5
 8000bd8:	4339      	orrs	r1, r7
 8000bda:	d000      	beq.n	8000bde <__aeabi_dadd+0x366>
 8000bdc:	e17e      	b.n	8000edc <__aeabi_dadd+0x664>
 8000bde:	4649      	mov	r1, r9
 8000be0:	0758      	lsls	r0, r3, #29
 8000be2:	08c9      	lsrs	r1, r1, #3
 8000be4:	4301      	orrs	r1, r0
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	e76e      	b.n	8000ac8 <__aeabi_dadd+0x250>
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	000007ff 	.word	0x000007ff
 8000bf0:	ff7fffff 	.word	0xff7fffff
 8000bf4:	000007fe 	.word	0x000007fe
 8000bf8:	4649      	mov	r1, r9
 8000bfa:	1bcd      	subs	r5, r1, r7
 8000bfc:	4661      	mov	r1, ip
 8000bfe:	1a58      	subs	r0, r3, r1
 8000c00:	45a9      	cmp	r9, r5
 8000c02:	4189      	sbcs	r1, r1
 8000c04:	4249      	negs	r1, r1
 8000c06:	4688      	mov	r8, r1
 8000c08:	0001      	movs	r1, r0
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	4688      	mov	r8, r1
 8000c10:	0209      	lsls	r1, r1, #8
 8000c12:	d500      	bpl.n	8000c16 <__aeabi_dadd+0x39e>
 8000c14:	e0a6      	b.n	8000d64 <__aeabi_dadd+0x4ec>
 8000c16:	4641      	mov	r1, r8
 8000c18:	4329      	orrs	r1, r5
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_dadd+0x3a6>
 8000c1c:	e67f      	b.n	800091e <__aeabi_dadd+0xa6>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2400      	movs	r4, #0
 8000c22:	e751      	b.n	8000ac8 <__aeabi_dadd+0x250>
 8000c24:	4cc7      	ldr	r4, [pc, #796]	; (8000f44 <__aeabi_dadd+0x6cc>)
 8000c26:	42a1      	cmp	r1, r4
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x3b4>
 8000c2a:	e0c7      	b.n	8000dbc <__aeabi_dadd+0x544>
 8000c2c:	2480      	movs	r4, #128	; 0x80
 8000c2e:	0424      	lsls	r4, r4, #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	2a38      	cmp	r2, #56	; 0x38
 8000c34:	dc54      	bgt.n	8000ce0 <__aeabi_dadd+0x468>
 8000c36:	2a1f      	cmp	r2, #31
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_dadd+0x3c4>
 8000c3a:	e0cc      	b.n	8000dd6 <__aeabi_dadd+0x55e>
 8000c3c:	2420      	movs	r4, #32
 8000c3e:	4648      	mov	r0, r9
 8000c40:	1aa4      	subs	r4, r4, r2
 8000c42:	001d      	movs	r5, r3
 8000c44:	464e      	mov	r6, r9
 8000c46:	40a0      	lsls	r0, r4
 8000c48:	40d6      	lsrs	r6, r2
 8000c4a:	40a5      	lsls	r5, r4
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	40d3      	lsrs	r3, r2
 8000c50:	4662      	mov	r2, ip
 8000c52:	4335      	orrs	r5, r6
 8000c54:	1e66      	subs	r6, r4, #1
 8000c56:	41b4      	sbcs	r4, r6
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	469c      	mov	ip, r3
 8000c5c:	4325      	orrs	r5, r4
 8000c5e:	e044      	b.n	8000cea <__aeabi_dadd+0x472>
 8000c60:	4662      	mov	r2, ip
 8000c62:	433a      	orrs	r2, r7
 8000c64:	0015      	movs	r5, r2
 8000c66:	1e6f      	subs	r7, r5, #1
 8000c68:	41bd      	sbcs	r5, r7
 8000c6a:	444d      	add	r5, r9
 8000c6c:	454d      	cmp	r5, r9
 8000c6e:	4189      	sbcs	r1, r1
 8000c70:	4249      	negs	r1, r1
 8000c72:	4688      	mov	r8, r1
 8000c74:	4498      	add	r8, r3
 8000c76:	4643      	mov	r3, r8
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	d400      	bmi.n	8000c7e <__aeabi_dadd+0x406>
 8000c7c:	e718      	b.n	8000ab0 <__aeabi_dadd+0x238>
 8000c7e:	4bb1      	ldr	r3, [pc, #708]	; (8000f44 <__aeabi_dadd+0x6cc>)
 8000c80:	3601      	adds	r6, #1
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d049      	beq.n	8000d1a <__aeabi_dadd+0x4a2>
 8000c86:	4642      	mov	r2, r8
 8000c88:	4baf      	ldr	r3, [pc, #700]	; (8000f48 <__aeabi_dadd+0x6d0>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	086a      	lsrs	r2, r5, #1
 8000c92:	400d      	ands	r5, r1
 8000c94:	4315      	orrs	r5, r2
 8000c96:	07d9      	lsls	r1, r3, #31
 8000c98:	085b      	lsrs	r3, r3, #1
 8000c9a:	4698      	mov	r8, r3
 8000c9c:	430d      	orrs	r5, r1
 8000c9e:	e665      	b.n	800096c <__aeabi_dadd+0xf4>
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	3e1f      	subs	r6, #31
 8000ca4:	40f0      	lsrs	r0, r6
 8000ca6:	2a20      	cmp	r2, #32
 8000ca8:	d003      	beq.n	8000cb2 <__aeabi_dadd+0x43a>
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	431d      	orrs	r5, r3
 8000cb2:	1e69      	subs	r1, r5, #1
 8000cb4:	418d      	sbcs	r5, r1
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2600      	movs	r6, #0
 8000cba:	4698      	mov	r8, r3
 8000cbc:	4305      	orrs	r5, r0
 8000cbe:	e6f7      	b.n	8000ab0 <__aeabi_dadd+0x238>
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	4665      	mov	r5, ip
 8000cc4:	3920      	subs	r1, #32
 8000cc6:	40cd      	lsrs	r5, r1
 8000cc8:	2a20      	cmp	r2, #32
 8000cca:	d004      	beq.n	8000cd6 <__aeabi_dadd+0x45e>
 8000ccc:	2040      	movs	r0, #64	; 0x40
 8000cce:	4661      	mov	r1, ip
 8000cd0:	1a82      	subs	r2, r0, r2
 8000cd2:	4091      	lsls	r1, r2
 8000cd4:	430f      	orrs	r7, r1
 8000cd6:	0039      	movs	r1, r7
 8000cd8:	1e4f      	subs	r7, r1, #1
 8000cda:	41b9      	sbcs	r1, r7
 8000cdc:	4329      	orrs	r1, r5
 8000cde:	e60f      	b.n	8000900 <__aeabi_dadd+0x88>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	001d      	movs	r5, r3
 8000ce6:	1e6b      	subs	r3, r5, #1
 8000ce8:	419d      	sbcs	r5, r3
 8000cea:	1b7d      	subs	r5, r7, r5
 8000cec:	42af      	cmp	r7, r5
 8000cee:	419b      	sbcs	r3, r3
 8000cf0:	4662      	mov	r2, ip
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	4654      	mov	r4, sl
 8000cfa:	000e      	movs	r6, r1
 8000cfc:	e607      	b.n	800090e <__aeabi_dadd+0x96>
 8000cfe:	4648      	mov	r0, r9
 8000d00:	4318      	orrs	r0, r3
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dadd+0x48e>
 8000d04:	e0b3      	b.n	8000e6e <__aeabi_dadd+0x5f6>
 8000d06:	1e50      	subs	r0, r2, #1
 8000d08:	2a01      	cmp	r2, #1
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x496>
 8000d0c:	e10d      	b.n	8000f2a <__aeabi_dadd+0x6b2>
 8000d0e:	4d8d      	ldr	r5, [pc, #564]	; (8000f44 <__aeabi_dadd+0x6cc>)
 8000d10:	42aa      	cmp	r2, r5
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x49e>
 8000d14:	e0a5      	b.n	8000e62 <__aeabi_dadd+0x5ea>
 8000d16:	0002      	movs	r2, r0
 8000d18:	e710      	b.n	8000b3c <__aeabi_dadd+0x2c4>
 8000d1a:	0032      	movs	r2, r6
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	e644      	b.n	80009ac <__aeabi_dadd+0x134>
 8000d22:	2120      	movs	r1, #32
 8000d24:	0038      	movs	r0, r7
 8000d26:	1a89      	subs	r1, r1, r2
 8000d28:	4665      	mov	r5, ip
 8000d2a:	408f      	lsls	r7, r1
 8000d2c:	408d      	lsls	r5, r1
 8000d2e:	40d0      	lsrs	r0, r2
 8000d30:	1e79      	subs	r1, r7, #1
 8000d32:	418f      	sbcs	r7, r1
 8000d34:	4305      	orrs	r5, r0
 8000d36:	433d      	orrs	r5, r7
 8000d38:	4667      	mov	r7, ip
 8000d3a:	40d7      	lsrs	r7, r2
 8000d3c:	19db      	adds	r3, r3, r7
 8000d3e:	e794      	b.n	8000c6a <__aeabi_dadd+0x3f2>
 8000d40:	4a80      	ldr	r2, [pc, #512]	; (8000f44 <__aeabi_dadd+0x6cc>)
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x4d0>
 8000d46:	e0ec      	b.n	8000f22 <__aeabi_dadd+0x6aa>
 8000d48:	0039      	movs	r1, r7
 8000d4a:	4449      	add	r1, r9
 8000d4c:	4549      	cmp	r1, r9
 8000d4e:	4192      	sbcs	r2, r2
 8000d50:	4463      	add	r3, ip
 8000d52:	4252      	negs	r2, r2
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	07dd      	lsls	r5, r3, #31
 8000d58:	0849      	lsrs	r1, r1, #1
 8000d5a:	085b      	lsrs	r3, r3, #1
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	0006      	movs	r6, r0
 8000d60:	430d      	orrs	r5, r1
 8000d62:	e6a5      	b.n	8000ab0 <__aeabi_dadd+0x238>
 8000d64:	464a      	mov	r2, r9
 8000d66:	1abd      	subs	r5, r7, r2
 8000d68:	42af      	cmp	r7, r5
 8000d6a:	4189      	sbcs	r1, r1
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	4249      	negs	r1, r1
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	1a5b      	subs	r3, r3, r1
 8000d74:	4698      	mov	r8, r3
 8000d76:	4654      	mov	r4, sl
 8000d78:	e5d1      	b.n	800091e <__aeabi_dadd+0xa6>
 8000d7a:	076c      	lsls	r4, r5, #29
 8000d7c:	08f9      	lsrs	r1, r7, #3
 8000d7e:	4321      	orrs	r1, r4
 8000d80:	08eb      	lsrs	r3, r5, #3
 8000d82:	0004      	movs	r4, r0
 8000d84:	e69d      	b.n	8000ac2 <__aeabi_dadd+0x24a>
 8000d86:	464a      	mov	r2, r9
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	d175      	bne.n	8000e78 <__aeabi_dadd+0x600>
 8000d8c:	4661      	mov	r1, ip
 8000d8e:	4339      	orrs	r1, r7
 8000d90:	d114      	bne.n	8000dbc <__aeabi_dadd+0x544>
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	2400      	movs	r4, #0
 8000d96:	031b      	lsls	r3, r3, #12
 8000d98:	e6bc      	b.n	8000b14 <__aeabi_dadd+0x29c>
 8000d9a:	464a      	mov	r2, r9
 8000d9c:	1bd5      	subs	r5, r2, r7
 8000d9e:	45a9      	cmp	r9, r5
 8000da0:	4189      	sbcs	r1, r1
 8000da2:	4662      	mov	r2, ip
 8000da4:	4249      	negs	r1, r1
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	4698      	mov	r8, r3
 8000dac:	2601      	movs	r6, #1
 8000dae:	e5ae      	b.n	800090e <__aeabi_dadd+0x96>
 8000db0:	464a      	mov	r2, r9
 8000db2:	08d1      	lsrs	r1, r2, #3
 8000db4:	075a      	lsls	r2, r3, #29
 8000db6:	4311      	orrs	r1, r2
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	e6a7      	b.n	8000b0c <__aeabi_dadd+0x294>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	08f9      	lsrs	r1, r7, #3
 8000dc0:	075a      	lsls	r2, r3, #29
 8000dc2:	4654      	mov	r4, sl
 8000dc4:	4311      	orrs	r1, r2
 8000dc6:	08db      	lsrs	r3, r3, #3
 8000dc8:	e6a0      	b.n	8000b0c <__aeabi_dadd+0x294>
 8000dca:	464a      	mov	r2, r9
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	001d      	movs	r5, r3
 8000dd0:	1e6b      	subs	r3, r5, #1
 8000dd2:	419d      	sbcs	r5, r3
 8000dd4:	e6c7      	b.n	8000b66 <__aeabi_dadd+0x2ee>
 8000dd6:	0014      	movs	r4, r2
 8000dd8:	001e      	movs	r6, r3
 8000dda:	3c20      	subs	r4, #32
 8000ddc:	40e6      	lsrs	r6, r4
 8000dde:	2a20      	cmp	r2, #32
 8000de0:	d005      	beq.n	8000dee <__aeabi_dadd+0x576>
 8000de2:	2440      	movs	r4, #64	; 0x40
 8000de4:	1aa2      	subs	r2, r4, r2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	464a      	mov	r2, r9
 8000dea:	431a      	orrs	r2, r3
 8000dec:	4691      	mov	r9, r2
 8000dee:	464d      	mov	r5, r9
 8000df0:	1e6b      	subs	r3, r5, #1
 8000df2:	419d      	sbcs	r5, r3
 8000df4:	4335      	orrs	r5, r6
 8000df6:	e778      	b.n	8000cea <__aeabi_dadd+0x472>
 8000df8:	464a      	mov	r2, r9
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	d000      	beq.n	8000e00 <__aeabi_dadd+0x588>
 8000dfe:	e66b      	b.n	8000ad8 <__aeabi_dadd+0x260>
 8000e00:	076b      	lsls	r3, r5, #29
 8000e02:	08f9      	lsrs	r1, r7, #3
 8000e04:	4319      	orrs	r1, r3
 8000e06:	08eb      	lsrs	r3, r5, #3
 8000e08:	e680      	b.n	8000b0c <__aeabi_dadd+0x294>
 8000e0a:	4661      	mov	r1, ip
 8000e0c:	4339      	orrs	r1, r7
 8000e0e:	d054      	beq.n	8000eba <__aeabi_dadd+0x642>
 8000e10:	4663      	mov	r3, ip
 8000e12:	08f9      	lsrs	r1, r7, #3
 8000e14:	075c      	lsls	r4, r3, #29
 8000e16:	4321      	orrs	r1, r4
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	0004      	movs	r4, r0
 8000e1c:	e654      	b.n	8000ac8 <__aeabi_dadd+0x250>
 8000e1e:	464a      	mov	r2, r9
 8000e20:	1abd      	subs	r5, r7, r2
 8000e22:	42af      	cmp	r7, r5
 8000e24:	4189      	sbcs	r1, r1
 8000e26:	4662      	mov	r2, ip
 8000e28:	4249      	negs	r1, r1
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	1a5b      	subs	r3, r3, r1
 8000e2e:	4698      	mov	r8, r3
 8000e30:	0004      	movs	r4, r0
 8000e32:	2601      	movs	r6, #1
 8000e34:	e56b      	b.n	800090e <__aeabi_dadd+0x96>
 8000e36:	464a      	mov	r2, r9
 8000e38:	1bd5      	subs	r5, r2, r7
 8000e3a:	45a9      	cmp	r9, r5
 8000e3c:	4189      	sbcs	r1, r1
 8000e3e:	4662      	mov	r2, ip
 8000e40:	4249      	negs	r1, r1
 8000e42:	1a9a      	subs	r2, r3, r2
 8000e44:	1a52      	subs	r2, r2, r1
 8000e46:	4690      	mov	r8, r2
 8000e48:	0212      	lsls	r2, r2, #8
 8000e4a:	d532      	bpl.n	8000eb2 <__aeabi_dadd+0x63a>
 8000e4c:	464a      	mov	r2, r9
 8000e4e:	1abd      	subs	r5, r7, r2
 8000e50:	42af      	cmp	r7, r5
 8000e52:	4189      	sbcs	r1, r1
 8000e54:	4662      	mov	r2, ip
 8000e56:	4249      	negs	r1, r1
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	1a5b      	subs	r3, r3, r1
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	0004      	movs	r4, r0
 8000e60:	e584      	b.n	800096c <__aeabi_dadd+0xf4>
 8000e62:	4663      	mov	r3, ip
 8000e64:	08f9      	lsrs	r1, r7, #3
 8000e66:	075a      	lsls	r2, r3, #29
 8000e68:	4311      	orrs	r1, r2
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	e64e      	b.n	8000b0c <__aeabi_dadd+0x294>
 8000e6e:	08f9      	lsrs	r1, r7, #3
 8000e70:	0768      	lsls	r0, r5, #29
 8000e72:	4301      	orrs	r1, r0
 8000e74:	08eb      	lsrs	r3, r5, #3
 8000e76:	e624      	b.n	8000ac2 <__aeabi_dadd+0x24a>
 8000e78:	4662      	mov	r2, ip
 8000e7a:	433a      	orrs	r2, r7
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dadd+0x608>
 8000e7e:	e698      	b.n	8000bb2 <__aeabi_dadd+0x33a>
 8000e80:	464a      	mov	r2, r9
 8000e82:	08d1      	lsrs	r1, r2, #3
 8000e84:	075a      	lsls	r2, r3, #29
 8000e86:	4311      	orrs	r1, r2
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	031b      	lsls	r3, r3, #12
 8000e8e:	421a      	tst	r2, r3
 8000e90:	d008      	beq.n	8000ea4 <__aeabi_dadd+0x62c>
 8000e92:	4660      	mov	r0, ip
 8000e94:	08c5      	lsrs	r5, r0, #3
 8000e96:	421d      	tst	r5, r3
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_dadd+0x62c>
 8000e9a:	4654      	mov	r4, sl
 8000e9c:	002a      	movs	r2, r5
 8000e9e:	08f9      	lsrs	r1, r7, #3
 8000ea0:	0743      	lsls	r3, r0, #29
 8000ea2:	4319      	orrs	r1, r3
 8000ea4:	0f4b      	lsrs	r3, r1, #29
 8000ea6:	00c9      	lsls	r1, r1, #3
 8000ea8:	075b      	lsls	r3, r3, #29
 8000eaa:	08c9      	lsrs	r1, r1, #3
 8000eac:	4319      	orrs	r1, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	e62c      	b.n	8000b0c <__aeabi_dadd+0x294>
 8000eb2:	4641      	mov	r1, r8
 8000eb4:	4329      	orrs	r1, r5
 8000eb6:	d000      	beq.n	8000eba <__aeabi_dadd+0x642>
 8000eb8:	e5fa      	b.n	8000ab0 <__aeabi_dadd+0x238>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	e602      	b.n	8000ac8 <__aeabi_dadd+0x250>
 8000ec2:	076b      	lsls	r3, r5, #29
 8000ec4:	08f9      	lsrs	r1, r7, #3
 8000ec6:	4319      	orrs	r1, r3
 8000ec8:	08eb      	lsrs	r3, r5, #3
 8000eca:	e5fd      	b.n	8000ac8 <__aeabi_dadd+0x250>
 8000ecc:	4663      	mov	r3, ip
 8000ece:	08f9      	lsrs	r1, r7, #3
 8000ed0:	075b      	lsls	r3, r3, #29
 8000ed2:	4319      	orrs	r1, r3
 8000ed4:	4663      	mov	r3, ip
 8000ed6:	0004      	movs	r4, r0
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	e617      	b.n	8000b0c <__aeabi_dadd+0x294>
 8000edc:	003d      	movs	r5, r7
 8000ede:	444d      	add	r5, r9
 8000ee0:	4463      	add	r3, ip
 8000ee2:	454d      	cmp	r5, r9
 8000ee4:	4189      	sbcs	r1, r1
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	4249      	negs	r1, r1
 8000eea:	4488      	add	r8, r1
 8000eec:	4643      	mov	r3, r8
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	d400      	bmi.n	8000ef4 <__aeabi_dadd+0x67c>
 8000ef2:	e5dd      	b.n	8000ab0 <__aeabi_dadd+0x238>
 8000ef4:	4642      	mov	r2, r8
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <__aeabi_dadd+0x6d0>)
 8000ef8:	2601      	movs	r6, #1
 8000efa:	401a      	ands	r2, r3
 8000efc:	4690      	mov	r8, r2
 8000efe:	e5d7      	b.n	8000ab0 <__aeabi_dadd+0x238>
 8000f00:	0010      	movs	r0, r2
 8000f02:	001e      	movs	r6, r3
 8000f04:	3820      	subs	r0, #32
 8000f06:	40c6      	lsrs	r6, r0
 8000f08:	2a20      	cmp	r2, #32
 8000f0a:	d005      	beq.n	8000f18 <__aeabi_dadd+0x6a0>
 8000f0c:	2040      	movs	r0, #64	; 0x40
 8000f0e:	1a82      	subs	r2, r0, r2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	464a      	mov	r2, r9
 8000f14:	431a      	orrs	r2, r3
 8000f16:	4691      	mov	r9, r2
 8000f18:	464d      	mov	r5, r9
 8000f1a:	1e6b      	subs	r3, r5, #1
 8000f1c:	419d      	sbcs	r5, r3
 8000f1e:	4335      	orrs	r5, r6
 8000f20:	e621      	b.n	8000b66 <__aeabi_dadd+0x2ee>
 8000f22:	0002      	movs	r2, r0
 8000f24:	2300      	movs	r3, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	e540      	b.n	80009ac <__aeabi_dadd+0x134>
 8000f2a:	464a      	mov	r2, r9
 8000f2c:	19d5      	adds	r5, r2, r7
 8000f2e:	42bd      	cmp	r5, r7
 8000f30:	4189      	sbcs	r1, r1
 8000f32:	4463      	add	r3, ip
 8000f34:	4698      	mov	r8, r3
 8000f36:	4249      	negs	r1, r1
 8000f38:	4488      	add	r8, r1
 8000f3a:	e5b3      	b.n	8000aa4 <__aeabi_dadd+0x22c>
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4a01      	ldr	r2, [pc, #4]	; (8000f44 <__aeabi_dadd+0x6cc>)
 8000f40:	000b      	movs	r3, r1
 8000f42:	e533      	b.n	80009ac <__aeabi_dadd+0x134>
 8000f44:	000007ff 	.word	0x000007ff
 8000f48:	ff7fffff 	.word	0xff7fffff

08000f4c <__aeabi_ddiv>:
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	4657      	mov	r7, sl
 8000f50:	464e      	mov	r6, r9
 8000f52:	4645      	mov	r5, r8
 8000f54:	46de      	mov	lr, fp
 8000f56:	b5e0      	push	{r5, r6, r7, lr}
 8000f58:	4681      	mov	r9, r0
 8000f5a:	0005      	movs	r5, r0
 8000f5c:	030c      	lsls	r4, r1, #12
 8000f5e:	0048      	lsls	r0, r1, #1
 8000f60:	4692      	mov	sl, r2
 8000f62:	001f      	movs	r7, r3
 8000f64:	b085      	sub	sp, #20
 8000f66:	0b24      	lsrs	r4, r4, #12
 8000f68:	0d40      	lsrs	r0, r0, #21
 8000f6a:	0fce      	lsrs	r6, r1, #31
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d059      	beq.n	8001024 <__aeabi_ddiv+0xd8>
 8000f70:	4b87      	ldr	r3, [pc, #540]	; (8001190 <__aeabi_ddiv+0x244>)
 8000f72:	4298      	cmp	r0, r3
 8000f74:	d100      	bne.n	8000f78 <__aeabi_ddiv+0x2c>
 8000f76:	e098      	b.n	80010aa <__aeabi_ddiv+0x15e>
 8000f78:	0f6b      	lsrs	r3, r5, #29
 8000f7a:	00e4      	lsls	r4, r4, #3
 8000f7c:	431c      	orrs	r4, r3
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	4323      	orrs	r3, r4
 8000f84:	4698      	mov	r8, r3
 8000f86:	4b83      	ldr	r3, [pc, #524]	; (8001194 <__aeabi_ddiv+0x248>)
 8000f88:	00ed      	lsls	r5, r5, #3
 8000f8a:	469b      	mov	fp, r3
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	4699      	mov	r9, r3
 8000f90:	4483      	add	fp, r0
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	033c      	lsls	r4, r7, #12
 8000f96:	007b      	lsls	r3, r7, #1
 8000f98:	4650      	mov	r0, sl
 8000f9a:	0b24      	lsrs	r4, r4, #12
 8000f9c:	0d5b      	lsrs	r3, r3, #21
 8000f9e:	0fff      	lsrs	r7, r7, #31
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d067      	beq.n	8001074 <__aeabi_ddiv+0x128>
 8000fa4:	4a7a      	ldr	r2, [pc, #488]	; (8001190 <__aeabi_ddiv+0x244>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d018      	beq.n	8000fdc <__aeabi_ddiv+0x90>
 8000faa:	497a      	ldr	r1, [pc, #488]	; (8001194 <__aeabi_ddiv+0x248>)
 8000fac:	0f42      	lsrs	r2, r0, #29
 8000fae:	468c      	mov	ip, r1
 8000fb0:	00e4      	lsls	r4, r4, #3
 8000fb2:	4659      	mov	r1, fp
 8000fb4:	4314      	orrs	r4, r2
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	4463      	add	r3, ip
 8000fba:	0412      	lsls	r2, r2, #16
 8000fbc:	1acb      	subs	r3, r1, r3
 8000fbe:	4314      	orrs	r4, r2
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	00c2      	lsls	r2, r0, #3
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	0033      	movs	r3, r6
 8000fc8:	407b      	eors	r3, r7
 8000fca:	469a      	mov	sl, r3
 8000fcc:	464b      	mov	r3, r9
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x88>
 8000fd2:	e0ef      	b.n	80011b4 <__aeabi_ddiv+0x268>
 8000fd4:	4970      	ldr	r1, [pc, #448]	; (8001198 <__aeabi_ddiv+0x24c>)
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	58cb      	ldr	r3, [r1, r3]
 8000fda:	469f      	mov	pc, r3
 8000fdc:	4b6f      	ldr	r3, [pc, #444]	; (800119c <__aeabi_ddiv+0x250>)
 8000fde:	4652      	mov	r2, sl
 8000fe0:	469c      	mov	ip, r3
 8000fe2:	4322      	orrs	r2, r4
 8000fe4:	44e3      	add	fp, ip
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	d000      	beq.n	8000fec <__aeabi_ddiv+0xa0>
 8000fea:	e095      	b.n	8001118 <__aeabi_ddiv+0x1cc>
 8000fec:	4649      	mov	r1, r9
 8000fee:	2302      	movs	r3, #2
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	4689      	mov	r9, r1
 8000ff4:	2400      	movs	r4, #0
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	e7e5      	b.n	8000fc6 <__aeabi_ddiv+0x7a>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	2500      	movs	r5, #0
 8001000:	4652      	mov	r2, sl
 8001002:	051b      	lsls	r3, r3, #20
 8001004:	4323      	orrs	r3, r4
 8001006:	07d2      	lsls	r2, r2, #31
 8001008:	4313      	orrs	r3, r2
 800100a:	0028      	movs	r0, r5
 800100c:	0019      	movs	r1, r3
 800100e:	b005      	add	sp, #20
 8001010:	bcf0      	pop	{r4, r5, r6, r7}
 8001012:	46bb      	mov	fp, r7
 8001014:	46b2      	mov	sl, r6
 8001016:	46a9      	mov	r9, r5
 8001018:	46a0      	mov	r8, r4
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101c:	2400      	movs	r4, #0
 800101e:	2500      	movs	r5, #0
 8001020:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <__aeabi_ddiv+0x244>)
 8001022:	e7ed      	b.n	8001000 <__aeabi_ddiv+0xb4>
 8001024:	464b      	mov	r3, r9
 8001026:	4323      	orrs	r3, r4
 8001028:	4698      	mov	r8, r3
 800102a:	d100      	bne.n	800102e <__aeabi_ddiv+0xe2>
 800102c:	e089      	b.n	8001142 <__aeabi_ddiv+0x1f6>
 800102e:	2c00      	cmp	r4, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0xe8>
 8001032:	e1e0      	b.n	80013f6 <__aeabi_ddiv+0x4aa>
 8001034:	0020      	movs	r0, r4
 8001036:	f001 fa01 	bl	800243c <__clzsi2>
 800103a:	0001      	movs	r1, r0
 800103c:	0002      	movs	r2, r0
 800103e:	390b      	subs	r1, #11
 8001040:	231d      	movs	r3, #29
 8001042:	1a5b      	subs	r3, r3, r1
 8001044:	4649      	mov	r1, r9
 8001046:	0010      	movs	r0, r2
 8001048:	40d9      	lsrs	r1, r3
 800104a:	3808      	subs	r0, #8
 800104c:	4084      	lsls	r4, r0
 800104e:	000b      	movs	r3, r1
 8001050:	464d      	mov	r5, r9
 8001052:	4323      	orrs	r3, r4
 8001054:	4698      	mov	r8, r3
 8001056:	4085      	lsls	r5, r0
 8001058:	4851      	ldr	r0, [pc, #324]	; (80011a0 <__aeabi_ddiv+0x254>)
 800105a:	033c      	lsls	r4, r7, #12
 800105c:	1a83      	subs	r3, r0, r2
 800105e:	469b      	mov	fp, r3
 8001060:	2300      	movs	r3, #0
 8001062:	4699      	mov	r9, r3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	007b      	lsls	r3, r7, #1
 8001068:	4650      	mov	r0, sl
 800106a:	0b24      	lsrs	r4, r4, #12
 800106c:	0d5b      	lsrs	r3, r3, #21
 800106e:	0fff      	lsrs	r7, r7, #31
 8001070:	2b00      	cmp	r3, #0
 8001072:	d197      	bne.n	8000fa4 <__aeabi_ddiv+0x58>
 8001074:	4652      	mov	r2, sl
 8001076:	4322      	orrs	r2, r4
 8001078:	d055      	beq.n	8001126 <__aeabi_ddiv+0x1da>
 800107a:	2c00      	cmp	r4, #0
 800107c:	d100      	bne.n	8001080 <__aeabi_ddiv+0x134>
 800107e:	e1ca      	b.n	8001416 <__aeabi_ddiv+0x4ca>
 8001080:	0020      	movs	r0, r4
 8001082:	f001 f9db 	bl	800243c <__clzsi2>
 8001086:	0002      	movs	r2, r0
 8001088:	3a0b      	subs	r2, #11
 800108a:	231d      	movs	r3, #29
 800108c:	0001      	movs	r1, r0
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	4652      	mov	r2, sl
 8001092:	3908      	subs	r1, #8
 8001094:	40da      	lsrs	r2, r3
 8001096:	408c      	lsls	r4, r1
 8001098:	4314      	orrs	r4, r2
 800109a:	4652      	mov	r2, sl
 800109c:	408a      	lsls	r2, r1
 800109e:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <__aeabi_ddiv+0x258>)
 80010a0:	4458      	add	r0, fp
 80010a2:	469b      	mov	fp, r3
 80010a4:	4483      	add	fp, r0
 80010a6:	2000      	movs	r0, #0
 80010a8:	e78d      	b.n	8000fc6 <__aeabi_ddiv+0x7a>
 80010aa:	464b      	mov	r3, r9
 80010ac:	4323      	orrs	r3, r4
 80010ae:	4698      	mov	r8, r3
 80010b0:	d140      	bne.n	8001134 <__aeabi_ddiv+0x1e8>
 80010b2:	2308      	movs	r3, #8
 80010b4:	4699      	mov	r9, r3
 80010b6:	3b06      	subs	r3, #6
 80010b8:	2500      	movs	r5, #0
 80010ba:	4683      	mov	fp, r0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	e769      	b.n	8000f94 <__aeabi_ddiv+0x48>
 80010c0:	46b2      	mov	sl, r6
 80010c2:	9b00      	ldr	r3, [sp, #0]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d0a9      	beq.n	800101c <__aeabi_ddiv+0xd0>
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x182>
 80010cc:	e211      	b.n	80014f2 <__aeabi_ddiv+0x5a6>
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d093      	beq.n	8000ffa <__aeabi_ddiv+0xae>
 80010d2:	4a35      	ldr	r2, [pc, #212]	; (80011a8 <__aeabi_ddiv+0x25c>)
 80010d4:	445a      	add	r2, fp
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	dc00      	bgt.n	80010dc <__aeabi_ddiv+0x190>
 80010da:	e13c      	b.n	8001356 <__aeabi_ddiv+0x40a>
 80010dc:	076b      	lsls	r3, r5, #29
 80010de:	d000      	beq.n	80010e2 <__aeabi_ddiv+0x196>
 80010e0:	e1a7      	b.n	8001432 <__aeabi_ddiv+0x4e6>
 80010e2:	08ed      	lsrs	r5, r5, #3
 80010e4:	4643      	mov	r3, r8
 80010e6:	01db      	lsls	r3, r3, #7
 80010e8:	d506      	bpl.n	80010f8 <__aeabi_ddiv+0x1ac>
 80010ea:	4642      	mov	r2, r8
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <__aeabi_ddiv+0x260>)
 80010ee:	401a      	ands	r2, r3
 80010f0:	4690      	mov	r8, r2
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	445a      	add	r2, fp
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <__aeabi_ddiv+0x264>)
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dc8e      	bgt.n	800101c <__aeabi_ddiv+0xd0>
 80010fe:	4643      	mov	r3, r8
 8001100:	0552      	lsls	r2, r2, #21
 8001102:	0758      	lsls	r0, r3, #29
 8001104:	025c      	lsls	r4, r3, #9
 8001106:	4305      	orrs	r5, r0
 8001108:	0b24      	lsrs	r4, r4, #12
 800110a:	0d53      	lsrs	r3, r2, #21
 800110c:	e778      	b.n	8001000 <__aeabi_ddiv+0xb4>
 800110e:	46ba      	mov	sl, r7
 8001110:	46a0      	mov	r8, r4
 8001112:	0015      	movs	r5, r2
 8001114:	9000      	str	r0, [sp, #0]
 8001116:	e7d4      	b.n	80010c2 <__aeabi_ddiv+0x176>
 8001118:	464a      	mov	r2, r9
 800111a:	2303      	movs	r3, #3
 800111c:	431a      	orrs	r2, r3
 800111e:	4691      	mov	r9, r2
 8001120:	2003      	movs	r0, #3
 8001122:	4652      	mov	r2, sl
 8001124:	e74f      	b.n	8000fc6 <__aeabi_ddiv+0x7a>
 8001126:	4649      	mov	r1, r9
 8001128:	2301      	movs	r3, #1
 800112a:	4319      	orrs	r1, r3
 800112c:	4689      	mov	r9, r1
 800112e:	2400      	movs	r4, #0
 8001130:	2001      	movs	r0, #1
 8001132:	e748      	b.n	8000fc6 <__aeabi_ddiv+0x7a>
 8001134:	230c      	movs	r3, #12
 8001136:	4699      	mov	r9, r3
 8001138:	3b09      	subs	r3, #9
 800113a:	46a0      	mov	r8, r4
 800113c:	4683      	mov	fp, r0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	e728      	b.n	8000f94 <__aeabi_ddiv+0x48>
 8001142:	2304      	movs	r3, #4
 8001144:	4699      	mov	r9, r3
 8001146:	2300      	movs	r3, #0
 8001148:	469b      	mov	fp, r3
 800114a:	3301      	adds	r3, #1
 800114c:	2500      	movs	r5, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	e720      	b.n	8000f94 <__aeabi_ddiv+0x48>
 8001152:	2300      	movs	r3, #0
 8001154:	2480      	movs	r4, #128	; 0x80
 8001156:	469a      	mov	sl, r3
 8001158:	2500      	movs	r5, #0
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <__aeabi_ddiv+0x244>)
 800115c:	0324      	lsls	r4, r4, #12
 800115e:	e74f      	b.n	8001000 <__aeabi_ddiv+0xb4>
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	4641      	mov	r1, r8
 8001164:	031b      	lsls	r3, r3, #12
 8001166:	4219      	tst	r1, r3
 8001168:	d008      	beq.n	800117c <__aeabi_ddiv+0x230>
 800116a:	421c      	tst	r4, r3
 800116c:	d106      	bne.n	800117c <__aeabi_ddiv+0x230>
 800116e:	431c      	orrs	r4, r3
 8001170:	0324      	lsls	r4, r4, #12
 8001172:	46ba      	mov	sl, r7
 8001174:	0015      	movs	r5, r2
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <__aeabi_ddiv+0x244>)
 8001178:	0b24      	lsrs	r4, r4, #12
 800117a:	e741      	b.n	8001000 <__aeabi_ddiv+0xb4>
 800117c:	2480      	movs	r4, #128	; 0x80
 800117e:	4643      	mov	r3, r8
 8001180:	0324      	lsls	r4, r4, #12
 8001182:	431c      	orrs	r4, r3
 8001184:	0324      	lsls	r4, r4, #12
 8001186:	46b2      	mov	sl, r6
 8001188:	4b01      	ldr	r3, [pc, #4]	; (8001190 <__aeabi_ddiv+0x244>)
 800118a:	0b24      	lsrs	r4, r4, #12
 800118c:	e738      	b.n	8001000 <__aeabi_ddiv+0xb4>
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	000007ff 	.word	0x000007ff
 8001194:	fffffc01 	.word	0xfffffc01
 8001198:	08005ad0 	.word	0x08005ad0
 800119c:	fffff801 	.word	0xfffff801
 80011a0:	fffffc0d 	.word	0xfffffc0d
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	000003ff 	.word	0x000003ff
 80011ac:	feffffff 	.word	0xfeffffff
 80011b0:	000007fe 	.word	0x000007fe
 80011b4:	4544      	cmp	r4, r8
 80011b6:	d200      	bcs.n	80011ba <__aeabi_ddiv+0x26e>
 80011b8:	e116      	b.n	80013e8 <__aeabi_ddiv+0x49c>
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x272>
 80011bc:	e111      	b.n	80013e2 <__aeabi_ddiv+0x496>
 80011be:	2301      	movs	r3, #1
 80011c0:	425b      	negs	r3, r3
 80011c2:	469c      	mov	ip, r3
 80011c4:	002e      	movs	r6, r5
 80011c6:	4640      	mov	r0, r8
 80011c8:	2500      	movs	r5, #0
 80011ca:	44e3      	add	fp, ip
 80011cc:	0223      	lsls	r3, r4, #8
 80011ce:	0e14      	lsrs	r4, r2, #24
 80011d0:	431c      	orrs	r4, r3
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	4699      	mov	r9, r3
 80011d6:	0423      	lsls	r3, r4, #16
 80011d8:	0c1f      	lsrs	r7, r3, #16
 80011da:	0212      	lsls	r2, r2, #8
 80011dc:	4649      	mov	r1, r9
 80011de:	9200      	str	r2, [sp, #0]
 80011e0:	9701      	str	r7, [sp, #4]
 80011e2:	f7ff f817 	bl	8000214 <__aeabi_uidivmod>
 80011e6:	0002      	movs	r2, r0
 80011e8:	437a      	muls	r2, r7
 80011ea:	040b      	lsls	r3, r1, #16
 80011ec:	0c31      	lsrs	r1, r6, #16
 80011ee:	4680      	mov	r8, r0
 80011f0:	4319      	orrs	r1, r3
 80011f2:	428a      	cmp	r2, r1
 80011f4:	d90b      	bls.n	800120e <__aeabi_ddiv+0x2c2>
 80011f6:	2301      	movs	r3, #1
 80011f8:	425b      	negs	r3, r3
 80011fa:	469c      	mov	ip, r3
 80011fc:	1909      	adds	r1, r1, r4
 80011fe:	44e0      	add	r8, ip
 8001200:	428c      	cmp	r4, r1
 8001202:	d804      	bhi.n	800120e <__aeabi_ddiv+0x2c2>
 8001204:	428a      	cmp	r2, r1
 8001206:	d902      	bls.n	800120e <__aeabi_ddiv+0x2c2>
 8001208:	1e83      	subs	r3, r0, #2
 800120a:	4698      	mov	r8, r3
 800120c:	1909      	adds	r1, r1, r4
 800120e:	1a88      	subs	r0, r1, r2
 8001210:	4649      	mov	r1, r9
 8001212:	f7fe ffff 	bl	8000214 <__aeabi_uidivmod>
 8001216:	0409      	lsls	r1, r1, #16
 8001218:	468c      	mov	ip, r1
 800121a:	0431      	lsls	r1, r6, #16
 800121c:	4666      	mov	r6, ip
 800121e:	9a01      	ldr	r2, [sp, #4]
 8001220:	0c09      	lsrs	r1, r1, #16
 8001222:	4342      	muls	r2, r0
 8001224:	0003      	movs	r3, r0
 8001226:	4331      	orrs	r1, r6
 8001228:	428a      	cmp	r2, r1
 800122a:	d904      	bls.n	8001236 <__aeabi_ddiv+0x2ea>
 800122c:	1909      	adds	r1, r1, r4
 800122e:	3b01      	subs	r3, #1
 8001230:	428c      	cmp	r4, r1
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x2ea>
 8001234:	e111      	b.n	800145a <__aeabi_ddiv+0x50e>
 8001236:	1a89      	subs	r1, r1, r2
 8001238:	4642      	mov	r2, r8
 800123a:	9e00      	ldr	r6, [sp, #0]
 800123c:	0412      	lsls	r2, r2, #16
 800123e:	431a      	orrs	r2, r3
 8001240:	0c33      	lsrs	r3, r6, #16
 8001242:	001f      	movs	r7, r3
 8001244:	0c10      	lsrs	r0, r2, #16
 8001246:	4690      	mov	r8, r2
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	0413      	lsls	r3, r2, #16
 800124c:	0432      	lsls	r2, r6, #16
 800124e:	0c16      	lsrs	r6, r2, #16
 8001250:	0032      	movs	r2, r6
 8001252:	0c1b      	lsrs	r3, r3, #16
 8001254:	435a      	muls	r2, r3
 8001256:	9603      	str	r6, [sp, #12]
 8001258:	437b      	muls	r3, r7
 800125a:	4346      	muls	r6, r0
 800125c:	4378      	muls	r0, r7
 800125e:	0c17      	lsrs	r7, r2, #16
 8001260:	46bc      	mov	ip, r7
 8001262:	199b      	adds	r3, r3, r6
 8001264:	4463      	add	r3, ip
 8001266:	429e      	cmp	r6, r3
 8001268:	d903      	bls.n	8001272 <__aeabi_ddiv+0x326>
 800126a:	2680      	movs	r6, #128	; 0x80
 800126c:	0276      	lsls	r6, r6, #9
 800126e:	46b4      	mov	ip, r6
 8001270:	4460      	add	r0, ip
 8001272:	0c1e      	lsrs	r6, r3, #16
 8001274:	1830      	adds	r0, r6, r0
 8001276:	0416      	lsls	r6, r2, #16
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	0c36      	lsrs	r6, r6, #16
 800127c:	199e      	adds	r6, r3, r6
 800127e:	4281      	cmp	r1, r0
 8001280:	d200      	bcs.n	8001284 <__aeabi_ddiv+0x338>
 8001282:	e09c      	b.n	80013be <__aeabi_ddiv+0x472>
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x33c>
 8001286:	e097      	b.n	80013b8 <__aeabi_ddiv+0x46c>
 8001288:	1bae      	subs	r6, r5, r6
 800128a:	1a09      	subs	r1, r1, r0
 800128c:	42b5      	cmp	r5, r6
 800128e:	4180      	sbcs	r0, r0
 8001290:	4240      	negs	r0, r0
 8001292:	1a08      	subs	r0, r1, r0
 8001294:	4284      	cmp	r4, r0
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x34e>
 8001298:	e111      	b.n	80014be <__aeabi_ddiv+0x572>
 800129a:	4649      	mov	r1, r9
 800129c:	f7fe ffba 	bl	8000214 <__aeabi_uidivmod>
 80012a0:	9a01      	ldr	r2, [sp, #4]
 80012a2:	040b      	lsls	r3, r1, #16
 80012a4:	4342      	muls	r2, r0
 80012a6:	0c31      	lsrs	r1, r6, #16
 80012a8:	0005      	movs	r5, r0
 80012aa:	4319      	orrs	r1, r3
 80012ac:	428a      	cmp	r2, r1
 80012ae:	d907      	bls.n	80012c0 <__aeabi_ddiv+0x374>
 80012b0:	1909      	adds	r1, r1, r4
 80012b2:	3d01      	subs	r5, #1
 80012b4:	428c      	cmp	r4, r1
 80012b6:	d803      	bhi.n	80012c0 <__aeabi_ddiv+0x374>
 80012b8:	428a      	cmp	r2, r1
 80012ba:	d901      	bls.n	80012c0 <__aeabi_ddiv+0x374>
 80012bc:	1e85      	subs	r5, r0, #2
 80012be:	1909      	adds	r1, r1, r4
 80012c0:	1a88      	subs	r0, r1, r2
 80012c2:	4649      	mov	r1, r9
 80012c4:	f7fe ffa6 	bl	8000214 <__aeabi_uidivmod>
 80012c8:	0409      	lsls	r1, r1, #16
 80012ca:	468c      	mov	ip, r1
 80012cc:	0431      	lsls	r1, r6, #16
 80012ce:	4666      	mov	r6, ip
 80012d0:	9a01      	ldr	r2, [sp, #4]
 80012d2:	0c09      	lsrs	r1, r1, #16
 80012d4:	4342      	muls	r2, r0
 80012d6:	0003      	movs	r3, r0
 80012d8:	4331      	orrs	r1, r6
 80012da:	428a      	cmp	r2, r1
 80012dc:	d907      	bls.n	80012ee <__aeabi_ddiv+0x3a2>
 80012de:	1909      	adds	r1, r1, r4
 80012e0:	3b01      	subs	r3, #1
 80012e2:	428c      	cmp	r4, r1
 80012e4:	d803      	bhi.n	80012ee <__aeabi_ddiv+0x3a2>
 80012e6:	428a      	cmp	r2, r1
 80012e8:	d901      	bls.n	80012ee <__aeabi_ddiv+0x3a2>
 80012ea:	1e83      	subs	r3, r0, #2
 80012ec:	1909      	adds	r1, r1, r4
 80012ee:	9e03      	ldr	r6, [sp, #12]
 80012f0:	1a89      	subs	r1, r1, r2
 80012f2:	0032      	movs	r2, r6
 80012f4:	042d      	lsls	r5, r5, #16
 80012f6:	431d      	orrs	r5, r3
 80012f8:	9f02      	ldr	r7, [sp, #8]
 80012fa:	042b      	lsls	r3, r5, #16
 80012fc:	0c1b      	lsrs	r3, r3, #16
 80012fe:	435a      	muls	r2, r3
 8001300:	437b      	muls	r3, r7
 8001302:	469c      	mov	ip, r3
 8001304:	0c28      	lsrs	r0, r5, #16
 8001306:	4346      	muls	r6, r0
 8001308:	0c13      	lsrs	r3, r2, #16
 800130a:	44b4      	add	ip, r6
 800130c:	4463      	add	r3, ip
 800130e:	4378      	muls	r0, r7
 8001310:	429e      	cmp	r6, r3
 8001312:	d903      	bls.n	800131c <__aeabi_ddiv+0x3d0>
 8001314:	2680      	movs	r6, #128	; 0x80
 8001316:	0276      	lsls	r6, r6, #9
 8001318:	46b4      	mov	ip, r6
 800131a:	4460      	add	r0, ip
 800131c:	0c1e      	lsrs	r6, r3, #16
 800131e:	0412      	lsls	r2, r2, #16
 8001320:	041b      	lsls	r3, r3, #16
 8001322:	0c12      	lsrs	r2, r2, #16
 8001324:	1830      	adds	r0, r6, r0
 8001326:	189b      	adds	r3, r3, r2
 8001328:	4281      	cmp	r1, r0
 800132a:	d306      	bcc.n	800133a <__aeabi_ddiv+0x3ee>
 800132c:	d002      	beq.n	8001334 <__aeabi_ddiv+0x3e8>
 800132e:	2301      	movs	r3, #1
 8001330:	431d      	orrs	r5, r3
 8001332:	e6ce      	b.n	80010d2 <__aeabi_ddiv+0x186>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d100      	bne.n	800133a <__aeabi_ddiv+0x3ee>
 8001338:	e6cb      	b.n	80010d2 <__aeabi_ddiv+0x186>
 800133a:	1861      	adds	r1, r4, r1
 800133c:	1e6e      	subs	r6, r5, #1
 800133e:	42a1      	cmp	r1, r4
 8001340:	d200      	bcs.n	8001344 <__aeabi_ddiv+0x3f8>
 8001342:	e0a4      	b.n	800148e <__aeabi_ddiv+0x542>
 8001344:	4281      	cmp	r1, r0
 8001346:	d200      	bcs.n	800134a <__aeabi_ddiv+0x3fe>
 8001348:	e0c9      	b.n	80014de <__aeabi_ddiv+0x592>
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x402>
 800134c:	e0d9      	b.n	8001502 <__aeabi_ddiv+0x5b6>
 800134e:	0035      	movs	r5, r6
 8001350:	e7ed      	b.n	800132e <__aeabi_ddiv+0x3e2>
 8001352:	2501      	movs	r5, #1
 8001354:	426d      	negs	r5, r5
 8001356:	2101      	movs	r1, #1
 8001358:	1a89      	subs	r1, r1, r2
 800135a:	2938      	cmp	r1, #56	; 0x38
 800135c:	dd00      	ble.n	8001360 <__aeabi_ddiv+0x414>
 800135e:	e64c      	b.n	8000ffa <__aeabi_ddiv+0xae>
 8001360:	291f      	cmp	r1, #31
 8001362:	dc00      	bgt.n	8001366 <__aeabi_ddiv+0x41a>
 8001364:	e07f      	b.n	8001466 <__aeabi_ddiv+0x51a>
 8001366:	231f      	movs	r3, #31
 8001368:	425b      	negs	r3, r3
 800136a:	1a9a      	subs	r2, r3, r2
 800136c:	4643      	mov	r3, r8
 800136e:	40d3      	lsrs	r3, r2
 8001370:	2920      	cmp	r1, #32
 8001372:	d004      	beq.n	800137e <__aeabi_ddiv+0x432>
 8001374:	4644      	mov	r4, r8
 8001376:	4a65      	ldr	r2, [pc, #404]	; (800150c <__aeabi_ddiv+0x5c0>)
 8001378:	445a      	add	r2, fp
 800137a:	4094      	lsls	r4, r2
 800137c:	4325      	orrs	r5, r4
 800137e:	1e6a      	subs	r2, r5, #1
 8001380:	4195      	sbcs	r5, r2
 8001382:	2207      	movs	r2, #7
 8001384:	432b      	orrs	r3, r5
 8001386:	0015      	movs	r5, r2
 8001388:	2400      	movs	r4, #0
 800138a:	401d      	ands	r5, r3
 800138c:	421a      	tst	r2, r3
 800138e:	d100      	bne.n	8001392 <__aeabi_ddiv+0x446>
 8001390:	e0a1      	b.n	80014d6 <__aeabi_ddiv+0x58a>
 8001392:	220f      	movs	r2, #15
 8001394:	2400      	movs	r4, #0
 8001396:	401a      	ands	r2, r3
 8001398:	2a04      	cmp	r2, #4
 800139a:	d100      	bne.n	800139e <__aeabi_ddiv+0x452>
 800139c:	e098      	b.n	80014d0 <__aeabi_ddiv+0x584>
 800139e:	1d1a      	adds	r2, r3, #4
 80013a0:	429a      	cmp	r2, r3
 80013a2:	419b      	sbcs	r3, r3
 80013a4:	425b      	negs	r3, r3
 80013a6:	18e4      	adds	r4, r4, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	0222      	lsls	r2, r4, #8
 80013ac:	d400      	bmi.n	80013b0 <__aeabi_ddiv+0x464>
 80013ae:	e08f      	b.n	80014d0 <__aeabi_ddiv+0x584>
 80013b0:	2301      	movs	r3, #1
 80013b2:	2400      	movs	r4, #0
 80013b4:	2500      	movs	r5, #0
 80013b6:	e623      	b.n	8001000 <__aeabi_ddiv+0xb4>
 80013b8:	42b5      	cmp	r5, r6
 80013ba:	d300      	bcc.n	80013be <__aeabi_ddiv+0x472>
 80013bc:	e764      	b.n	8001288 <__aeabi_ddiv+0x33c>
 80013be:	4643      	mov	r3, r8
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	9b00      	ldr	r3, [sp, #0]
 80013c4:	469c      	mov	ip, r3
 80013c6:	4465      	add	r5, ip
 80013c8:	001f      	movs	r7, r3
 80013ca:	429d      	cmp	r5, r3
 80013cc:	419b      	sbcs	r3, r3
 80013ce:	425b      	negs	r3, r3
 80013d0:	191b      	adds	r3, r3, r4
 80013d2:	18c9      	adds	r1, r1, r3
 80013d4:	428c      	cmp	r4, r1
 80013d6:	d23a      	bcs.n	800144e <__aeabi_ddiv+0x502>
 80013d8:	4288      	cmp	r0, r1
 80013da:	d863      	bhi.n	80014a4 <__aeabi_ddiv+0x558>
 80013dc:	d060      	beq.n	80014a0 <__aeabi_ddiv+0x554>
 80013de:	4690      	mov	r8, r2
 80013e0:	e752      	b.n	8001288 <__aeabi_ddiv+0x33c>
 80013e2:	42aa      	cmp	r2, r5
 80013e4:	d900      	bls.n	80013e8 <__aeabi_ddiv+0x49c>
 80013e6:	e6ea      	b.n	80011be <__aeabi_ddiv+0x272>
 80013e8:	4643      	mov	r3, r8
 80013ea:	07de      	lsls	r6, r3, #31
 80013ec:	0858      	lsrs	r0, r3, #1
 80013ee:	086b      	lsrs	r3, r5, #1
 80013f0:	431e      	orrs	r6, r3
 80013f2:	07ed      	lsls	r5, r5, #31
 80013f4:	e6ea      	b.n	80011cc <__aeabi_ddiv+0x280>
 80013f6:	4648      	mov	r0, r9
 80013f8:	f001 f820 	bl	800243c <__clzsi2>
 80013fc:	0001      	movs	r1, r0
 80013fe:	0002      	movs	r2, r0
 8001400:	3115      	adds	r1, #21
 8001402:	3220      	adds	r2, #32
 8001404:	291c      	cmp	r1, #28
 8001406:	dc00      	bgt.n	800140a <__aeabi_ddiv+0x4be>
 8001408:	e61a      	b.n	8001040 <__aeabi_ddiv+0xf4>
 800140a:	464b      	mov	r3, r9
 800140c:	3808      	subs	r0, #8
 800140e:	4083      	lsls	r3, r0
 8001410:	2500      	movs	r5, #0
 8001412:	4698      	mov	r8, r3
 8001414:	e620      	b.n	8001058 <__aeabi_ddiv+0x10c>
 8001416:	f001 f811 	bl	800243c <__clzsi2>
 800141a:	0003      	movs	r3, r0
 800141c:	001a      	movs	r2, r3
 800141e:	3215      	adds	r2, #21
 8001420:	3020      	adds	r0, #32
 8001422:	2a1c      	cmp	r2, #28
 8001424:	dc00      	bgt.n	8001428 <__aeabi_ddiv+0x4dc>
 8001426:	e630      	b.n	800108a <__aeabi_ddiv+0x13e>
 8001428:	4654      	mov	r4, sl
 800142a:	3b08      	subs	r3, #8
 800142c:	2200      	movs	r2, #0
 800142e:	409c      	lsls	r4, r3
 8001430:	e635      	b.n	800109e <__aeabi_ddiv+0x152>
 8001432:	230f      	movs	r3, #15
 8001434:	402b      	ands	r3, r5
 8001436:	2b04      	cmp	r3, #4
 8001438:	d100      	bne.n	800143c <__aeabi_ddiv+0x4f0>
 800143a:	e652      	b.n	80010e2 <__aeabi_ddiv+0x196>
 800143c:	2305      	movs	r3, #5
 800143e:	425b      	negs	r3, r3
 8001440:	42ab      	cmp	r3, r5
 8001442:	419b      	sbcs	r3, r3
 8001444:	3504      	adds	r5, #4
 8001446:	425b      	negs	r3, r3
 8001448:	08ed      	lsrs	r5, r5, #3
 800144a:	4498      	add	r8, r3
 800144c:	e64a      	b.n	80010e4 <__aeabi_ddiv+0x198>
 800144e:	428c      	cmp	r4, r1
 8001450:	d1c5      	bne.n	80013de <__aeabi_ddiv+0x492>
 8001452:	42af      	cmp	r7, r5
 8001454:	d9c0      	bls.n	80013d8 <__aeabi_ddiv+0x48c>
 8001456:	4690      	mov	r8, r2
 8001458:	e716      	b.n	8001288 <__aeabi_ddiv+0x33c>
 800145a:	428a      	cmp	r2, r1
 800145c:	d800      	bhi.n	8001460 <__aeabi_ddiv+0x514>
 800145e:	e6ea      	b.n	8001236 <__aeabi_ddiv+0x2ea>
 8001460:	1e83      	subs	r3, r0, #2
 8001462:	1909      	adds	r1, r1, r4
 8001464:	e6e7      	b.n	8001236 <__aeabi_ddiv+0x2ea>
 8001466:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <__aeabi_ddiv+0x5c4>)
 8001468:	0028      	movs	r0, r5
 800146a:	445a      	add	r2, fp
 800146c:	4643      	mov	r3, r8
 800146e:	4095      	lsls	r5, r2
 8001470:	4093      	lsls	r3, r2
 8001472:	40c8      	lsrs	r0, r1
 8001474:	1e6a      	subs	r2, r5, #1
 8001476:	4195      	sbcs	r5, r2
 8001478:	4644      	mov	r4, r8
 800147a:	4303      	orrs	r3, r0
 800147c:	432b      	orrs	r3, r5
 800147e:	40cc      	lsrs	r4, r1
 8001480:	075a      	lsls	r2, r3, #29
 8001482:	d092      	beq.n	80013aa <__aeabi_ddiv+0x45e>
 8001484:	220f      	movs	r2, #15
 8001486:	401a      	ands	r2, r3
 8001488:	2a04      	cmp	r2, #4
 800148a:	d188      	bne.n	800139e <__aeabi_ddiv+0x452>
 800148c:	e78d      	b.n	80013aa <__aeabi_ddiv+0x45e>
 800148e:	0035      	movs	r5, r6
 8001490:	4281      	cmp	r1, r0
 8001492:	d000      	beq.n	8001496 <__aeabi_ddiv+0x54a>
 8001494:	e74b      	b.n	800132e <__aeabi_ddiv+0x3e2>
 8001496:	9a00      	ldr	r2, [sp, #0]
 8001498:	4293      	cmp	r3, r2
 800149a:	d000      	beq.n	800149e <__aeabi_ddiv+0x552>
 800149c:	e747      	b.n	800132e <__aeabi_ddiv+0x3e2>
 800149e:	e618      	b.n	80010d2 <__aeabi_ddiv+0x186>
 80014a0:	42ae      	cmp	r6, r5
 80014a2:	d99c      	bls.n	80013de <__aeabi_ddiv+0x492>
 80014a4:	2302      	movs	r3, #2
 80014a6:	425b      	negs	r3, r3
 80014a8:	469c      	mov	ip, r3
 80014aa:	9b00      	ldr	r3, [sp, #0]
 80014ac:	44e0      	add	r8, ip
 80014ae:	469c      	mov	ip, r3
 80014b0:	4465      	add	r5, ip
 80014b2:	429d      	cmp	r5, r3
 80014b4:	419b      	sbcs	r3, r3
 80014b6:	425b      	negs	r3, r3
 80014b8:	191b      	adds	r3, r3, r4
 80014ba:	18c9      	adds	r1, r1, r3
 80014bc:	e6e4      	b.n	8001288 <__aeabi_ddiv+0x33c>
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <__aeabi_ddiv+0x5c8>)
 80014c0:	445a      	add	r2, fp
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	dc00      	bgt.n	80014c8 <__aeabi_ddiv+0x57c>
 80014c6:	e744      	b.n	8001352 <__aeabi_ddiv+0x406>
 80014c8:	2301      	movs	r3, #1
 80014ca:	2500      	movs	r5, #0
 80014cc:	4498      	add	r8, r3
 80014ce:	e609      	b.n	80010e4 <__aeabi_ddiv+0x198>
 80014d0:	0765      	lsls	r5, r4, #29
 80014d2:	0264      	lsls	r4, r4, #9
 80014d4:	0b24      	lsrs	r4, r4, #12
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	431d      	orrs	r5, r3
 80014da:	2300      	movs	r3, #0
 80014dc:	e590      	b.n	8001000 <__aeabi_ddiv+0xb4>
 80014de:	9e00      	ldr	r6, [sp, #0]
 80014e0:	3d02      	subs	r5, #2
 80014e2:	0072      	lsls	r2, r6, #1
 80014e4:	42b2      	cmp	r2, r6
 80014e6:	41bf      	sbcs	r7, r7
 80014e8:	427f      	negs	r7, r7
 80014ea:	193c      	adds	r4, r7, r4
 80014ec:	1909      	adds	r1, r1, r4
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	e7ce      	b.n	8001490 <__aeabi_ddiv+0x544>
 80014f2:	2480      	movs	r4, #128	; 0x80
 80014f4:	4643      	mov	r3, r8
 80014f6:	0324      	lsls	r4, r4, #12
 80014f8:	431c      	orrs	r4, r3
 80014fa:	0324      	lsls	r4, r4, #12
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <__aeabi_ddiv+0x5cc>)
 80014fe:	0b24      	lsrs	r4, r4, #12
 8001500:	e57e      	b.n	8001000 <__aeabi_ddiv+0xb4>
 8001502:	9a00      	ldr	r2, [sp, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d3ea      	bcc.n	80014de <__aeabi_ddiv+0x592>
 8001508:	0035      	movs	r5, r6
 800150a:	e7c4      	b.n	8001496 <__aeabi_ddiv+0x54a>
 800150c:	0000043e 	.word	0x0000043e
 8001510:	0000041e 	.word	0x0000041e
 8001514:	000003ff 	.word	0x000003ff
 8001518:	000007ff 	.word	0x000007ff

0800151c <__eqdf2>:
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	464f      	mov	r7, r9
 8001520:	4646      	mov	r6, r8
 8001522:	46d6      	mov	lr, sl
 8001524:	4694      	mov	ip, r2
 8001526:	4691      	mov	r9, r2
 8001528:	031a      	lsls	r2, r3, #12
 800152a:	0b12      	lsrs	r2, r2, #12
 800152c:	4d18      	ldr	r5, [pc, #96]	; (8001590 <__eqdf2+0x74>)
 800152e:	b5c0      	push	{r6, r7, lr}
 8001530:	004c      	lsls	r4, r1, #1
 8001532:	030f      	lsls	r7, r1, #12
 8001534:	4692      	mov	sl, r2
 8001536:	005a      	lsls	r2, r3, #1
 8001538:	0006      	movs	r6, r0
 800153a:	4680      	mov	r8, r0
 800153c:	0b3f      	lsrs	r7, r7, #12
 800153e:	2001      	movs	r0, #1
 8001540:	0d64      	lsrs	r4, r4, #21
 8001542:	0fc9      	lsrs	r1, r1, #31
 8001544:	0d52      	lsrs	r2, r2, #21
 8001546:	0fdb      	lsrs	r3, r3, #31
 8001548:	42ac      	cmp	r4, r5
 800154a:	d00a      	beq.n	8001562 <__eqdf2+0x46>
 800154c:	42aa      	cmp	r2, r5
 800154e:	d003      	beq.n	8001558 <__eqdf2+0x3c>
 8001550:	4294      	cmp	r4, r2
 8001552:	d101      	bne.n	8001558 <__eqdf2+0x3c>
 8001554:	4557      	cmp	r7, sl
 8001556:	d00d      	beq.n	8001574 <__eqdf2+0x58>
 8001558:	bce0      	pop	{r5, r6, r7}
 800155a:	46ba      	mov	sl, r7
 800155c:	46b1      	mov	r9, r6
 800155e:	46a8      	mov	r8, r5
 8001560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001562:	003d      	movs	r5, r7
 8001564:	4335      	orrs	r5, r6
 8001566:	d1f7      	bne.n	8001558 <__eqdf2+0x3c>
 8001568:	42a2      	cmp	r2, r4
 800156a:	d1f5      	bne.n	8001558 <__eqdf2+0x3c>
 800156c:	4652      	mov	r2, sl
 800156e:	4665      	mov	r5, ip
 8001570:	432a      	orrs	r2, r5
 8001572:	d1f1      	bne.n	8001558 <__eqdf2+0x3c>
 8001574:	2001      	movs	r0, #1
 8001576:	45c8      	cmp	r8, r9
 8001578:	d1ee      	bne.n	8001558 <__eqdf2+0x3c>
 800157a:	4299      	cmp	r1, r3
 800157c:	d006      	beq.n	800158c <__eqdf2+0x70>
 800157e:	2c00      	cmp	r4, #0
 8001580:	d1ea      	bne.n	8001558 <__eqdf2+0x3c>
 8001582:	433e      	orrs	r6, r7
 8001584:	0030      	movs	r0, r6
 8001586:	1e46      	subs	r6, r0, #1
 8001588:	41b0      	sbcs	r0, r6
 800158a:	e7e5      	b.n	8001558 <__eqdf2+0x3c>
 800158c:	2000      	movs	r0, #0
 800158e:	e7e3      	b.n	8001558 <__eqdf2+0x3c>
 8001590:	000007ff 	.word	0x000007ff

08001594 <__gedf2>:
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001596:	464e      	mov	r6, r9
 8001598:	4645      	mov	r5, r8
 800159a:	4657      	mov	r7, sl
 800159c:	46de      	mov	lr, fp
 800159e:	0004      	movs	r4, r0
 80015a0:	0018      	movs	r0, r3
 80015a2:	b5e0      	push	{r5, r6, r7, lr}
 80015a4:	0016      	movs	r6, r2
 80015a6:	031b      	lsls	r3, r3, #12
 80015a8:	0b1b      	lsrs	r3, r3, #12
 80015aa:	4d32      	ldr	r5, [pc, #200]	; (8001674 <__gedf2+0xe0>)
 80015ac:	030f      	lsls	r7, r1, #12
 80015ae:	004a      	lsls	r2, r1, #1
 80015b0:	4699      	mov	r9, r3
 80015b2:	0043      	lsls	r3, r0, #1
 80015b4:	46a4      	mov	ip, r4
 80015b6:	46b0      	mov	r8, r6
 80015b8:	0b3f      	lsrs	r7, r7, #12
 80015ba:	0d52      	lsrs	r2, r2, #21
 80015bc:	0fc9      	lsrs	r1, r1, #31
 80015be:	0d5b      	lsrs	r3, r3, #21
 80015c0:	0fc0      	lsrs	r0, r0, #31
 80015c2:	42aa      	cmp	r2, r5
 80015c4:	d029      	beq.n	800161a <__gedf2+0x86>
 80015c6:	42ab      	cmp	r3, r5
 80015c8:	d018      	beq.n	80015fc <__gedf2+0x68>
 80015ca:	2a00      	cmp	r2, #0
 80015cc:	d12a      	bne.n	8001624 <__gedf2+0x90>
 80015ce:	433c      	orrs	r4, r7
 80015d0:	46a3      	mov	fp, r4
 80015d2:	4265      	negs	r5, r4
 80015d4:	4165      	adcs	r5, r4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <__gedf2+0x4c>
 80015da:	464c      	mov	r4, r9
 80015dc:	4326      	orrs	r6, r4
 80015de:	d027      	beq.n	8001630 <__gedf2+0x9c>
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	d115      	bne.n	8001610 <__gedf2+0x7c>
 80015e4:	4281      	cmp	r1, r0
 80015e6:	d028      	beq.n	800163a <__gedf2+0xa6>
 80015e8:	2002      	movs	r0, #2
 80015ea:	3901      	subs	r1, #1
 80015ec:	4008      	ands	r0, r1
 80015ee:	3801      	subs	r0, #1
 80015f0:	bcf0      	pop	{r4, r5, r6, r7}
 80015f2:	46bb      	mov	fp, r7
 80015f4:	46b2      	mov	sl, r6
 80015f6:	46a9      	mov	r9, r5
 80015f8:	46a0      	mov	r8, r4
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d12f      	bne.n	8001662 <__gedf2+0xce>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d1ee      	bne.n	80015e4 <__gedf2+0x50>
 8001606:	433c      	orrs	r4, r7
 8001608:	4265      	negs	r5, r4
 800160a:	4165      	adcs	r5, r4
 800160c:	2d00      	cmp	r5, #0
 800160e:	d0e9      	beq.n	80015e4 <__gedf2+0x50>
 8001610:	2800      	cmp	r0, #0
 8001612:	d1ed      	bne.n	80015f0 <__gedf2+0x5c>
 8001614:	2001      	movs	r0, #1
 8001616:	4240      	negs	r0, r0
 8001618:	e7ea      	b.n	80015f0 <__gedf2+0x5c>
 800161a:	003d      	movs	r5, r7
 800161c:	4325      	orrs	r5, r4
 800161e:	d120      	bne.n	8001662 <__gedf2+0xce>
 8001620:	4293      	cmp	r3, r2
 8001622:	d0eb      	beq.n	80015fc <__gedf2+0x68>
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1dd      	bne.n	80015e4 <__gedf2+0x50>
 8001628:	464c      	mov	r4, r9
 800162a:	4326      	orrs	r6, r4
 800162c:	d1da      	bne.n	80015e4 <__gedf2+0x50>
 800162e:	e7db      	b.n	80015e8 <__gedf2+0x54>
 8001630:	465b      	mov	r3, fp
 8001632:	2000      	movs	r0, #0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0db      	beq.n	80015f0 <__gedf2+0x5c>
 8001638:	e7d6      	b.n	80015e8 <__gedf2+0x54>
 800163a:	429a      	cmp	r2, r3
 800163c:	dc0a      	bgt.n	8001654 <__gedf2+0xc0>
 800163e:	dbe7      	blt.n	8001610 <__gedf2+0x7c>
 8001640:	454f      	cmp	r7, r9
 8001642:	d8d1      	bhi.n	80015e8 <__gedf2+0x54>
 8001644:	d010      	beq.n	8001668 <__gedf2+0xd4>
 8001646:	2000      	movs	r0, #0
 8001648:	454f      	cmp	r7, r9
 800164a:	d2d1      	bcs.n	80015f0 <__gedf2+0x5c>
 800164c:	2900      	cmp	r1, #0
 800164e:	d0e1      	beq.n	8001614 <__gedf2+0x80>
 8001650:	0008      	movs	r0, r1
 8001652:	e7cd      	b.n	80015f0 <__gedf2+0x5c>
 8001654:	4243      	negs	r3, r0
 8001656:	4158      	adcs	r0, r3
 8001658:	2302      	movs	r3, #2
 800165a:	4240      	negs	r0, r0
 800165c:	4018      	ands	r0, r3
 800165e:	3801      	subs	r0, #1
 8001660:	e7c6      	b.n	80015f0 <__gedf2+0x5c>
 8001662:	2002      	movs	r0, #2
 8001664:	4240      	negs	r0, r0
 8001666:	e7c3      	b.n	80015f0 <__gedf2+0x5c>
 8001668:	45c4      	cmp	ip, r8
 800166a:	d8bd      	bhi.n	80015e8 <__gedf2+0x54>
 800166c:	2000      	movs	r0, #0
 800166e:	45c4      	cmp	ip, r8
 8001670:	d2be      	bcs.n	80015f0 <__gedf2+0x5c>
 8001672:	e7eb      	b.n	800164c <__gedf2+0xb8>
 8001674:	000007ff 	.word	0x000007ff

08001678 <__ledf2>:
 8001678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167a:	464e      	mov	r6, r9
 800167c:	4645      	mov	r5, r8
 800167e:	4657      	mov	r7, sl
 8001680:	46de      	mov	lr, fp
 8001682:	0004      	movs	r4, r0
 8001684:	0018      	movs	r0, r3
 8001686:	b5e0      	push	{r5, r6, r7, lr}
 8001688:	0016      	movs	r6, r2
 800168a:	031b      	lsls	r3, r3, #12
 800168c:	0b1b      	lsrs	r3, r3, #12
 800168e:	4d31      	ldr	r5, [pc, #196]	; (8001754 <__ledf2+0xdc>)
 8001690:	030f      	lsls	r7, r1, #12
 8001692:	004a      	lsls	r2, r1, #1
 8001694:	4699      	mov	r9, r3
 8001696:	0043      	lsls	r3, r0, #1
 8001698:	46a4      	mov	ip, r4
 800169a:	46b0      	mov	r8, r6
 800169c:	0b3f      	lsrs	r7, r7, #12
 800169e:	0d52      	lsrs	r2, r2, #21
 80016a0:	0fc9      	lsrs	r1, r1, #31
 80016a2:	0d5b      	lsrs	r3, r3, #21
 80016a4:	0fc0      	lsrs	r0, r0, #31
 80016a6:	42aa      	cmp	r2, r5
 80016a8:	d011      	beq.n	80016ce <__ledf2+0x56>
 80016aa:	42ab      	cmp	r3, r5
 80016ac:	d014      	beq.n	80016d8 <__ledf2+0x60>
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d12f      	bne.n	8001712 <__ledf2+0x9a>
 80016b2:	433c      	orrs	r4, r7
 80016b4:	46a3      	mov	fp, r4
 80016b6:	4265      	negs	r5, r4
 80016b8:	4165      	adcs	r5, r4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d114      	bne.n	80016e8 <__ledf2+0x70>
 80016be:	464c      	mov	r4, r9
 80016c0:	4326      	orrs	r6, r4
 80016c2:	d111      	bne.n	80016e8 <__ledf2+0x70>
 80016c4:	465b      	mov	r3, fp
 80016c6:	2000      	movs	r0, #0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d017      	beq.n	80016fc <__ledf2+0x84>
 80016cc:	e010      	b.n	80016f0 <__ledf2+0x78>
 80016ce:	003d      	movs	r5, r7
 80016d0:	4325      	orrs	r5, r4
 80016d2:	d112      	bne.n	80016fa <__ledf2+0x82>
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d11c      	bne.n	8001712 <__ledf2+0x9a>
 80016d8:	464d      	mov	r5, r9
 80016da:	432e      	orrs	r6, r5
 80016dc:	d10d      	bne.n	80016fa <__ledf2+0x82>
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d104      	bne.n	80016ec <__ledf2+0x74>
 80016e2:	433c      	orrs	r4, r7
 80016e4:	4265      	negs	r5, r4
 80016e6:	4165      	adcs	r5, r4
 80016e8:	2d00      	cmp	r5, #0
 80016ea:	d10d      	bne.n	8001708 <__ledf2+0x90>
 80016ec:	4281      	cmp	r1, r0
 80016ee:	d016      	beq.n	800171e <__ledf2+0xa6>
 80016f0:	2002      	movs	r0, #2
 80016f2:	3901      	subs	r1, #1
 80016f4:	4008      	ands	r0, r1
 80016f6:	3801      	subs	r0, #1
 80016f8:	e000      	b.n	80016fc <__ledf2+0x84>
 80016fa:	2002      	movs	r0, #2
 80016fc:	bcf0      	pop	{r4, r5, r6, r7}
 80016fe:	46bb      	mov	fp, r7
 8001700:	46b2      	mov	sl, r6
 8001702:	46a9      	mov	r9, r5
 8001704:	46a0      	mov	r8, r4
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001708:	2800      	cmp	r0, #0
 800170a:	d1f7      	bne.n	80016fc <__ledf2+0x84>
 800170c:	2001      	movs	r0, #1
 800170e:	4240      	negs	r0, r0
 8001710:	e7f4      	b.n	80016fc <__ledf2+0x84>
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ea      	bne.n	80016ec <__ledf2+0x74>
 8001716:	464c      	mov	r4, r9
 8001718:	4326      	orrs	r6, r4
 800171a:	d1e7      	bne.n	80016ec <__ledf2+0x74>
 800171c:	e7e8      	b.n	80016f0 <__ledf2+0x78>
 800171e:	429a      	cmp	r2, r3
 8001720:	dd06      	ble.n	8001730 <__ledf2+0xb8>
 8001722:	4243      	negs	r3, r0
 8001724:	4158      	adcs	r0, r3
 8001726:	2302      	movs	r3, #2
 8001728:	4240      	negs	r0, r0
 800172a:	4018      	ands	r0, r3
 800172c:	3801      	subs	r0, #1
 800172e:	e7e5      	b.n	80016fc <__ledf2+0x84>
 8001730:	429a      	cmp	r2, r3
 8001732:	dbe9      	blt.n	8001708 <__ledf2+0x90>
 8001734:	454f      	cmp	r7, r9
 8001736:	d8db      	bhi.n	80016f0 <__ledf2+0x78>
 8001738:	d006      	beq.n	8001748 <__ledf2+0xd0>
 800173a:	2000      	movs	r0, #0
 800173c:	454f      	cmp	r7, r9
 800173e:	d2dd      	bcs.n	80016fc <__ledf2+0x84>
 8001740:	2900      	cmp	r1, #0
 8001742:	d0e3      	beq.n	800170c <__ledf2+0x94>
 8001744:	0008      	movs	r0, r1
 8001746:	e7d9      	b.n	80016fc <__ledf2+0x84>
 8001748:	45c4      	cmp	ip, r8
 800174a:	d8d1      	bhi.n	80016f0 <__ledf2+0x78>
 800174c:	2000      	movs	r0, #0
 800174e:	45c4      	cmp	ip, r8
 8001750:	d2d4      	bcs.n	80016fc <__ledf2+0x84>
 8001752:	e7f5      	b.n	8001740 <__ledf2+0xc8>
 8001754:	000007ff 	.word	0x000007ff

08001758 <__aeabi_dmul>:
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4657      	mov	r7, sl
 800175c:	464e      	mov	r6, r9
 800175e:	4645      	mov	r5, r8
 8001760:	46de      	mov	lr, fp
 8001762:	b5e0      	push	{r5, r6, r7, lr}
 8001764:	4698      	mov	r8, r3
 8001766:	030c      	lsls	r4, r1, #12
 8001768:	004b      	lsls	r3, r1, #1
 800176a:	0006      	movs	r6, r0
 800176c:	4692      	mov	sl, r2
 800176e:	b087      	sub	sp, #28
 8001770:	0b24      	lsrs	r4, r4, #12
 8001772:	0d5b      	lsrs	r3, r3, #21
 8001774:	0fcf      	lsrs	r7, r1, #31
 8001776:	2b00      	cmp	r3, #0
 8001778:	d06c      	beq.n	8001854 <__aeabi_dmul+0xfc>
 800177a:	4add      	ldr	r2, [pc, #884]	; (8001af0 <__aeabi_dmul+0x398>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0x2a>
 8001780:	e086      	b.n	8001890 <__aeabi_dmul+0x138>
 8001782:	0f42      	lsrs	r2, r0, #29
 8001784:	00e4      	lsls	r4, r4, #3
 8001786:	4314      	orrs	r4, r2
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	4314      	orrs	r4, r2
 800178e:	4ad9      	ldr	r2, [pc, #868]	; (8001af4 <__aeabi_dmul+0x39c>)
 8001790:	00c5      	lsls	r5, r0, #3
 8001792:	4694      	mov	ip, r2
 8001794:	4463      	add	r3, ip
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2300      	movs	r3, #0
 800179a:	4699      	mov	r9, r3
 800179c:	469b      	mov	fp, r3
 800179e:	4643      	mov	r3, r8
 80017a0:	4642      	mov	r2, r8
 80017a2:	031e      	lsls	r6, r3, #12
 80017a4:	0fd2      	lsrs	r2, r2, #31
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4650      	mov	r0, sl
 80017aa:	4690      	mov	r8, r2
 80017ac:	0b36      	lsrs	r6, r6, #12
 80017ae:	0d5b      	lsrs	r3, r3, #21
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dmul+0x5c>
 80017b2:	e078      	b.n	80018a6 <__aeabi_dmul+0x14e>
 80017b4:	4ace      	ldr	r2, [pc, #824]	; (8001af0 <__aeabi_dmul+0x398>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01d      	beq.n	80017f6 <__aeabi_dmul+0x9e>
 80017ba:	49ce      	ldr	r1, [pc, #824]	; (8001af4 <__aeabi_dmul+0x39c>)
 80017bc:	0f42      	lsrs	r2, r0, #29
 80017be:	468c      	mov	ip, r1
 80017c0:	9900      	ldr	r1, [sp, #0]
 80017c2:	4463      	add	r3, ip
 80017c4:	00f6      	lsls	r6, r6, #3
 80017c6:	468c      	mov	ip, r1
 80017c8:	4316      	orrs	r6, r2
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	449c      	add	ip, r3
 80017ce:	0412      	lsls	r2, r2, #16
 80017d0:	4663      	mov	r3, ip
 80017d2:	4316      	orrs	r6, r2
 80017d4:	00c2      	lsls	r2, r0, #3
 80017d6:	2000      	movs	r0, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	9900      	ldr	r1, [sp, #0]
 80017dc:	4643      	mov	r3, r8
 80017de:	3101      	adds	r1, #1
 80017e0:	468c      	mov	ip, r1
 80017e2:	4649      	mov	r1, r9
 80017e4:	407b      	eors	r3, r7
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	290f      	cmp	r1, #15
 80017ea:	d900      	bls.n	80017ee <__aeabi_dmul+0x96>
 80017ec:	e07e      	b.n	80018ec <__aeabi_dmul+0x194>
 80017ee:	4bc2      	ldr	r3, [pc, #776]	; (8001af8 <__aeabi_dmul+0x3a0>)
 80017f0:	0089      	lsls	r1, r1, #2
 80017f2:	5859      	ldr	r1, [r3, r1]
 80017f4:	468f      	mov	pc, r1
 80017f6:	4652      	mov	r2, sl
 80017f8:	9b00      	ldr	r3, [sp, #0]
 80017fa:	4332      	orrs	r2, r6
 80017fc:	d000      	beq.n	8001800 <__aeabi_dmul+0xa8>
 80017fe:	e156      	b.n	8001aae <__aeabi_dmul+0x356>
 8001800:	49bb      	ldr	r1, [pc, #748]	; (8001af0 <__aeabi_dmul+0x398>)
 8001802:	2600      	movs	r6, #0
 8001804:	468c      	mov	ip, r1
 8001806:	4463      	add	r3, ip
 8001808:	4649      	mov	r1, r9
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2302      	movs	r3, #2
 800180e:	4319      	orrs	r1, r3
 8001810:	4689      	mov	r9, r1
 8001812:	2002      	movs	r0, #2
 8001814:	e7e1      	b.n	80017da <__aeabi_dmul+0x82>
 8001816:	4643      	mov	r3, r8
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	0034      	movs	r4, r6
 800181c:	0015      	movs	r5, r2
 800181e:	4683      	mov	fp, r0
 8001820:	465b      	mov	r3, fp
 8001822:	2b02      	cmp	r3, #2
 8001824:	d05e      	beq.n	80018e4 <__aeabi_dmul+0x18c>
 8001826:	2b03      	cmp	r3, #3
 8001828:	d100      	bne.n	800182c <__aeabi_dmul+0xd4>
 800182a:	e1f3      	b.n	8001c14 <__aeabi_dmul+0x4bc>
 800182c:	2b01      	cmp	r3, #1
 800182e:	d000      	beq.n	8001832 <__aeabi_dmul+0xda>
 8001830:	e118      	b.n	8001a64 <__aeabi_dmul+0x30c>
 8001832:	2200      	movs	r2, #0
 8001834:	2400      	movs	r4, #0
 8001836:	2500      	movs	r5, #0
 8001838:	9b01      	ldr	r3, [sp, #4]
 800183a:	0512      	lsls	r2, r2, #20
 800183c:	4322      	orrs	r2, r4
 800183e:	07db      	lsls	r3, r3, #31
 8001840:	431a      	orrs	r2, r3
 8001842:	0028      	movs	r0, r5
 8001844:	0011      	movs	r1, r2
 8001846:	b007      	add	sp, #28
 8001848:	bcf0      	pop	{r4, r5, r6, r7}
 800184a:	46bb      	mov	fp, r7
 800184c:	46b2      	mov	sl, r6
 800184e:	46a9      	mov	r9, r5
 8001850:	46a0      	mov	r8, r4
 8001852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001854:	0025      	movs	r5, r4
 8001856:	4305      	orrs	r5, r0
 8001858:	d100      	bne.n	800185c <__aeabi_dmul+0x104>
 800185a:	e141      	b.n	8001ae0 <__aeabi_dmul+0x388>
 800185c:	2c00      	cmp	r4, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dmul+0x10a>
 8001860:	e1ad      	b.n	8001bbe <__aeabi_dmul+0x466>
 8001862:	0020      	movs	r0, r4
 8001864:	f000 fdea 	bl	800243c <__clzsi2>
 8001868:	0001      	movs	r1, r0
 800186a:	0002      	movs	r2, r0
 800186c:	390b      	subs	r1, #11
 800186e:	231d      	movs	r3, #29
 8001870:	0010      	movs	r0, r2
 8001872:	1a5b      	subs	r3, r3, r1
 8001874:	0031      	movs	r1, r6
 8001876:	0035      	movs	r5, r6
 8001878:	3808      	subs	r0, #8
 800187a:	4084      	lsls	r4, r0
 800187c:	40d9      	lsrs	r1, r3
 800187e:	4085      	lsls	r5, r0
 8001880:	430c      	orrs	r4, r1
 8001882:	489e      	ldr	r0, [pc, #632]	; (8001afc <__aeabi_dmul+0x3a4>)
 8001884:	1a83      	subs	r3, r0, r2
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	4699      	mov	r9, r3
 800188c:	469b      	mov	fp, r3
 800188e:	e786      	b.n	800179e <__aeabi_dmul+0x46>
 8001890:	0005      	movs	r5, r0
 8001892:	4325      	orrs	r5, r4
 8001894:	d000      	beq.n	8001898 <__aeabi_dmul+0x140>
 8001896:	e11c      	b.n	8001ad2 <__aeabi_dmul+0x37a>
 8001898:	2208      	movs	r2, #8
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2302      	movs	r3, #2
 800189e:	2400      	movs	r4, #0
 80018a0:	4691      	mov	r9, r2
 80018a2:	469b      	mov	fp, r3
 80018a4:	e77b      	b.n	800179e <__aeabi_dmul+0x46>
 80018a6:	4652      	mov	r2, sl
 80018a8:	4332      	orrs	r2, r6
 80018aa:	d100      	bne.n	80018ae <__aeabi_dmul+0x156>
 80018ac:	e10a      	b.n	8001ac4 <__aeabi_dmul+0x36c>
 80018ae:	2e00      	cmp	r6, #0
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dmul+0x15c>
 80018b2:	e176      	b.n	8001ba2 <__aeabi_dmul+0x44a>
 80018b4:	0030      	movs	r0, r6
 80018b6:	f000 fdc1 	bl	800243c <__clzsi2>
 80018ba:	0002      	movs	r2, r0
 80018bc:	3a0b      	subs	r2, #11
 80018be:	231d      	movs	r3, #29
 80018c0:	0001      	movs	r1, r0
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	4652      	mov	r2, sl
 80018c6:	3908      	subs	r1, #8
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	408e      	lsls	r6, r1
 80018cc:	4316      	orrs	r6, r2
 80018ce:	4652      	mov	r2, sl
 80018d0:	408a      	lsls	r2, r1
 80018d2:	9b00      	ldr	r3, [sp, #0]
 80018d4:	4989      	ldr	r1, [pc, #548]	; (8001afc <__aeabi_dmul+0x3a4>)
 80018d6:	1a18      	subs	r0, r3, r0
 80018d8:	0003      	movs	r3, r0
 80018da:	468c      	mov	ip, r1
 80018dc:	4463      	add	r3, ip
 80018de:	2000      	movs	r0, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	e77a      	b.n	80017da <__aeabi_dmul+0x82>
 80018e4:	2400      	movs	r4, #0
 80018e6:	2500      	movs	r5, #0
 80018e8:	4a81      	ldr	r2, [pc, #516]	; (8001af0 <__aeabi_dmul+0x398>)
 80018ea:	e7a5      	b.n	8001838 <__aeabi_dmul+0xe0>
 80018ec:	0c2f      	lsrs	r7, r5, #16
 80018ee:	042d      	lsls	r5, r5, #16
 80018f0:	0c2d      	lsrs	r5, r5, #16
 80018f2:	002b      	movs	r3, r5
 80018f4:	0c11      	lsrs	r1, r2, #16
 80018f6:	0412      	lsls	r2, r2, #16
 80018f8:	0c12      	lsrs	r2, r2, #16
 80018fa:	4353      	muls	r3, r2
 80018fc:	4698      	mov	r8, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	0028      	movs	r0, r5
 8001902:	437b      	muls	r3, r7
 8001904:	4699      	mov	r9, r3
 8001906:	4348      	muls	r0, r1
 8001908:	4448      	add	r0, r9
 800190a:	4683      	mov	fp, r0
 800190c:	4640      	mov	r0, r8
 800190e:	000b      	movs	r3, r1
 8001910:	0c00      	lsrs	r0, r0, #16
 8001912:	4682      	mov	sl, r0
 8001914:	4658      	mov	r0, fp
 8001916:	437b      	muls	r3, r7
 8001918:	4450      	add	r0, sl
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	4581      	cmp	r9, r0
 800191e:	d906      	bls.n	800192e <__aeabi_dmul+0x1d6>
 8001920:	469a      	mov	sl, r3
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	4699      	mov	r9, r3
 8001928:	44ca      	add	sl, r9
 800192a:	4653      	mov	r3, sl
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	0c03      	lsrs	r3, r0, #16
 8001930:	469b      	mov	fp, r3
 8001932:	4643      	mov	r3, r8
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	0400      	lsls	r0, r0, #16
 8001938:	0c1b      	lsrs	r3, r3, #16
 800193a:	4698      	mov	r8, r3
 800193c:	0003      	movs	r3, r0
 800193e:	4443      	add	r3, r8
 8001940:	9304      	str	r3, [sp, #16]
 8001942:	0c33      	lsrs	r3, r6, #16
 8001944:	4699      	mov	r9, r3
 8001946:	002b      	movs	r3, r5
 8001948:	0436      	lsls	r6, r6, #16
 800194a:	0c36      	lsrs	r6, r6, #16
 800194c:	4373      	muls	r3, r6
 800194e:	4698      	mov	r8, r3
 8001950:	0033      	movs	r3, r6
 8001952:	437b      	muls	r3, r7
 8001954:	469a      	mov	sl, r3
 8001956:	464b      	mov	r3, r9
 8001958:	435d      	muls	r5, r3
 800195a:	435f      	muls	r7, r3
 800195c:	4643      	mov	r3, r8
 800195e:	4455      	add	r5, sl
 8001960:	0c18      	lsrs	r0, r3, #16
 8001962:	1940      	adds	r0, r0, r5
 8001964:	4582      	cmp	sl, r0
 8001966:	d903      	bls.n	8001970 <__aeabi_dmul+0x218>
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	025b      	lsls	r3, r3, #9
 800196c:	469a      	mov	sl, r3
 800196e:	4457      	add	r7, sl
 8001970:	0c05      	lsrs	r5, r0, #16
 8001972:	19eb      	adds	r3, r5, r7
 8001974:	9305      	str	r3, [sp, #20]
 8001976:	4643      	mov	r3, r8
 8001978:	041d      	lsls	r5, r3, #16
 800197a:	0c2d      	lsrs	r5, r5, #16
 800197c:	0400      	lsls	r0, r0, #16
 800197e:	1940      	adds	r0, r0, r5
 8001980:	0c25      	lsrs	r5, r4, #16
 8001982:	0424      	lsls	r4, r4, #16
 8001984:	0c24      	lsrs	r4, r4, #16
 8001986:	0027      	movs	r7, r4
 8001988:	4357      	muls	r7, r2
 800198a:	436a      	muls	r2, r5
 800198c:	4690      	mov	r8, r2
 800198e:	002a      	movs	r2, r5
 8001990:	0c3b      	lsrs	r3, r7, #16
 8001992:	469a      	mov	sl, r3
 8001994:	434a      	muls	r2, r1
 8001996:	4361      	muls	r1, r4
 8001998:	4441      	add	r1, r8
 800199a:	4451      	add	r1, sl
 800199c:	4483      	add	fp, r0
 800199e:	4588      	cmp	r8, r1
 80019a0:	d903      	bls.n	80019aa <__aeabi_dmul+0x252>
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	4698      	mov	r8, r3
 80019a8:	4442      	add	r2, r8
 80019aa:	043f      	lsls	r7, r7, #16
 80019ac:	0c0b      	lsrs	r3, r1, #16
 80019ae:	0c3f      	lsrs	r7, r7, #16
 80019b0:	0409      	lsls	r1, r1, #16
 80019b2:	19c9      	adds	r1, r1, r7
 80019b4:	0027      	movs	r7, r4
 80019b6:	4698      	mov	r8, r3
 80019b8:	464b      	mov	r3, r9
 80019ba:	4377      	muls	r7, r6
 80019bc:	435c      	muls	r4, r3
 80019be:	436e      	muls	r6, r5
 80019c0:	435d      	muls	r5, r3
 80019c2:	0c3b      	lsrs	r3, r7, #16
 80019c4:	4699      	mov	r9, r3
 80019c6:	19a4      	adds	r4, r4, r6
 80019c8:	444c      	add	r4, r9
 80019ca:	4442      	add	r2, r8
 80019cc:	9503      	str	r5, [sp, #12]
 80019ce:	42a6      	cmp	r6, r4
 80019d0:	d904      	bls.n	80019dc <__aeabi_dmul+0x284>
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	4698      	mov	r8, r3
 80019d8:	4445      	add	r5, r8
 80019da:	9503      	str	r5, [sp, #12]
 80019dc:	9b02      	ldr	r3, [sp, #8]
 80019de:	043f      	lsls	r7, r7, #16
 80019e0:	445b      	add	r3, fp
 80019e2:	001e      	movs	r6, r3
 80019e4:	4283      	cmp	r3, r0
 80019e6:	4180      	sbcs	r0, r0
 80019e8:	0423      	lsls	r3, r4, #16
 80019ea:	4698      	mov	r8, r3
 80019ec:	9b05      	ldr	r3, [sp, #20]
 80019ee:	0c3f      	lsrs	r7, r7, #16
 80019f0:	4447      	add	r7, r8
 80019f2:	4698      	mov	r8, r3
 80019f4:	1876      	adds	r6, r6, r1
 80019f6:	428e      	cmp	r6, r1
 80019f8:	4189      	sbcs	r1, r1
 80019fa:	4447      	add	r7, r8
 80019fc:	4240      	negs	r0, r0
 80019fe:	183d      	adds	r5, r7, r0
 8001a00:	46a8      	mov	r8, r5
 8001a02:	4693      	mov	fp, r2
 8001a04:	4249      	negs	r1, r1
 8001a06:	468a      	mov	sl, r1
 8001a08:	44c3      	add	fp, r8
 8001a0a:	429f      	cmp	r7, r3
 8001a0c:	41bf      	sbcs	r7, r7
 8001a0e:	4580      	cmp	r8, r0
 8001a10:	4180      	sbcs	r0, r0
 8001a12:	9b03      	ldr	r3, [sp, #12]
 8001a14:	44da      	add	sl, fp
 8001a16:	4698      	mov	r8, r3
 8001a18:	4653      	mov	r3, sl
 8001a1a:	4240      	negs	r0, r0
 8001a1c:	427f      	negs	r7, r7
 8001a1e:	4307      	orrs	r7, r0
 8001a20:	0c24      	lsrs	r4, r4, #16
 8001a22:	4593      	cmp	fp, r2
 8001a24:	4192      	sbcs	r2, r2
 8001a26:	458a      	cmp	sl, r1
 8001a28:	4189      	sbcs	r1, r1
 8001a2a:	193f      	adds	r7, r7, r4
 8001a2c:	0ddc      	lsrs	r4, r3, #23
 8001a2e:	9b04      	ldr	r3, [sp, #16]
 8001a30:	0275      	lsls	r5, r6, #9
 8001a32:	431d      	orrs	r5, r3
 8001a34:	1e68      	subs	r0, r5, #1
 8001a36:	4185      	sbcs	r5, r0
 8001a38:	4653      	mov	r3, sl
 8001a3a:	4252      	negs	r2, r2
 8001a3c:	4249      	negs	r1, r1
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	18bf      	adds	r7, r7, r2
 8001a42:	4447      	add	r7, r8
 8001a44:	0df6      	lsrs	r6, r6, #23
 8001a46:	027f      	lsls	r7, r7, #9
 8001a48:	4335      	orrs	r5, r6
 8001a4a:	025a      	lsls	r2, r3, #9
 8001a4c:	433c      	orrs	r4, r7
 8001a4e:	4315      	orrs	r5, r2
 8001a50:	01fb      	lsls	r3, r7, #7
 8001a52:	d400      	bmi.n	8001a56 <__aeabi_dmul+0x2fe>
 8001a54:	e0c1      	b.n	8001bda <__aeabi_dmul+0x482>
 8001a56:	2101      	movs	r1, #1
 8001a58:	086a      	lsrs	r2, r5, #1
 8001a5a:	400d      	ands	r5, r1
 8001a5c:	4315      	orrs	r5, r2
 8001a5e:	07e2      	lsls	r2, r4, #31
 8001a60:	4315      	orrs	r5, r2
 8001a62:	0864      	lsrs	r4, r4, #1
 8001a64:	4926      	ldr	r1, [pc, #152]	; (8001b00 <__aeabi_dmul+0x3a8>)
 8001a66:	4461      	add	r1, ip
 8001a68:	2900      	cmp	r1, #0
 8001a6a:	dd56      	ble.n	8001b1a <__aeabi_dmul+0x3c2>
 8001a6c:	076b      	lsls	r3, r5, #29
 8001a6e:	d009      	beq.n	8001a84 <__aeabi_dmul+0x32c>
 8001a70:	220f      	movs	r2, #15
 8001a72:	402a      	ands	r2, r5
 8001a74:	2a04      	cmp	r2, #4
 8001a76:	d005      	beq.n	8001a84 <__aeabi_dmul+0x32c>
 8001a78:	1d2a      	adds	r2, r5, #4
 8001a7a:	42aa      	cmp	r2, r5
 8001a7c:	41ad      	sbcs	r5, r5
 8001a7e:	426d      	negs	r5, r5
 8001a80:	1964      	adds	r4, r4, r5
 8001a82:	0015      	movs	r5, r2
 8001a84:	01e3      	lsls	r3, r4, #7
 8001a86:	d504      	bpl.n	8001a92 <__aeabi_dmul+0x33a>
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <__aeabi_dmul+0x3ac>)
 8001a8c:	00c9      	lsls	r1, r1, #3
 8001a8e:	4014      	ands	r4, r2
 8001a90:	4461      	add	r1, ip
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <__aeabi_dmul+0x3b0>)
 8001a94:	4291      	cmp	r1, r2
 8001a96:	dd00      	ble.n	8001a9a <__aeabi_dmul+0x342>
 8001a98:	e724      	b.n	80018e4 <__aeabi_dmul+0x18c>
 8001a9a:	0762      	lsls	r2, r4, #29
 8001a9c:	08ed      	lsrs	r5, r5, #3
 8001a9e:	0264      	lsls	r4, r4, #9
 8001aa0:	0549      	lsls	r1, r1, #21
 8001aa2:	4315      	orrs	r5, r2
 8001aa4:	0b24      	lsrs	r4, r4, #12
 8001aa6:	0d4a      	lsrs	r2, r1, #21
 8001aa8:	e6c6      	b.n	8001838 <__aeabi_dmul+0xe0>
 8001aaa:	9701      	str	r7, [sp, #4]
 8001aac:	e6b8      	b.n	8001820 <__aeabi_dmul+0xc8>
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <__aeabi_dmul+0x398>)
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	4694      	mov	ip, r2
 8001ab4:	4463      	add	r3, ip
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2303      	movs	r3, #3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	4691      	mov	r9, r2
 8001ac0:	4652      	mov	r2, sl
 8001ac2:	e68a      	b.n	80017da <__aeabi_dmul+0x82>
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4319      	orrs	r1, r3
 8001aca:	4689      	mov	r9, r1
 8001acc:	2600      	movs	r6, #0
 8001ace:	2001      	movs	r0, #1
 8001ad0:	e683      	b.n	80017da <__aeabi_dmul+0x82>
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	0005      	movs	r5, r0
 8001ada:	4691      	mov	r9, r2
 8001adc:	469b      	mov	fp, r3
 8001ade:	e65e      	b.n	800179e <__aeabi_dmul+0x46>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	4699      	mov	r9, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	2400      	movs	r4, #0
 8001aec:	469b      	mov	fp, r3
 8001aee:	e656      	b.n	800179e <__aeabi_dmul+0x46>
 8001af0:	000007ff 	.word	0x000007ff
 8001af4:	fffffc01 	.word	0xfffffc01
 8001af8:	08005b10 	.word	0x08005b10
 8001afc:	fffffc0d 	.word	0xfffffc0d
 8001b00:	000003ff 	.word	0x000003ff
 8001b04:	feffffff 	.word	0xfeffffff
 8001b08:	000007fe 	.word	0x000007fe
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2480      	movs	r4, #128	; 0x80
 8001b10:	2500      	movs	r5, #0
 8001b12:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	0324      	lsls	r4, r4, #12
 8001b18:	e68e      	b.n	8001838 <__aeabi_dmul+0xe0>
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	1a40      	subs	r0, r0, r1
 8001b1e:	2838      	cmp	r0, #56	; 0x38
 8001b20:	dd00      	ble.n	8001b24 <__aeabi_dmul+0x3cc>
 8001b22:	e686      	b.n	8001832 <__aeabi_dmul+0xda>
 8001b24:	281f      	cmp	r0, #31
 8001b26:	dd5b      	ble.n	8001be0 <__aeabi_dmul+0x488>
 8001b28:	221f      	movs	r2, #31
 8001b2a:	0023      	movs	r3, r4
 8001b2c:	4252      	negs	r2, r2
 8001b2e:	1a51      	subs	r1, r2, r1
 8001b30:	40cb      	lsrs	r3, r1
 8001b32:	0019      	movs	r1, r3
 8001b34:	2820      	cmp	r0, #32
 8001b36:	d003      	beq.n	8001b40 <__aeabi_dmul+0x3e8>
 8001b38:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <__aeabi_dmul+0x4d0>)
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4094      	lsls	r4, r2
 8001b3e:	4325      	orrs	r5, r4
 8001b40:	1e6a      	subs	r2, r5, #1
 8001b42:	4195      	sbcs	r5, r2
 8001b44:	002a      	movs	r2, r5
 8001b46:	430a      	orrs	r2, r1
 8001b48:	2107      	movs	r1, #7
 8001b4a:	000d      	movs	r5, r1
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	4015      	ands	r5, r2
 8001b50:	4211      	tst	r1, r2
 8001b52:	d05b      	beq.n	8001c0c <__aeabi_dmul+0x4b4>
 8001b54:	210f      	movs	r1, #15
 8001b56:	2400      	movs	r4, #0
 8001b58:	4011      	ands	r1, r2
 8001b5a:	2904      	cmp	r1, #4
 8001b5c:	d053      	beq.n	8001c06 <__aeabi_dmul+0x4ae>
 8001b5e:	1d11      	adds	r1, r2, #4
 8001b60:	4291      	cmp	r1, r2
 8001b62:	4192      	sbcs	r2, r2
 8001b64:	4252      	negs	r2, r2
 8001b66:	18a4      	adds	r4, r4, r2
 8001b68:	000a      	movs	r2, r1
 8001b6a:	0223      	lsls	r3, r4, #8
 8001b6c:	d54b      	bpl.n	8001c06 <__aeabi_dmul+0x4ae>
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2400      	movs	r4, #0
 8001b72:	2500      	movs	r5, #0
 8001b74:	e660      	b.n	8001838 <__aeabi_dmul+0xe0>
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	031b      	lsls	r3, r3, #12
 8001b7a:	421c      	tst	r4, r3
 8001b7c:	d009      	beq.n	8001b92 <__aeabi_dmul+0x43a>
 8001b7e:	421e      	tst	r6, r3
 8001b80:	d107      	bne.n	8001b92 <__aeabi_dmul+0x43a>
 8001b82:	4333      	orrs	r3, r6
 8001b84:	031c      	lsls	r4, r3, #12
 8001b86:	4643      	mov	r3, r8
 8001b88:	0015      	movs	r5, r2
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	e652      	b.n	8001838 <__aeabi_dmul+0xe0>
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	0312      	lsls	r2, r2, #12
 8001b96:	4314      	orrs	r4, r2
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001b9c:	0b24      	lsrs	r4, r4, #12
 8001b9e:	9701      	str	r7, [sp, #4]
 8001ba0:	e64a      	b.n	8001838 <__aeabi_dmul+0xe0>
 8001ba2:	f000 fc4b 	bl	800243c <__clzsi2>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	001a      	movs	r2, r3
 8001baa:	3215      	adds	r2, #21
 8001bac:	3020      	adds	r0, #32
 8001bae:	2a1c      	cmp	r2, #28
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dmul+0x45c>
 8001bb2:	e684      	b.n	80018be <__aeabi_dmul+0x166>
 8001bb4:	4656      	mov	r6, sl
 8001bb6:	3b08      	subs	r3, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	409e      	lsls	r6, r3
 8001bbc:	e689      	b.n	80018d2 <__aeabi_dmul+0x17a>
 8001bbe:	f000 fc3d 	bl	800243c <__clzsi2>
 8001bc2:	0001      	movs	r1, r0
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	3115      	adds	r1, #21
 8001bc8:	3220      	adds	r2, #32
 8001bca:	291c      	cmp	r1, #28
 8001bcc:	dc00      	bgt.n	8001bd0 <__aeabi_dmul+0x478>
 8001bce:	e64e      	b.n	800186e <__aeabi_dmul+0x116>
 8001bd0:	0034      	movs	r4, r6
 8001bd2:	3808      	subs	r0, #8
 8001bd4:	2500      	movs	r5, #0
 8001bd6:	4084      	lsls	r4, r0
 8001bd8:	e653      	b.n	8001882 <__aeabi_dmul+0x12a>
 8001bda:	9b00      	ldr	r3, [sp, #0]
 8001bdc:	469c      	mov	ip, r3
 8001bde:	e741      	b.n	8001a64 <__aeabi_dmul+0x30c>
 8001be0:	4912      	ldr	r1, [pc, #72]	; (8001c2c <__aeabi_dmul+0x4d4>)
 8001be2:	0022      	movs	r2, r4
 8001be4:	4461      	add	r1, ip
 8001be6:	002e      	movs	r6, r5
 8001be8:	408d      	lsls	r5, r1
 8001bea:	408a      	lsls	r2, r1
 8001bec:	40c6      	lsrs	r6, r0
 8001bee:	1e69      	subs	r1, r5, #1
 8001bf0:	418d      	sbcs	r5, r1
 8001bf2:	4332      	orrs	r2, r6
 8001bf4:	432a      	orrs	r2, r5
 8001bf6:	40c4      	lsrs	r4, r0
 8001bf8:	0753      	lsls	r3, r2, #29
 8001bfa:	d0b6      	beq.n	8001b6a <__aeabi_dmul+0x412>
 8001bfc:	210f      	movs	r1, #15
 8001bfe:	4011      	ands	r1, r2
 8001c00:	2904      	cmp	r1, #4
 8001c02:	d1ac      	bne.n	8001b5e <__aeabi_dmul+0x406>
 8001c04:	e7b1      	b.n	8001b6a <__aeabi_dmul+0x412>
 8001c06:	0765      	lsls	r5, r4, #29
 8001c08:	0264      	lsls	r4, r4, #9
 8001c0a:	0b24      	lsrs	r4, r4, #12
 8001c0c:	08d2      	lsrs	r2, r2, #3
 8001c0e:	4315      	orrs	r5, r2
 8001c10:	2200      	movs	r2, #0
 8001c12:	e611      	b.n	8001838 <__aeabi_dmul+0xe0>
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	0312      	lsls	r2, r2, #12
 8001c18:	4314      	orrs	r4, r2
 8001c1a:	0324      	lsls	r4, r4, #12
 8001c1c:	4a01      	ldr	r2, [pc, #4]	; (8001c24 <__aeabi_dmul+0x4cc>)
 8001c1e:	0b24      	lsrs	r4, r4, #12
 8001c20:	e60a      	b.n	8001838 <__aeabi_dmul+0xe0>
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	000007ff 	.word	0x000007ff
 8001c28:	0000043e 	.word	0x0000043e
 8001c2c:	0000041e 	.word	0x0000041e

08001c30 <__aeabi_dsub>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	4657      	mov	r7, sl
 8001c34:	464e      	mov	r6, r9
 8001c36:	4645      	mov	r5, r8
 8001c38:	46de      	mov	lr, fp
 8001c3a:	0004      	movs	r4, r0
 8001c3c:	b5e0      	push	{r5, r6, r7, lr}
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0010      	movs	r0, r2
 8001c42:	030b      	lsls	r3, r1, #12
 8001c44:	0f62      	lsrs	r2, r4, #29
 8001c46:	004e      	lsls	r6, r1, #1
 8001c48:	0fcd      	lsrs	r5, r1, #31
 8001c4a:	0a5b      	lsrs	r3, r3, #9
 8001c4c:	0339      	lsls	r1, r7, #12
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	0a49      	lsrs	r1, r1, #9
 8001c52:	00e2      	lsls	r2, r4, #3
 8001c54:	0f44      	lsrs	r4, r0, #29
 8001c56:	4321      	orrs	r1, r4
 8001c58:	4cc2      	ldr	r4, [pc, #776]	; (8001f64 <__aeabi_dsub+0x334>)
 8001c5a:	4691      	mov	r9, r2
 8001c5c:	4692      	mov	sl, r2
 8001c5e:	00c0      	lsls	r0, r0, #3
 8001c60:	007a      	lsls	r2, r7, #1
 8001c62:	4680      	mov	r8, r0
 8001c64:	0d76      	lsrs	r6, r6, #21
 8001c66:	0d52      	lsrs	r2, r2, #21
 8001c68:	0fff      	lsrs	r7, r7, #31
 8001c6a:	42a2      	cmp	r2, r4
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x40>
 8001c6e:	e0b4      	b.n	8001dda <__aeabi_dsub+0x1aa>
 8001c70:	2401      	movs	r4, #1
 8001c72:	4067      	eors	r7, r4
 8001c74:	46bb      	mov	fp, r7
 8001c76:	42bd      	cmp	r5, r7
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x4c>
 8001c7a:	e088      	b.n	8001d8e <__aeabi_dsub+0x15e>
 8001c7c:	1ab4      	subs	r4, r6, r2
 8001c7e:	46a4      	mov	ip, r4
 8001c80:	2c00      	cmp	r4, #0
 8001c82:	dc00      	bgt.n	8001c86 <__aeabi_dsub+0x56>
 8001c84:	e0b2      	b.n	8001dec <__aeabi_dsub+0x1bc>
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x5c>
 8001c8a:	e0c5      	b.n	8001e18 <__aeabi_dsub+0x1e8>
 8001c8c:	4ab5      	ldr	r2, [pc, #724]	; (8001f64 <__aeabi_dsub+0x334>)
 8001c8e:	4296      	cmp	r6, r2
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x64>
 8001c92:	e28b      	b.n	80021ac <__aeabi_dsub+0x57c>
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	0412      	lsls	r2, r2, #16
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	4662      	mov	r2, ip
 8001c9c:	2a38      	cmp	r2, #56	; 0x38
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0x72>
 8001ca0:	e1a1      	b.n	8001fe6 <__aeabi_dsub+0x3b6>
 8001ca2:	2a1f      	cmp	r2, #31
 8001ca4:	dd00      	ble.n	8001ca8 <__aeabi_dsub+0x78>
 8001ca6:	e216      	b.n	80020d6 <__aeabi_dsub+0x4a6>
 8001ca8:	2720      	movs	r7, #32
 8001caa:	000c      	movs	r4, r1
 8001cac:	1abf      	subs	r7, r7, r2
 8001cae:	40bc      	lsls	r4, r7
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	46a0      	mov	r8, r4
 8001cb4:	4664      	mov	r4, ip
 8001cb6:	40b8      	lsls	r0, r7
 8001cb8:	40e2      	lsrs	r2, r4
 8001cba:	4644      	mov	r4, r8
 8001cbc:	4314      	orrs	r4, r2
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	1e50      	subs	r0, r2, #1
 8001cc2:	4182      	sbcs	r2, r0
 8001cc4:	4660      	mov	r0, ip
 8001cc6:	40c1      	lsrs	r1, r0
 8001cc8:	4322      	orrs	r2, r4
 8001cca:	1a5b      	subs	r3, r3, r1
 8001ccc:	4649      	mov	r1, r9
 8001cce:	1a8c      	subs	r4, r1, r2
 8001cd0:	45a1      	cmp	r9, r4
 8001cd2:	4192      	sbcs	r2, r2
 8001cd4:	4252      	negs	r2, r2
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	4698      	mov	r8, r3
 8001cda:	4643      	mov	r3, r8
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	d400      	bmi.n	8001ce2 <__aeabi_dsub+0xb2>
 8001ce0:	e117      	b.n	8001f12 <__aeabi_dsub+0x2e2>
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	025b      	lsls	r3, r3, #9
 8001ce6:	0a5b      	lsrs	r3, r3, #9
 8001ce8:	4698      	mov	r8, r3
 8001cea:	4643      	mov	r3, r8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dsub+0xc2>
 8001cf0:	e16c      	b.n	8001fcc <__aeabi_dsub+0x39c>
 8001cf2:	4640      	mov	r0, r8
 8001cf4:	f000 fba2 	bl	800243c <__clzsi2>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	3a08      	subs	r2, #8
 8001cfc:	2120      	movs	r1, #32
 8001cfe:	0020      	movs	r0, r4
 8001d00:	4643      	mov	r3, r8
 8001d02:	1a89      	subs	r1, r1, r2
 8001d04:	4093      	lsls	r3, r2
 8001d06:	40c8      	lsrs	r0, r1
 8001d08:	4094      	lsls	r4, r2
 8001d0a:	4303      	orrs	r3, r0
 8001d0c:	4296      	cmp	r6, r2
 8001d0e:	dd00      	ble.n	8001d12 <__aeabi_dsub+0xe2>
 8001d10:	e157      	b.n	8001fc2 <__aeabi_dsub+0x392>
 8001d12:	1b96      	subs	r6, r2, r6
 8001d14:	1c71      	adds	r1, r6, #1
 8001d16:	291f      	cmp	r1, #31
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dsub+0xec>
 8001d1a:	e1cb      	b.n	80020b4 <__aeabi_dsub+0x484>
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	0018      	movs	r0, r3
 8001d20:	0026      	movs	r6, r4
 8001d22:	1a52      	subs	r2, r2, r1
 8001d24:	4094      	lsls	r4, r2
 8001d26:	4090      	lsls	r0, r2
 8001d28:	40ce      	lsrs	r6, r1
 8001d2a:	40cb      	lsrs	r3, r1
 8001d2c:	1e62      	subs	r2, r4, #1
 8001d2e:	4194      	sbcs	r4, r2
 8001d30:	4330      	orrs	r0, r6
 8001d32:	4698      	mov	r8, r3
 8001d34:	2600      	movs	r6, #0
 8001d36:	4304      	orrs	r4, r0
 8001d38:	0763      	lsls	r3, r4, #29
 8001d3a:	d009      	beq.n	8001d50 <__aeabi_dsub+0x120>
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	4023      	ands	r3, r4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d005      	beq.n	8001d50 <__aeabi_dsub+0x120>
 8001d44:	1d23      	adds	r3, r4, #4
 8001d46:	42a3      	cmp	r3, r4
 8001d48:	41a4      	sbcs	r4, r4
 8001d4a:	4264      	negs	r4, r4
 8001d4c:	44a0      	add	r8, r4
 8001d4e:	001c      	movs	r4, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	d400      	bmi.n	8001d58 <__aeabi_dsub+0x128>
 8001d56:	e0df      	b.n	8001f18 <__aeabi_dsub+0x2e8>
 8001d58:	4b82      	ldr	r3, [pc, #520]	; (8001f64 <__aeabi_dsub+0x334>)
 8001d5a:	3601      	adds	r6, #1
 8001d5c:	429e      	cmp	r6, r3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x132>
 8001d60:	e0fb      	b.n	8001f5a <__aeabi_dsub+0x32a>
 8001d62:	4642      	mov	r2, r8
 8001d64:	4b80      	ldr	r3, [pc, #512]	; (8001f68 <__aeabi_dsub+0x338>)
 8001d66:	08e4      	lsrs	r4, r4, #3
 8001d68:	401a      	ands	r2, r3
 8001d6a:	0013      	movs	r3, r2
 8001d6c:	0571      	lsls	r1, r6, #21
 8001d6e:	0752      	lsls	r2, r2, #29
 8001d70:	025b      	lsls	r3, r3, #9
 8001d72:	4322      	orrs	r2, r4
 8001d74:	0b1b      	lsrs	r3, r3, #12
 8001d76:	0d49      	lsrs	r1, r1, #21
 8001d78:	0509      	lsls	r1, r1, #20
 8001d7a:	07ed      	lsls	r5, r5, #31
 8001d7c:	4319      	orrs	r1, r3
 8001d7e:	4329      	orrs	r1, r5
 8001d80:	0010      	movs	r0, r2
 8001d82:	bcf0      	pop	{r4, r5, r6, r7}
 8001d84:	46bb      	mov	fp, r7
 8001d86:	46b2      	mov	sl, r6
 8001d88:	46a9      	mov	r9, r5
 8001d8a:	46a0      	mov	r8, r4
 8001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d8e:	1ab4      	subs	r4, r6, r2
 8001d90:	46a4      	mov	ip, r4
 8001d92:	2c00      	cmp	r4, #0
 8001d94:	dd58      	ble.n	8001e48 <__aeabi_dsub+0x218>
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x16c>
 8001d9a:	e09e      	b.n	8001eda <__aeabi_dsub+0x2aa>
 8001d9c:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <__aeabi_dsub+0x334>)
 8001d9e:	4296      	cmp	r6, r2
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x174>
 8001da2:	e13b      	b.n	800201c <__aeabi_dsub+0x3ec>
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	0412      	lsls	r2, r2, #16
 8001da8:	4311      	orrs	r1, r2
 8001daa:	4662      	mov	r2, ip
 8001dac:	2a38      	cmp	r2, #56	; 0x38
 8001dae:	dd00      	ble.n	8001db2 <__aeabi_dsub+0x182>
 8001db0:	e0c1      	b.n	8001f36 <__aeabi_dsub+0x306>
 8001db2:	2a1f      	cmp	r2, #31
 8001db4:	dc00      	bgt.n	8001db8 <__aeabi_dsub+0x188>
 8001db6:	e1bb      	b.n	8002130 <__aeabi_dsub+0x500>
 8001db8:	000c      	movs	r4, r1
 8001dba:	3a20      	subs	r2, #32
 8001dbc:	40d4      	lsrs	r4, r2
 8001dbe:	0022      	movs	r2, r4
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c20      	cmp	r4, #32
 8001dc4:	d004      	beq.n	8001dd0 <__aeabi_dsub+0x1a0>
 8001dc6:	2740      	movs	r7, #64	; 0x40
 8001dc8:	1b3f      	subs	r7, r7, r4
 8001dca:	40b9      	lsls	r1, r7
 8001dcc:	4308      	orrs	r0, r1
 8001dce:	4680      	mov	r8, r0
 8001dd0:	4644      	mov	r4, r8
 8001dd2:	1e61      	subs	r1, r4, #1
 8001dd4:	418c      	sbcs	r4, r1
 8001dd6:	4314      	orrs	r4, r2
 8001dd8:	e0b1      	b.n	8001f3e <__aeabi_dsub+0x30e>
 8001dda:	000c      	movs	r4, r1
 8001ddc:	4304      	orrs	r4, r0
 8001dde:	d02a      	beq.n	8001e36 <__aeabi_dsub+0x206>
 8001de0:	46bb      	mov	fp, r7
 8001de2:	42bd      	cmp	r5, r7
 8001de4:	d02d      	beq.n	8001e42 <__aeabi_dsub+0x212>
 8001de6:	4c61      	ldr	r4, [pc, #388]	; (8001f6c <__aeabi_dsub+0x33c>)
 8001de8:	46a4      	mov	ip, r4
 8001dea:	44b4      	add	ip, r6
 8001dec:	4664      	mov	r4, ip
 8001dee:	2c00      	cmp	r4, #0
 8001df0:	d05c      	beq.n	8001eac <__aeabi_dsub+0x27c>
 8001df2:	1b94      	subs	r4, r2, r6
 8001df4:	46a4      	mov	ip, r4
 8001df6:	2e00      	cmp	r6, #0
 8001df8:	d000      	beq.n	8001dfc <__aeabi_dsub+0x1cc>
 8001dfa:	e115      	b.n	8002028 <__aeabi_dsub+0x3f8>
 8001dfc:	464d      	mov	r5, r9
 8001dfe:	431d      	orrs	r5, r3
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x1d4>
 8001e02:	e1c3      	b.n	800218c <__aeabi_dsub+0x55c>
 8001e04:	1e65      	subs	r5, r4, #1
 8001e06:	2c01      	cmp	r4, #1
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x1dc>
 8001e0a:	e20c      	b.n	8002226 <__aeabi_dsub+0x5f6>
 8001e0c:	4e55      	ldr	r6, [pc, #340]	; (8001f64 <__aeabi_dsub+0x334>)
 8001e0e:	42b4      	cmp	r4, r6
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x1e4>
 8001e12:	e1f8      	b.n	8002206 <__aeabi_dsub+0x5d6>
 8001e14:	46ac      	mov	ip, r5
 8001e16:	e10e      	b.n	8002036 <__aeabi_dsub+0x406>
 8001e18:	000a      	movs	r2, r1
 8001e1a:	4302      	orrs	r2, r0
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x1f0>
 8001e1e:	e136      	b.n	800208e <__aeabi_dsub+0x45e>
 8001e20:	0022      	movs	r2, r4
 8001e22:	3a01      	subs	r2, #1
 8001e24:	2c01      	cmp	r4, #1
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x1fa>
 8001e28:	e1c6      	b.n	80021b8 <__aeabi_dsub+0x588>
 8001e2a:	4c4e      	ldr	r4, [pc, #312]	; (8001f64 <__aeabi_dsub+0x334>)
 8001e2c:	45a4      	cmp	ip, r4
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dsub+0x202>
 8001e30:	e0f4      	b.n	800201c <__aeabi_dsub+0x3ec>
 8001e32:	4694      	mov	ip, r2
 8001e34:	e731      	b.n	8001c9a <__aeabi_dsub+0x6a>
 8001e36:	2401      	movs	r4, #1
 8001e38:	4067      	eors	r7, r4
 8001e3a:	46bb      	mov	fp, r7
 8001e3c:	42bd      	cmp	r5, r7
 8001e3e:	d000      	beq.n	8001e42 <__aeabi_dsub+0x212>
 8001e40:	e71c      	b.n	8001c7c <__aeabi_dsub+0x4c>
 8001e42:	4c4a      	ldr	r4, [pc, #296]	; (8001f6c <__aeabi_dsub+0x33c>)
 8001e44:	46a4      	mov	ip, r4
 8001e46:	44b4      	add	ip, r6
 8001e48:	4664      	mov	r4, ip
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0x220>
 8001e4e:	e0cf      	b.n	8001ff0 <__aeabi_dsub+0x3c0>
 8001e50:	1b94      	subs	r4, r2, r6
 8001e52:	46a4      	mov	ip, r4
 8001e54:	2e00      	cmp	r6, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x22a>
 8001e58:	e15c      	b.n	8002114 <__aeabi_dsub+0x4e4>
 8001e5a:	4e42      	ldr	r6, [pc, #264]	; (8001f64 <__aeabi_dsub+0x334>)
 8001e5c:	42b2      	cmp	r2, r6
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x232>
 8001e60:	e1ec      	b.n	800223c <__aeabi_dsub+0x60c>
 8001e62:	2680      	movs	r6, #128	; 0x80
 8001e64:	0436      	lsls	r6, r6, #16
 8001e66:	4333      	orrs	r3, r6
 8001e68:	4664      	mov	r4, ip
 8001e6a:	2c38      	cmp	r4, #56	; 0x38
 8001e6c:	dd00      	ble.n	8001e70 <__aeabi_dsub+0x240>
 8001e6e:	e1b3      	b.n	80021d8 <__aeabi_dsub+0x5a8>
 8001e70:	2c1f      	cmp	r4, #31
 8001e72:	dd00      	ble.n	8001e76 <__aeabi_dsub+0x246>
 8001e74:	e238      	b.n	80022e8 <__aeabi_dsub+0x6b8>
 8001e76:	2620      	movs	r6, #32
 8001e78:	1b36      	subs	r6, r6, r4
 8001e7a:	001c      	movs	r4, r3
 8001e7c:	40b4      	lsls	r4, r6
 8001e7e:	464f      	mov	r7, r9
 8001e80:	46a0      	mov	r8, r4
 8001e82:	4664      	mov	r4, ip
 8001e84:	40e7      	lsrs	r7, r4
 8001e86:	4644      	mov	r4, r8
 8001e88:	433c      	orrs	r4, r7
 8001e8a:	464f      	mov	r7, r9
 8001e8c:	40b7      	lsls	r7, r6
 8001e8e:	003e      	movs	r6, r7
 8001e90:	1e77      	subs	r7, r6, #1
 8001e92:	41be      	sbcs	r6, r7
 8001e94:	4334      	orrs	r4, r6
 8001e96:	4666      	mov	r6, ip
 8001e98:	40f3      	lsrs	r3, r6
 8001e9a:	18c9      	adds	r1, r1, r3
 8001e9c:	1824      	adds	r4, r4, r0
 8001e9e:	4284      	cmp	r4, r0
 8001ea0:	419b      	sbcs	r3, r3
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	0016      	movs	r6, r2
 8001ea8:	4488      	add	r8, r1
 8001eaa:	e04e      	b.n	8001f4a <__aeabi_dsub+0x31a>
 8001eac:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <__aeabi_dsub+0x340>)
 8001eae:	1c74      	adds	r4, r6, #1
 8001eb0:	4214      	tst	r4, r2
 8001eb2:	d000      	beq.n	8001eb6 <__aeabi_dsub+0x286>
 8001eb4:	e0d6      	b.n	8002064 <__aeabi_dsub+0x434>
 8001eb6:	464a      	mov	r2, r9
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	2e00      	cmp	r6, #0
 8001ebc:	d000      	beq.n	8001ec0 <__aeabi_dsub+0x290>
 8001ebe:	e15b      	b.n	8002178 <__aeabi_dsub+0x548>
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x296>
 8001ec4:	e1a5      	b.n	8002212 <__aeabi_dsub+0x5e2>
 8001ec6:	000a      	movs	r2, r1
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	d000      	beq.n	8001ece <__aeabi_dsub+0x29e>
 8001ecc:	e1bb      	b.n	8002246 <__aeabi_dsub+0x616>
 8001ece:	464a      	mov	r2, r9
 8001ed0:	0759      	lsls	r1, r3, #29
 8001ed2:	08d2      	lsrs	r2, r2, #3
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	e027      	b.n	8001f2a <__aeabi_dsub+0x2fa>
 8001eda:	000a      	movs	r2, r1
 8001edc:	4302      	orrs	r2, r0
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2b2>
 8001ee0:	e174      	b.n	80021cc <__aeabi_dsub+0x59c>
 8001ee2:	0022      	movs	r2, r4
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	2c01      	cmp	r4, #1
 8001ee8:	d005      	beq.n	8001ef6 <__aeabi_dsub+0x2c6>
 8001eea:	4c1e      	ldr	r4, [pc, #120]	; (8001f64 <__aeabi_dsub+0x334>)
 8001eec:	45a4      	cmp	ip, r4
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dsub+0x2c2>
 8001ef0:	e094      	b.n	800201c <__aeabi_dsub+0x3ec>
 8001ef2:	4694      	mov	ip, r2
 8001ef4:	e759      	b.n	8001daa <__aeabi_dsub+0x17a>
 8001ef6:	4448      	add	r0, r9
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	185b      	adds	r3, r3, r1
 8001efe:	4698      	mov	r8, r3
 8001f00:	0004      	movs	r4, r0
 8001f02:	4252      	negs	r2, r2
 8001f04:	4490      	add	r8, r2
 8001f06:	4643      	mov	r3, r8
 8001f08:	2602      	movs	r6, #2
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	d500      	bpl.n	8001f10 <__aeabi_dsub+0x2e0>
 8001f0e:	e0c4      	b.n	800209a <__aeabi_dsub+0x46a>
 8001f10:	3e01      	subs	r6, #1
 8001f12:	0763      	lsls	r3, r4, #29
 8001f14:	d000      	beq.n	8001f18 <__aeabi_dsub+0x2e8>
 8001f16:	e711      	b.n	8001d3c <__aeabi_dsub+0x10c>
 8001f18:	4643      	mov	r3, r8
 8001f1a:	46b4      	mov	ip, r6
 8001f1c:	0759      	lsls	r1, r3, #29
 8001f1e:	08e2      	lsrs	r2, r4, #3
 8001f20:	430a      	orrs	r2, r1
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	490f      	ldr	r1, [pc, #60]	; (8001f64 <__aeabi_dsub+0x334>)
 8001f26:	458c      	cmp	ip, r1
 8001f28:	d040      	beq.n	8001fac <__aeabi_dsub+0x37c>
 8001f2a:	4661      	mov	r1, ip
 8001f2c:	031b      	lsls	r3, r3, #12
 8001f2e:	0549      	lsls	r1, r1, #21
 8001f30:	0b1b      	lsrs	r3, r3, #12
 8001f32:	0d49      	lsrs	r1, r1, #21
 8001f34:	e720      	b.n	8001d78 <__aeabi_dsub+0x148>
 8001f36:	4301      	orrs	r1, r0
 8001f38:	000c      	movs	r4, r1
 8001f3a:	1e61      	subs	r1, r4, #1
 8001f3c:	418c      	sbcs	r4, r1
 8001f3e:	444c      	add	r4, r9
 8001f40:	454c      	cmp	r4, r9
 8001f42:	4192      	sbcs	r2, r2
 8001f44:	4252      	negs	r2, r2
 8001f46:	4690      	mov	r8, r2
 8001f48:	4498      	add	r8, r3
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d5e0      	bpl.n	8001f12 <__aeabi_dsub+0x2e2>
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__aeabi_dsub+0x334>)
 8001f52:	3601      	adds	r6, #1
 8001f54:	429e      	cmp	r6, r3
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x32a>
 8001f58:	e09f      	b.n	800209a <__aeabi_dsub+0x46a>
 8001f5a:	0031      	movs	r1, r6
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2200      	movs	r2, #0
 8001f60:	e70a      	b.n	8001d78 <__aeabi_dsub+0x148>
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	000007ff 	.word	0x000007ff
 8001f68:	ff7fffff 	.word	0xff7fffff
 8001f6c:	fffff801 	.word	0xfffff801
 8001f70:	000007fe 	.word	0x000007fe
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x34a>
 8001f78:	e160      	b.n	800223c <__aeabi_dsub+0x60c>
 8001f7a:	000a      	movs	r2, r1
 8001f7c:	4302      	orrs	r2, r0
 8001f7e:	d04d      	beq.n	800201c <__aeabi_dsub+0x3ec>
 8001f80:	464a      	mov	r2, r9
 8001f82:	075c      	lsls	r4, r3, #29
 8001f84:	08d2      	lsrs	r2, r2, #3
 8001f86:	4322      	orrs	r2, r4
 8001f88:	2480      	movs	r4, #128	; 0x80
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	4223      	tst	r3, r4
 8001f90:	d007      	beq.n	8001fa2 <__aeabi_dsub+0x372>
 8001f92:	08ce      	lsrs	r6, r1, #3
 8001f94:	4226      	tst	r6, r4
 8001f96:	d104      	bne.n	8001fa2 <__aeabi_dsub+0x372>
 8001f98:	465d      	mov	r5, fp
 8001f9a:	0033      	movs	r3, r6
 8001f9c:	08c2      	lsrs	r2, r0, #3
 8001f9e:	0749      	lsls	r1, r1, #29
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	0f51      	lsrs	r1, r2, #29
 8001fa4:	00d2      	lsls	r2, r2, #3
 8001fa6:	08d2      	lsrs	r2, r2, #3
 8001fa8:	0749      	lsls	r1, r1, #29
 8001faa:	430a      	orrs	r2, r1
 8001fac:	0011      	movs	r1, r2
 8001fae:	4319      	orrs	r1, r3
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dsub+0x384>
 8001fb2:	e1c8      	b.n	8002346 <__aeabi_dsub+0x716>
 8001fb4:	2180      	movs	r1, #128	; 0x80
 8001fb6:	0309      	lsls	r1, r1, #12
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	031b      	lsls	r3, r3, #12
 8001fbc:	49d5      	ldr	r1, [pc, #852]	; (8002314 <__aeabi_dsub+0x6e4>)
 8001fbe:	0b1b      	lsrs	r3, r3, #12
 8001fc0:	e6da      	b.n	8001d78 <__aeabi_dsub+0x148>
 8001fc2:	49d5      	ldr	r1, [pc, #852]	; (8002318 <__aeabi_dsub+0x6e8>)
 8001fc4:	1ab6      	subs	r6, r6, r2
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	4698      	mov	r8, r3
 8001fca:	e6b5      	b.n	8001d38 <__aeabi_dsub+0x108>
 8001fcc:	0020      	movs	r0, r4
 8001fce:	f000 fa35 	bl	800243c <__clzsi2>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	3218      	adds	r2, #24
 8001fd6:	2a1f      	cmp	r2, #31
 8001fd8:	dc00      	bgt.n	8001fdc <__aeabi_dsub+0x3ac>
 8001fda:	e68f      	b.n	8001cfc <__aeabi_dsub+0xcc>
 8001fdc:	0023      	movs	r3, r4
 8001fde:	3808      	subs	r0, #8
 8001fe0:	4083      	lsls	r3, r0
 8001fe2:	2400      	movs	r4, #0
 8001fe4:	e692      	b.n	8001d0c <__aeabi_dsub+0xdc>
 8001fe6:	4308      	orrs	r0, r1
 8001fe8:	0002      	movs	r2, r0
 8001fea:	1e50      	subs	r0, r2, #1
 8001fec:	4182      	sbcs	r2, r0
 8001fee:	e66d      	b.n	8001ccc <__aeabi_dsub+0x9c>
 8001ff0:	4cca      	ldr	r4, [pc, #808]	; (800231c <__aeabi_dsub+0x6ec>)
 8001ff2:	1c72      	adds	r2, r6, #1
 8001ff4:	4222      	tst	r2, r4
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dsub+0x3ca>
 8001ff8:	e0ad      	b.n	8002156 <__aeabi_dsub+0x526>
 8001ffa:	464a      	mov	r2, r9
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	2e00      	cmp	r6, #0
 8002000:	d1b8      	bne.n	8001f74 <__aeabi_dsub+0x344>
 8002002:	2a00      	cmp	r2, #0
 8002004:	d100      	bne.n	8002008 <__aeabi_dsub+0x3d8>
 8002006:	e158      	b.n	80022ba <__aeabi_dsub+0x68a>
 8002008:	000a      	movs	r2, r1
 800200a:	4302      	orrs	r2, r0
 800200c:	d000      	beq.n	8002010 <__aeabi_dsub+0x3e0>
 800200e:	e159      	b.n	80022c4 <__aeabi_dsub+0x694>
 8002010:	464a      	mov	r2, r9
 8002012:	0759      	lsls	r1, r3, #29
 8002014:	08d2      	lsrs	r2, r2, #3
 8002016:	430a      	orrs	r2, r1
 8002018:	08db      	lsrs	r3, r3, #3
 800201a:	e786      	b.n	8001f2a <__aeabi_dsub+0x2fa>
 800201c:	464a      	mov	r2, r9
 800201e:	0759      	lsls	r1, r3, #29
 8002020:	08d2      	lsrs	r2, r2, #3
 8002022:	430a      	orrs	r2, r1
 8002024:	08db      	lsrs	r3, r3, #3
 8002026:	e7c1      	b.n	8001fac <__aeabi_dsub+0x37c>
 8002028:	4dba      	ldr	r5, [pc, #744]	; (8002314 <__aeabi_dsub+0x6e4>)
 800202a:	42aa      	cmp	r2, r5
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x400>
 800202e:	e11e      	b.n	800226e <__aeabi_dsub+0x63e>
 8002030:	2580      	movs	r5, #128	; 0x80
 8002032:	042d      	lsls	r5, r5, #16
 8002034:	432b      	orrs	r3, r5
 8002036:	4664      	mov	r4, ip
 8002038:	2c38      	cmp	r4, #56	; 0x38
 800203a:	dc5d      	bgt.n	80020f8 <__aeabi_dsub+0x4c8>
 800203c:	2c1f      	cmp	r4, #31
 800203e:	dd00      	ble.n	8002042 <__aeabi_dsub+0x412>
 8002040:	e0d0      	b.n	80021e4 <__aeabi_dsub+0x5b4>
 8002042:	2520      	movs	r5, #32
 8002044:	4667      	mov	r7, ip
 8002046:	1b2d      	subs	r5, r5, r4
 8002048:	464e      	mov	r6, r9
 800204a:	001c      	movs	r4, r3
 800204c:	40fe      	lsrs	r6, r7
 800204e:	40ac      	lsls	r4, r5
 8002050:	4334      	orrs	r4, r6
 8002052:	464e      	mov	r6, r9
 8002054:	40ae      	lsls	r6, r5
 8002056:	0035      	movs	r5, r6
 8002058:	40fb      	lsrs	r3, r7
 800205a:	1e6e      	subs	r6, r5, #1
 800205c:	41b5      	sbcs	r5, r6
 800205e:	1ac9      	subs	r1, r1, r3
 8002060:	432c      	orrs	r4, r5
 8002062:	e04e      	b.n	8002102 <__aeabi_dsub+0x4d2>
 8002064:	464a      	mov	r2, r9
 8002066:	1a14      	subs	r4, r2, r0
 8002068:	45a1      	cmp	r9, r4
 800206a:	4192      	sbcs	r2, r2
 800206c:	4252      	negs	r2, r2
 800206e:	4690      	mov	r8, r2
 8002070:	1a5f      	subs	r7, r3, r1
 8002072:	003a      	movs	r2, r7
 8002074:	4647      	mov	r7, r8
 8002076:	1bd2      	subs	r2, r2, r7
 8002078:	4690      	mov	r8, r2
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	d500      	bpl.n	8002080 <__aeabi_dsub+0x450>
 800207e:	e08b      	b.n	8002198 <__aeabi_dsub+0x568>
 8002080:	4642      	mov	r2, r8
 8002082:	4322      	orrs	r2, r4
 8002084:	d000      	beq.n	8002088 <__aeabi_dsub+0x458>
 8002086:	e630      	b.n	8001cea <__aeabi_dsub+0xba>
 8002088:	2300      	movs	r3, #0
 800208a:	2500      	movs	r5, #0
 800208c:	e74d      	b.n	8001f2a <__aeabi_dsub+0x2fa>
 800208e:	464a      	mov	r2, r9
 8002090:	0759      	lsls	r1, r3, #29
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	430a      	orrs	r2, r1
 8002096:	08db      	lsrs	r3, r3, #3
 8002098:	e744      	b.n	8001f24 <__aeabi_dsub+0x2f4>
 800209a:	4642      	mov	r2, r8
 800209c:	4b9e      	ldr	r3, [pc, #632]	; (8002318 <__aeabi_dsub+0x6e8>)
 800209e:	0861      	lsrs	r1, r4, #1
 80020a0:	401a      	ands	r2, r3
 80020a2:	0013      	movs	r3, r2
 80020a4:	2201      	movs	r2, #1
 80020a6:	4014      	ands	r4, r2
 80020a8:	430c      	orrs	r4, r1
 80020aa:	07da      	lsls	r2, r3, #31
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	4698      	mov	r8, r3
 80020b0:	4314      	orrs	r4, r2
 80020b2:	e641      	b.n	8001d38 <__aeabi_dsub+0x108>
 80020b4:	001a      	movs	r2, r3
 80020b6:	3e1f      	subs	r6, #31
 80020b8:	40f2      	lsrs	r2, r6
 80020ba:	0016      	movs	r6, r2
 80020bc:	2920      	cmp	r1, #32
 80020be:	d003      	beq.n	80020c8 <__aeabi_dsub+0x498>
 80020c0:	2240      	movs	r2, #64	; 0x40
 80020c2:	1a51      	subs	r1, r2, r1
 80020c4:	408b      	lsls	r3, r1
 80020c6:	431c      	orrs	r4, r3
 80020c8:	1e62      	subs	r2, r4, #1
 80020ca:	4194      	sbcs	r4, r2
 80020cc:	2300      	movs	r3, #0
 80020ce:	4334      	orrs	r4, r6
 80020d0:	4698      	mov	r8, r3
 80020d2:	2600      	movs	r6, #0
 80020d4:	e71d      	b.n	8001f12 <__aeabi_dsub+0x2e2>
 80020d6:	000c      	movs	r4, r1
 80020d8:	3a20      	subs	r2, #32
 80020da:	40d4      	lsrs	r4, r2
 80020dc:	0022      	movs	r2, r4
 80020de:	4664      	mov	r4, ip
 80020e0:	2c20      	cmp	r4, #32
 80020e2:	d004      	beq.n	80020ee <__aeabi_dsub+0x4be>
 80020e4:	2740      	movs	r7, #64	; 0x40
 80020e6:	1b3f      	subs	r7, r7, r4
 80020e8:	40b9      	lsls	r1, r7
 80020ea:	4308      	orrs	r0, r1
 80020ec:	4680      	mov	r8, r0
 80020ee:	4644      	mov	r4, r8
 80020f0:	1e61      	subs	r1, r4, #1
 80020f2:	418c      	sbcs	r4, r1
 80020f4:	4322      	orrs	r2, r4
 80020f6:	e5e9      	b.n	8001ccc <__aeabi_dsub+0x9c>
 80020f8:	464c      	mov	r4, r9
 80020fa:	4323      	orrs	r3, r4
 80020fc:	001c      	movs	r4, r3
 80020fe:	1e63      	subs	r3, r4, #1
 8002100:	419c      	sbcs	r4, r3
 8002102:	1b04      	subs	r4, r0, r4
 8002104:	42a0      	cmp	r0, r4
 8002106:	419b      	sbcs	r3, r3
 8002108:	425b      	negs	r3, r3
 800210a:	1acb      	subs	r3, r1, r3
 800210c:	4698      	mov	r8, r3
 800210e:	465d      	mov	r5, fp
 8002110:	0016      	movs	r6, r2
 8002112:	e5e2      	b.n	8001cda <__aeabi_dsub+0xaa>
 8002114:	464e      	mov	r6, r9
 8002116:	431e      	orrs	r6, r3
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x4ec>
 800211a:	e0ae      	b.n	800227a <__aeabi_dsub+0x64a>
 800211c:	1e66      	subs	r6, r4, #1
 800211e:	2c01      	cmp	r4, #1
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x4f4>
 8002122:	e0fd      	b.n	8002320 <__aeabi_dsub+0x6f0>
 8002124:	4f7b      	ldr	r7, [pc, #492]	; (8002314 <__aeabi_dsub+0x6e4>)
 8002126:	42bc      	cmp	r4, r7
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x4fc>
 800212a:	e107      	b.n	800233c <__aeabi_dsub+0x70c>
 800212c:	46b4      	mov	ip, r6
 800212e:	e69b      	b.n	8001e68 <__aeabi_dsub+0x238>
 8002130:	4664      	mov	r4, ip
 8002132:	2220      	movs	r2, #32
 8002134:	1b12      	subs	r2, r2, r4
 8002136:	000c      	movs	r4, r1
 8002138:	4094      	lsls	r4, r2
 800213a:	0007      	movs	r7, r0
 800213c:	4090      	lsls	r0, r2
 800213e:	46a0      	mov	r8, r4
 8002140:	4664      	mov	r4, ip
 8002142:	1e42      	subs	r2, r0, #1
 8002144:	4190      	sbcs	r0, r2
 8002146:	4662      	mov	r2, ip
 8002148:	40e7      	lsrs	r7, r4
 800214a:	4644      	mov	r4, r8
 800214c:	40d1      	lsrs	r1, r2
 800214e:	433c      	orrs	r4, r7
 8002150:	4304      	orrs	r4, r0
 8002152:	185b      	adds	r3, r3, r1
 8002154:	e6f3      	b.n	8001f3e <__aeabi_dsub+0x30e>
 8002156:	4c6f      	ldr	r4, [pc, #444]	; (8002314 <__aeabi_dsub+0x6e4>)
 8002158:	42a2      	cmp	r2, r4
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x52e>
 800215c:	e0d5      	b.n	800230a <__aeabi_dsub+0x6da>
 800215e:	4448      	add	r0, r9
 8002160:	185b      	adds	r3, r3, r1
 8002162:	4548      	cmp	r0, r9
 8002164:	4189      	sbcs	r1, r1
 8002166:	4249      	negs	r1, r1
 8002168:	185b      	adds	r3, r3, r1
 800216a:	07dc      	lsls	r4, r3, #31
 800216c:	0840      	lsrs	r0, r0, #1
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	4698      	mov	r8, r3
 8002172:	0016      	movs	r6, r2
 8002174:	4304      	orrs	r4, r0
 8002176:	e6cc      	b.n	8001f12 <__aeabi_dsub+0x2e2>
 8002178:	2a00      	cmp	r2, #0
 800217a:	d000      	beq.n	800217e <__aeabi_dsub+0x54e>
 800217c:	e082      	b.n	8002284 <__aeabi_dsub+0x654>
 800217e:	000a      	movs	r2, r1
 8002180:	4302      	orrs	r2, r0
 8002182:	d140      	bne.n	8002206 <__aeabi_dsub+0x5d6>
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	2500      	movs	r5, #0
 8002188:	031b      	lsls	r3, r3, #12
 800218a:	e713      	b.n	8001fb4 <__aeabi_dsub+0x384>
 800218c:	074b      	lsls	r3, r1, #29
 800218e:	08c2      	lsrs	r2, r0, #3
 8002190:	431a      	orrs	r2, r3
 8002192:	465d      	mov	r5, fp
 8002194:	08cb      	lsrs	r3, r1, #3
 8002196:	e6c5      	b.n	8001f24 <__aeabi_dsub+0x2f4>
 8002198:	464a      	mov	r2, r9
 800219a:	1a84      	subs	r4, r0, r2
 800219c:	42a0      	cmp	r0, r4
 800219e:	4192      	sbcs	r2, r2
 80021a0:	1acb      	subs	r3, r1, r3
 80021a2:	4252      	negs	r2, r2
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	4698      	mov	r8, r3
 80021a8:	465d      	mov	r5, fp
 80021aa:	e59e      	b.n	8001cea <__aeabi_dsub+0xba>
 80021ac:	464a      	mov	r2, r9
 80021ae:	0759      	lsls	r1, r3, #29
 80021b0:	08d2      	lsrs	r2, r2, #3
 80021b2:	430a      	orrs	r2, r1
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	e6f9      	b.n	8001fac <__aeabi_dsub+0x37c>
 80021b8:	464a      	mov	r2, r9
 80021ba:	1a14      	subs	r4, r2, r0
 80021bc:	45a1      	cmp	r9, r4
 80021be:	4192      	sbcs	r2, r2
 80021c0:	1a5b      	subs	r3, r3, r1
 80021c2:	4252      	negs	r2, r2
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	4698      	mov	r8, r3
 80021c8:	2601      	movs	r6, #1
 80021ca:	e586      	b.n	8001cda <__aeabi_dsub+0xaa>
 80021cc:	464a      	mov	r2, r9
 80021ce:	0759      	lsls	r1, r3, #29
 80021d0:	08d2      	lsrs	r2, r2, #3
 80021d2:	430a      	orrs	r2, r1
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	e6a5      	b.n	8001f24 <__aeabi_dsub+0x2f4>
 80021d8:	464c      	mov	r4, r9
 80021da:	4323      	orrs	r3, r4
 80021dc:	001c      	movs	r4, r3
 80021de:	1e63      	subs	r3, r4, #1
 80021e0:	419c      	sbcs	r4, r3
 80021e2:	e65b      	b.n	8001e9c <__aeabi_dsub+0x26c>
 80021e4:	4665      	mov	r5, ip
 80021e6:	001e      	movs	r6, r3
 80021e8:	3d20      	subs	r5, #32
 80021ea:	40ee      	lsrs	r6, r5
 80021ec:	2c20      	cmp	r4, #32
 80021ee:	d005      	beq.n	80021fc <__aeabi_dsub+0x5cc>
 80021f0:	2540      	movs	r5, #64	; 0x40
 80021f2:	1b2d      	subs	r5, r5, r4
 80021f4:	40ab      	lsls	r3, r5
 80021f6:	464c      	mov	r4, r9
 80021f8:	431c      	orrs	r4, r3
 80021fa:	46a2      	mov	sl, r4
 80021fc:	4654      	mov	r4, sl
 80021fe:	1e63      	subs	r3, r4, #1
 8002200:	419c      	sbcs	r4, r3
 8002202:	4334      	orrs	r4, r6
 8002204:	e77d      	b.n	8002102 <__aeabi_dsub+0x4d2>
 8002206:	074b      	lsls	r3, r1, #29
 8002208:	08c2      	lsrs	r2, r0, #3
 800220a:	431a      	orrs	r2, r3
 800220c:	465d      	mov	r5, fp
 800220e:	08cb      	lsrs	r3, r1, #3
 8002210:	e6cc      	b.n	8001fac <__aeabi_dsub+0x37c>
 8002212:	000a      	movs	r2, r1
 8002214:	4302      	orrs	r2, r0
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x5ea>
 8002218:	e736      	b.n	8002088 <__aeabi_dsub+0x458>
 800221a:	074b      	lsls	r3, r1, #29
 800221c:	08c2      	lsrs	r2, r0, #3
 800221e:	431a      	orrs	r2, r3
 8002220:	465d      	mov	r5, fp
 8002222:	08cb      	lsrs	r3, r1, #3
 8002224:	e681      	b.n	8001f2a <__aeabi_dsub+0x2fa>
 8002226:	464a      	mov	r2, r9
 8002228:	1a84      	subs	r4, r0, r2
 800222a:	42a0      	cmp	r0, r4
 800222c:	4192      	sbcs	r2, r2
 800222e:	1acb      	subs	r3, r1, r3
 8002230:	4252      	negs	r2, r2
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	4698      	mov	r8, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e54e      	b.n	8001cda <__aeabi_dsub+0xaa>
 800223c:	074b      	lsls	r3, r1, #29
 800223e:	08c2      	lsrs	r2, r0, #3
 8002240:	431a      	orrs	r2, r3
 8002242:	08cb      	lsrs	r3, r1, #3
 8002244:	e6b2      	b.n	8001fac <__aeabi_dsub+0x37c>
 8002246:	464a      	mov	r2, r9
 8002248:	1a14      	subs	r4, r2, r0
 800224a:	45a1      	cmp	r9, r4
 800224c:	4192      	sbcs	r2, r2
 800224e:	1a5f      	subs	r7, r3, r1
 8002250:	4252      	negs	r2, r2
 8002252:	1aba      	subs	r2, r7, r2
 8002254:	4690      	mov	r8, r2
 8002256:	0212      	lsls	r2, r2, #8
 8002258:	d56b      	bpl.n	8002332 <__aeabi_dsub+0x702>
 800225a:	464a      	mov	r2, r9
 800225c:	1a84      	subs	r4, r0, r2
 800225e:	42a0      	cmp	r0, r4
 8002260:	4192      	sbcs	r2, r2
 8002262:	1acb      	subs	r3, r1, r3
 8002264:	4252      	negs	r2, r2
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	4698      	mov	r8, r3
 800226a:	465d      	mov	r5, fp
 800226c:	e564      	b.n	8001d38 <__aeabi_dsub+0x108>
 800226e:	074b      	lsls	r3, r1, #29
 8002270:	08c2      	lsrs	r2, r0, #3
 8002272:	431a      	orrs	r2, r3
 8002274:	465d      	mov	r5, fp
 8002276:	08cb      	lsrs	r3, r1, #3
 8002278:	e698      	b.n	8001fac <__aeabi_dsub+0x37c>
 800227a:	074b      	lsls	r3, r1, #29
 800227c:	08c2      	lsrs	r2, r0, #3
 800227e:	431a      	orrs	r2, r3
 8002280:	08cb      	lsrs	r3, r1, #3
 8002282:	e64f      	b.n	8001f24 <__aeabi_dsub+0x2f4>
 8002284:	000a      	movs	r2, r1
 8002286:	4302      	orrs	r2, r0
 8002288:	d090      	beq.n	80021ac <__aeabi_dsub+0x57c>
 800228a:	464a      	mov	r2, r9
 800228c:	075c      	lsls	r4, r3, #29
 800228e:	08d2      	lsrs	r2, r2, #3
 8002290:	4314      	orrs	r4, r2
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	0312      	lsls	r2, r2, #12
 8002298:	4213      	tst	r3, r2
 800229a:	d008      	beq.n	80022ae <__aeabi_dsub+0x67e>
 800229c:	08ce      	lsrs	r6, r1, #3
 800229e:	4216      	tst	r6, r2
 80022a0:	d105      	bne.n	80022ae <__aeabi_dsub+0x67e>
 80022a2:	08c0      	lsrs	r0, r0, #3
 80022a4:	0749      	lsls	r1, r1, #29
 80022a6:	4308      	orrs	r0, r1
 80022a8:	0004      	movs	r4, r0
 80022aa:	465d      	mov	r5, fp
 80022ac:	0033      	movs	r3, r6
 80022ae:	0f61      	lsrs	r1, r4, #29
 80022b0:	00e2      	lsls	r2, r4, #3
 80022b2:	0749      	lsls	r1, r1, #29
 80022b4:	08d2      	lsrs	r2, r2, #3
 80022b6:	430a      	orrs	r2, r1
 80022b8:	e678      	b.n	8001fac <__aeabi_dsub+0x37c>
 80022ba:	074b      	lsls	r3, r1, #29
 80022bc:	08c2      	lsrs	r2, r0, #3
 80022be:	431a      	orrs	r2, r3
 80022c0:	08cb      	lsrs	r3, r1, #3
 80022c2:	e632      	b.n	8001f2a <__aeabi_dsub+0x2fa>
 80022c4:	4448      	add	r0, r9
 80022c6:	185b      	adds	r3, r3, r1
 80022c8:	4548      	cmp	r0, r9
 80022ca:	4192      	sbcs	r2, r2
 80022cc:	4698      	mov	r8, r3
 80022ce:	4252      	negs	r2, r2
 80022d0:	4490      	add	r8, r2
 80022d2:	4643      	mov	r3, r8
 80022d4:	0004      	movs	r4, r0
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	d400      	bmi.n	80022dc <__aeabi_dsub+0x6ac>
 80022da:	e61a      	b.n	8001f12 <__aeabi_dsub+0x2e2>
 80022dc:	4642      	mov	r2, r8
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <__aeabi_dsub+0x6e8>)
 80022e0:	2601      	movs	r6, #1
 80022e2:	401a      	ands	r2, r3
 80022e4:	4690      	mov	r8, r2
 80022e6:	e614      	b.n	8001f12 <__aeabi_dsub+0x2e2>
 80022e8:	4666      	mov	r6, ip
 80022ea:	001f      	movs	r7, r3
 80022ec:	3e20      	subs	r6, #32
 80022ee:	40f7      	lsrs	r7, r6
 80022f0:	2c20      	cmp	r4, #32
 80022f2:	d005      	beq.n	8002300 <__aeabi_dsub+0x6d0>
 80022f4:	2640      	movs	r6, #64	; 0x40
 80022f6:	1b36      	subs	r6, r6, r4
 80022f8:	40b3      	lsls	r3, r6
 80022fa:	464c      	mov	r4, r9
 80022fc:	431c      	orrs	r4, r3
 80022fe:	46a2      	mov	sl, r4
 8002300:	4654      	mov	r4, sl
 8002302:	1e63      	subs	r3, r4, #1
 8002304:	419c      	sbcs	r4, r3
 8002306:	433c      	orrs	r4, r7
 8002308:	e5c8      	b.n	8001e9c <__aeabi_dsub+0x26c>
 800230a:	0011      	movs	r1, r2
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	e532      	b.n	8001d78 <__aeabi_dsub+0x148>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff
 8002318:	ff7fffff 	.word	0xff7fffff
 800231c:	000007fe 	.word	0x000007fe
 8002320:	464a      	mov	r2, r9
 8002322:	1814      	adds	r4, r2, r0
 8002324:	4284      	cmp	r4, r0
 8002326:	4192      	sbcs	r2, r2
 8002328:	185b      	adds	r3, r3, r1
 800232a:	4698      	mov	r8, r3
 800232c:	4252      	negs	r2, r2
 800232e:	4490      	add	r8, r2
 8002330:	e5e9      	b.n	8001f06 <__aeabi_dsub+0x2d6>
 8002332:	4642      	mov	r2, r8
 8002334:	4322      	orrs	r2, r4
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0x70a>
 8002338:	e6a6      	b.n	8002088 <__aeabi_dsub+0x458>
 800233a:	e5ea      	b.n	8001f12 <__aeabi_dsub+0x2e2>
 800233c:	074b      	lsls	r3, r1, #29
 800233e:	08c2      	lsrs	r2, r0, #3
 8002340:	431a      	orrs	r2, r3
 8002342:	08cb      	lsrs	r3, r1, #3
 8002344:	e632      	b.n	8001fac <__aeabi_dsub+0x37c>
 8002346:	2200      	movs	r2, #0
 8002348:	4901      	ldr	r1, [pc, #4]	; (8002350 <__aeabi_dsub+0x720>)
 800234a:	0013      	movs	r3, r2
 800234c:	e514      	b.n	8001d78 <__aeabi_dsub+0x148>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_dcmpun>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	0005      	movs	r5, r0
 8002358:	480c      	ldr	r0, [pc, #48]	; (800238c <__aeabi_dcmpun+0x38>)
 800235a:	030c      	lsls	r4, r1, #12
 800235c:	0016      	movs	r6, r2
 800235e:	0049      	lsls	r1, r1, #1
 8002360:	031a      	lsls	r2, r3, #12
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	0b24      	lsrs	r4, r4, #12
 8002366:	0d49      	lsrs	r1, r1, #21
 8002368:	0b12      	lsrs	r2, r2, #12
 800236a:	0d5b      	lsrs	r3, r3, #21
 800236c:	4281      	cmp	r1, r0
 800236e:	d008      	beq.n	8002382 <__aeabi_dcmpun+0x2e>
 8002370:	4906      	ldr	r1, [pc, #24]	; (800238c <__aeabi_dcmpun+0x38>)
 8002372:	2000      	movs	r0, #0
 8002374:	428b      	cmp	r3, r1
 8002376:	d103      	bne.n	8002380 <__aeabi_dcmpun+0x2c>
 8002378:	4332      	orrs	r2, r6
 800237a:	0010      	movs	r0, r2
 800237c:	1e42      	subs	r2, r0, #1
 800237e:	4190      	sbcs	r0, r2
 8002380:	bd70      	pop	{r4, r5, r6, pc}
 8002382:	2001      	movs	r0, #1
 8002384:	432c      	orrs	r4, r5
 8002386:	d1fb      	bne.n	8002380 <__aeabi_dcmpun+0x2c>
 8002388:	e7f2      	b.n	8002370 <__aeabi_dcmpun+0x1c>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	000007ff 	.word	0x000007ff

08002390 <__aeabi_i2d>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	2800      	cmp	r0, #0
 8002394:	d016      	beq.n	80023c4 <__aeabi_i2d+0x34>
 8002396:	17c3      	asrs	r3, r0, #31
 8002398:	18c5      	adds	r5, r0, r3
 800239a:	405d      	eors	r5, r3
 800239c:	0fc4      	lsrs	r4, r0, #31
 800239e:	0028      	movs	r0, r5
 80023a0:	f000 f84c 	bl	800243c <__clzsi2>
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <__aeabi_i2d+0x5c>)
 80023a6:	1a12      	subs	r2, r2, r0
 80023a8:	280a      	cmp	r0, #10
 80023aa:	dc16      	bgt.n	80023da <__aeabi_i2d+0x4a>
 80023ac:	0003      	movs	r3, r0
 80023ae:	002e      	movs	r6, r5
 80023b0:	3315      	adds	r3, #21
 80023b2:	409e      	lsls	r6, r3
 80023b4:	230b      	movs	r3, #11
 80023b6:	1a18      	subs	r0, r3, r0
 80023b8:	40c5      	lsrs	r5, r0
 80023ba:	0553      	lsls	r3, r2, #21
 80023bc:	032d      	lsls	r5, r5, #12
 80023be:	0b2d      	lsrs	r5, r5, #12
 80023c0:	0d5b      	lsrs	r3, r3, #21
 80023c2:	e003      	b.n	80023cc <__aeabi_i2d+0x3c>
 80023c4:	2400      	movs	r4, #0
 80023c6:	2300      	movs	r3, #0
 80023c8:	2500      	movs	r5, #0
 80023ca:	2600      	movs	r6, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	432b      	orrs	r3, r5
 80023d0:	07e4      	lsls	r4, r4, #31
 80023d2:	4323      	orrs	r3, r4
 80023d4:	0030      	movs	r0, r6
 80023d6:	0019      	movs	r1, r3
 80023d8:	bd70      	pop	{r4, r5, r6, pc}
 80023da:	380b      	subs	r0, #11
 80023dc:	4085      	lsls	r5, r0
 80023de:	0553      	lsls	r3, r2, #21
 80023e0:	032d      	lsls	r5, r5, #12
 80023e2:	2600      	movs	r6, #0
 80023e4:	0b2d      	lsrs	r5, r5, #12
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	e7f0      	b.n	80023cc <__aeabi_i2d+0x3c>
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	0000041e 	.word	0x0000041e

080023f0 <__aeabi_ui2d>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	1e04      	subs	r4, r0, #0
 80023f4:	d010      	beq.n	8002418 <__aeabi_ui2d+0x28>
 80023f6:	f000 f821 	bl	800243c <__clzsi2>
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <__aeabi_ui2d+0x48>)
 80023fc:	1a1b      	subs	r3, r3, r0
 80023fe:	280a      	cmp	r0, #10
 8002400:	dc11      	bgt.n	8002426 <__aeabi_ui2d+0x36>
 8002402:	220b      	movs	r2, #11
 8002404:	0021      	movs	r1, r4
 8002406:	1a12      	subs	r2, r2, r0
 8002408:	40d1      	lsrs	r1, r2
 800240a:	3015      	adds	r0, #21
 800240c:	030a      	lsls	r2, r1, #12
 800240e:	055b      	lsls	r3, r3, #21
 8002410:	4084      	lsls	r4, r0
 8002412:	0b12      	lsrs	r2, r2, #12
 8002414:	0d5b      	lsrs	r3, r3, #21
 8002416:	e001      	b.n	800241c <__aeabi_ui2d+0x2c>
 8002418:	2300      	movs	r3, #0
 800241a:	2200      	movs	r2, #0
 800241c:	051b      	lsls	r3, r3, #20
 800241e:	4313      	orrs	r3, r2
 8002420:	0020      	movs	r0, r4
 8002422:	0019      	movs	r1, r3
 8002424:	bd10      	pop	{r4, pc}
 8002426:	0022      	movs	r2, r4
 8002428:	380b      	subs	r0, #11
 800242a:	4082      	lsls	r2, r0
 800242c:	055b      	lsls	r3, r3, #21
 800242e:	0312      	lsls	r2, r2, #12
 8002430:	2400      	movs	r4, #0
 8002432:	0b12      	lsrs	r2, r2, #12
 8002434:	0d5b      	lsrs	r3, r3, #21
 8002436:	e7f1      	b.n	800241c <__aeabi_ui2d+0x2c>
 8002438:	0000041e 	.word	0x0000041e

0800243c <__clzsi2>:
 800243c:	211c      	movs	r1, #28
 800243e:	2301      	movs	r3, #1
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	4298      	cmp	r0, r3
 8002444:	d301      	bcc.n	800244a <__clzsi2+0xe>
 8002446:	0c00      	lsrs	r0, r0, #16
 8002448:	3910      	subs	r1, #16
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	4298      	cmp	r0, r3
 800244e:	d301      	bcc.n	8002454 <__clzsi2+0x18>
 8002450:	0a00      	lsrs	r0, r0, #8
 8002452:	3908      	subs	r1, #8
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	4298      	cmp	r0, r3
 8002458:	d301      	bcc.n	800245e <__clzsi2+0x22>
 800245a:	0900      	lsrs	r0, r0, #4
 800245c:	3904      	subs	r1, #4
 800245e:	a202      	add	r2, pc, #8	; (adr r2, 8002468 <__clzsi2+0x2c>)
 8002460:	5c10      	ldrb	r0, [r2, r0]
 8002462:	1840      	adds	r0, r0, r1
 8002464:	4770      	bx	lr
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	02020304 	.word	0x02020304
 800246c:	01010101 	.word	0x01010101
	...

08002478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800247c:	f000 fe1a 	bl	80030b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002480:	f000 f81c 	bl	80024bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002484:	f000 f8ec 	bl	8002660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002488:	f000 f8ba 	bl	8002600 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800248c:	f000 f878 	bl	8002580 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <main+0x3c>)
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f960 	bl	800275a <MPU6050_Init>
 800249a:	0003      	movs	r3, r0
 800249c:	2b01      	cmp	r3, #1
 800249e:	d0f8      	beq.n	8002492 <main+0x1a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    MPU6050_Read_All(&hi2c1, &MPU6050);
 80024a0:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <main+0x40>)
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <main+0x3c>)
 80024a4:	0011      	movs	r1, r2
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f9b6 	bl	8002818 <MPU6050_Read_All>
	HAL_Delay (100);
 80024ac:	2064      	movs	r0, #100	; 0x64
 80024ae:	f000 fe65 	bl	800317c <HAL_Delay>
    MPU6050_Read_All(&hi2c1, &MPU6050);
 80024b2:	e7f5      	b.n	80024a0 <main+0x28>
 80024b4:	20000128 	.word	0x20000128
 80024b8:	20000178 	.word	0x20000178

080024bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b097      	sub	sp, #92	; 0x5c
 80024c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c2:	2428      	movs	r4, #40	; 0x28
 80024c4:	193b      	adds	r3, r7, r4
 80024c6:	0018      	movs	r0, r3
 80024c8:	2330      	movs	r3, #48	; 0x30
 80024ca:	001a      	movs	r2, r3
 80024cc:	2100      	movs	r1, #0
 80024ce:	f002 ff83 	bl	80053d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d2:	2318      	movs	r3, #24
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	0018      	movs	r0, r3
 80024d8:	2310      	movs	r3, #16
 80024da:	001a      	movs	r2, r3
 80024dc:	2100      	movs	r1, #0
 80024de:	f002 ff7b 	bl	80053d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	0018      	movs	r0, r3
 80024e6:	2314      	movs	r3, #20
 80024e8:	001a      	movs	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f002 ff74 	bl	80053d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f0:	0021      	movs	r1, r4
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2202      	movs	r2, #2
 80024f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2201      	movs	r2, #1
 80024fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2210      	movs	r2, #16
 8002502:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2202      	movs	r2, #2
 8002508:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	0212      	lsls	r2, r2, #8
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	0352      	lsls	r2, r2, #13
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2200      	movs	r2, #0
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002520:	187b      	adds	r3, r7, r1
 8002522:	0018      	movs	r0, r3
 8002524:	f001 fe72 	bl	800420c <HAL_RCC_OscConfig>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d001      	beq.n	8002530 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800252c:	f000 f910 	bl	8002750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002530:	2118      	movs	r1, #24
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002538:	187b      	adds	r3, r7, r1
 800253a:	2202      	movs	r2, #2
 800253c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800253e:	187b      	adds	r3, r7, r1
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002544:	187b      	adds	r3, r7, r1
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2101      	movs	r1, #1
 800254e:	0018      	movs	r0, r3
 8002550:	f002 f97a 	bl	8004848 <HAL_RCC_ClockConfig>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002558:	f000 f8fa 	bl	8002750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2220      	movs	r2, #32
 8002560:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	0018      	movs	r0, r3
 800256c:	f002 fac0 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	1e03      	subs	r3, r0, #0
 8002572:	d001      	beq.n	8002578 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002574:	f000 f8ec 	bl	8002750 <Error_Handler>
  }
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b017      	add	sp, #92	; 0x5c
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <MX_I2C1_Init+0x74>)
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <MX_I2C1_Init+0x78>)
 8002588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <MX_I2C1_Init+0x74>)
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <MX_I2C1_Init+0x7c>)
 800258e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <MX_I2C1_Init+0x74>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <MX_I2C1_Init+0x74>)
 8002598:	2201      	movs	r2, #1
 800259a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <MX_I2C1_Init+0x74>)
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MX_I2C1_Init+0x74>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <MX_I2C1_Init+0x74>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_I2C1_Init+0x74>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_I2C1_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_I2C1_Init+0x74>)
 80025bc:	0018      	movs	r0, r3
 80025be:	f001 f843 	bl	8003648 <HAL_I2C_Init>
 80025c2:	1e03      	subs	r3, r0, #0
 80025c4:	d001      	beq.n	80025ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025c6:	f000 f8c3 	bl	8002750 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <MX_I2C1_Init+0x74>)
 80025cc:	2100      	movs	r1, #0
 80025ce:	0018      	movs	r0, r3
 80025d0:	f001 fd84 	bl	80040dc <HAL_I2CEx_ConfigAnalogFilter>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025d8:	f000 f8ba 	bl	8002750 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <MX_I2C1_Init+0x74>)
 80025de:	2100      	movs	r1, #0
 80025e0:	0018      	movs	r0, r3
 80025e2:	f001 fdc7 	bl	8004174 <HAL_I2CEx_ConfigDigitalFilter>
 80025e6:	1e03      	subs	r3, r0, #0
 80025e8:	d001      	beq.n	80025ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025ea:	f000 f8b1 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000128 	.word	0x20000128
 80025f8:	40005400 	.word	0x40005400
 80025fc:	0000020b 	.word	0x0000020b

08002600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <MX_USART2_UART_Init+0x58>)
 8002606:	4a15      	ldr	r2, [pc, #84]	; (800265c <MX_USART2_UART_Init+0x5c>)
 8002608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <MX_USART2_UART_Init+0x58>)
 800260c:	2296      	movs	r2, #150	; 0x96
 800260e:	0212      	lsls	r2, r2, #8
 8002610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <MX_USART2_UART_Init+0x58>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <MX_USART2_UART_Init+0x58>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_USART2_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <MX_USART2_UART_Init+0x58>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <MX_USART2_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <MX_USART2_UART_Init+0x58>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <MX_USART2_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <MX_USART2_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <MX_USART2_UART_Init+0x58>)
 8002644:	0018      	movs	r0, r3
 8002646:	f002 fb31 	bl	8004cac <HAL_UART_Init>
 800264a:	1e03      	subs	r3, r0, #0
 800264c:	d001      	beq.n	8002652 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800264e:	f000 f87f 	bl	8002750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200001d4 	.word	0x200001d4
 800265c:	40004400 	.word	0x40004400

08002660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b08b      	sub	sp, #44	; 0x2c
 8002664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002666:	2414      	movs	r4, #20
 8002668:	193b      	adds	r3, r7, r4
 800266a:	0018      	movs	r0, r3
 800266c:	2314      	movs	r3, #20
 800266e:	001a      	movs	r2, r3
 8002670:	2100      	movs	r1, #0
 8002672:	f002 feb1 	bl	80053d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002676:	4b34      	ldr	r3, [pc, #208]	; (8002748 <MX_GPIO_Init+0xe8>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <MX_GPIO_Init+0xe8>)
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	0309      	lsls	r1, r1, #12
 8002680:	430a      	orrs	r2, r1
 8002682:	615a      	str	r2, [r3, #20]
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <MX_GPIO_Init+0xe8>)
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	031b      	lsls	r3, r3, #12
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <MX_GPIO_Init+0xe8>)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <MX_GPIO_Init+0xe8>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	03c9      	lsls	r1, r1, #15
 800269c:	430a      	orrs	r2, r1
 800269e:	615a      	str	r2, [r3, #20]
 80026a0:	4b29      	ldr	r3, [pc, #164]	; (8002748 <MX_GPIO_Init+0xe8>)
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	03db      	lsls	r3, r3, #15
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <MX_GPIO_Init+0xe8>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	4b25      	ldr	r3, [pc, #148]	; (8002748 <MX_GPIO_Init+0xe8>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	0289      	lsls	r1, r1, #10
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <MX_GPIO_Init+0xe8>)
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <MX_GPIO_Init+0xe8>)
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <MX_GPIO_Init+0xe8>)
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	02c9      	lsls	r1, r1, #11
 80026d4:	430a      	orrs	r2, r1
 80026d6:	615a      	str	r2, [r3, #20]
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <MX_GPIO_Init+0xe8>)
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	02db      	lsls	r3, r3, #11
 80026e0:	4013      	ands	r3, r2
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026e6:	2390      	movs	r3, #144	; 0x90
 80026e8:	05db      	lsls	r3, r3, #23
 80026ea:	2200      	movs	r2, #0
 80026ec:	2120      	movs	r1, #32
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 ff8c 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	0192      	lsls	r2, r2, #6
 80026fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	2284      	movs	r2, #132	; 0x84
 8002700:	0392      	lsls	r2, r2, #14
 8002702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	193b      	adds	r3, r7, r4
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800270a:	193b      	adds	r3, r7, r4
 800270c:	4a0f      	ldr	r2, [pc, #60]	; (800274c <MX_GPIO_Init+0xec>)
 800270e:	0019      	movs	r1, r3
 8002710:	0010      	movs	r0, r2
 8002712:	f000 fe0b 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002716:	0021      	movs	r1, r4
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2220      	movs	r2, #32
 800271c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2201      	movs	r2, #1
 8002722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	187b      	adds	r3, r7, r1
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002730:	187a      	adds	r2, r7, r1
 8002732:	2390      	movs	r3, #144	; 0x90
 8002734:	05db      	lsls	r3, r3, #23
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f000 fdf7 	bl	800332c <HAL_GPIO_Init>

}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b00b      	add	sp, #44	; 0x2c
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	40021000 	.word	0x40021000
 800274c:	48000800 	.word	0x48000800

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002758:	e7fe      	b.n	8002758 <Error_Handler+0x8>

0800275a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800275a:	b590      	push	{r4, r7, lr}
 800275c:	b089      	sub	sp, #36	; 0x24
 800275e:	af04      	add	r7, sp, #16
 8002760:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002762:	2364      	movs	r3, #100	; 0x64
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	2301      	movs	r3, #1
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	240f      	movs	r4, #15
 800276e:	193b      	adds	r3, r7, r4
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	2275      	movs	r2, #117	; 0x75
 8002776:	21d0      	movs	r1, #208	; 0xd0
 8002778:	f001 f92a 	bl	80039d0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800277c:	193b      	adds	r3, r7, r4
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b68      	cmp	r3, #104	; 0x68
 8002782:	d144      	bne.n	800280e <MPU6050_Init+0xb4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002784:	210e      	movs	r1, #14
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	2301      	movs	r3, #1
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	000c      	movs	r4, r1
 8002798:	187b      	adds	r3, r7, r1
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	226b      	movs	r2, #107	; 0x6b
 80027a0:	21d0      	movs	r1, #208	; 0xd0
 80027a2:	f000 ffe7 	bl	8003774 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80027a6:	0021      	movs	r1, r4
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2207      	movs	r2, #7
 80027ac:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80027ae:	2364      	movs	r3, #100	; 0x64
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	2301      	movs	r3, #1
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	000c      	movs	r4, r1
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2301      	movs	r3, #1
 80027c0:	2219      	movs	r2, #25
 80027c2:	21d0      	movs	r1, #208	; 0xd0
 80027c4:	f000 ffd6 	bl	8003774 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80027c8:	0021      	movs	r1, r4
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80027d0:	2364      	movs	r3, #100	; 0x64
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	2301      	movs	r3, #1
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	000c      	movs	r4, r1
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	221c      	movs	r2, #28
 80027e4:	21d0      	movs	r1, #208	; 0xd0
 80027e6:	f000 ffc5 	bl	8003774 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80027ea:	0021      	movs	r1, r4
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80027f2:	2364      	movs	r3, #100	; 0x64
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	2301      	movs	r3, #1
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	187b      	adds	r3, r7, r1
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	221b      	movs	r2, #27
 8002804:	21d0      	movs	r1, #208	; 0xd0
 8002806:	f000 ffb5 	bl	8003774 <HAL_I2C_Mem_Write>
        return 0;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <MPU6050_Init+0xb6>
    }
    return 1;
 800280e:	2301      	movs	r3, #1
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b005      	add	sp, #20
 8002816:	bd90      	pop	{r4, r7, pc}

08002818 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	b099      	sub	sp, #100	; 0x64
 800281c:	af04      	add	r7, sp, #16
 800281e:	6178      	str	r0, [r7, #20]
 8002820:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002822:	2364      	movs	r3, #100	; 0x64
 8002824:	6978      	ldr	r0, [r7, #20]
 8002826:	9302      	str	r3, [sp, #8]
 8002828:	230e      	movs	r3, #14
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	2408      	movs	r4, #8
 800282e:	2510      	movs	r5, #16
 8002830:	197b      	adds	r3, r7, r5
 8002832:	191b      	adds	r3, r3, r4
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	223b      	movs	r2, #59	; 0x3b
 800283a:	21d0      	movs	r1, #208	; 0xd0
 800283c:	f001 f8c8 	bl	80039d0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002840:	0020      	movs	r0, r4
 8002842:	0029      	movs	r1, r5
 8002844:	187b      	adds	r3, r7, r1
 8002846:	181b      	adds	r3, r3, r0
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b21a      	sxth	r2, r3
 800284e:	187b      	adds	r3, r7, r1
 8002850:	181b      	adds	r3, r3, r0
 8002852:	785b      	ldrb	r3, [r3, #1]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21a      	sxth	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800285e:	187b      	adds	r3, r7, r1
 8002860:	181b      	adds	r3, r3, r0
 8002862:	789b      	ldrb	r3, [r3, #2]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	b21a      	sxth	r2, r3
 8002868:	187b      	adds	r3, r7, r1
 800286a:	181b      	adds	r3, r3, r0
 800286c:	78db      	ldrb	r3, [r3, #3]
 800286e:	b21b      	sxth	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b21a      	sxth	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002878:	187b      	adds	r3, r7, r1
 800287a:	181b      	adds	r3, r3, r0
 800287c:	791b      	ldrb	r3, [r3, #4]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b21a      	sxth	r2, r3
 8002882:	187b      	adds	r3, r7, r1
 8002884:	181b      	adds	r3, r3, r0
 8002886:	795b      	ldrb	r3, [r3, #5]
 8002888:	b21b      	sxth	r3, r3
 800288a:	4313      	orrs	r3, r2
 800288c:	b21a      	sxth	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002892:	000d      	movs	r5, r1
 8002894:	187b      	adds	r3, r7, r1
 8002896:	181b      	adds	r3, r3, r0
 8002898:	799b      	ldrb	r3, [r3, #6]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b219      	sxth	r1, r3
 800289e:	197b      	adds	r3, r7, r5
 80028a0:	181b      	adds	r3, r3, r0
 80028a2:	79db      	ldrb	r3, [r3, #7]
 80028a4:	b21a      	sxth	r2, r3
 80028a6:	2436      	movs	r4, #54	; 0x36
 80028a8:	197b      	adds	r3, r7, r5
 80028aa:	191b      	adds	r3, r3, r4
 80028ac:	430a      	orrs	r2, r1
 80028ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80028b0:	0001      	movs	r1, r0
 80028b2:	197b      	adds	r3, r7, r5
 80028b4:	185b      	adds	r3, r3, r1
 80028b6:	7a1b      	ldrb	r3, [r3, #8]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	197b      	adds	r3, r7, r5
 80028be:	185b      	adds	r3, r3, r1
 80028c0:	7a5b      	ldrb	r3, [r3, #9]
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80028cc:	197b      	adds	r3, r7, r5
 80028ce:	185b      	adds	r3, r3, r1
 80028d0:	7a9b      	ldrb	r3, [r3, #10]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	197b      	adds	r3, r7, r5
 80028d8:	185b      	adds	r3, r3, r1
 80028da:	7adb      	ldrb	r3, [r3, #11]
 80028dc:	b21b      	sxth	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80028e6:	197b      	adds	r3, r7, r5
 80028e8:	185b      	adds	r3, r3, r1
 80028ea:	7b1b      	ldrb	r3, [r3, #12]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	197b      	adds	r3, r7, r5
 80028f2:	185b      	adds	r3, r3, r1
 80028f4:	7b5b      	ldrb	r3, [r3, #13]
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2200      	movs	r2, #0
 8002904:	5e9b      	ldrsh	r3, [r3, r2]
 8002906:	0018      	movs	r0, r3
 8002908:	f7ff fd42 	bl	8002390 <__aeabi_i2d>
 800290c:	2200      	movs	r2, #0
 800290e:	4bac      	ldr	r3, [pc, #688]	; (8002bc0 <MPU6050_Read_All+0x3a8>)
 8002910:	f7fe fb1c 	bl	8000f4c <__aeabi_ddiv>
 8002914:	0002      	movs	r2, r0
 8002916:	000b      	movs	r3, r1
 8002918:	6939      	ldr	r1, [r7, #16]
 800291a:	608a      	str	r2, [r1, #8]
 800291c:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2202      	movs	r2, #2
 8002922:	5e9b      	ldrsh	r3, [r3, r2]
 8002924:	0018      	movs	r0, r3
 8002926:	f7ff fd33 	bl	8002390 <__aeabi_i2d>
 800292a:	2200      	movs	r2, #0
 800292c:	4ba4      	ldr	r3, [pc, #656]	; (8002bc0 <MPU6050_Read_All+0x3a8>)
 800292e:	f7fe fb0d 	bl	8000f4c <__aeabi_ddiv>
 8002932:	0002      	movs	r2, r0
 8002934:	000b      	movs	r3, r1
 8002936:	6939      	ldr	r1, [r7, #16]
 8002938:	610a      	str	r2, [r1, #16]
 800293a:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2204      	movs	r2, #4
 8002940:	5e9b      	ldrsh	r3, [r3, r2]
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff fd24 	bl	8002390 <__aeabi_i2d>
 8002948:	2200      	movs	r2, #0
 800294a:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <MPU6050_Read_All+0x3ac>)
 800294c:	f7fe fafe 	bl	8000f4c <__aeabi_ddiv>
 8002950:	0002      	movs	r2, r0
 8002952:	000b      	movs	r3, r1
 8002954:	6939      	ldr	r1, [r7, #16]
 8002956:	618a      	str	r2, [r1, #24]
 8002958:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800295a:	197b      	adds	r3, r7, r5
 800295c:	191b      	adds	r3, r3, r4
 800295e:	2200      	movs	r2, #0
 8002960:	5e9b      	ldrsh	r3, [r3, r2]
 8002962:	0018      	movs	r0, r3
 8002964:	f7fd ff42 	bl	80007ec <__aeabi_i2f>
 8002968:	1c03      	adds	r3, r0, #0
 800296a:	4997      	ldr	r1, [pc, #604]	; (8002bc8 <MPU6050_Read_All+0x3b0>)
 800296c:	1c18      	adds	r0, r3, #0
 800296e:	f7fd fe31 	bl	80005d4 <__aeabi_fdiv>
 8002972:	1c03      	adds	r3, r0, #0
 8002974:	4995      	ldr	r1, [pc, #596]	; (8002bcc <MPU6050_Read_All+0x3b4>)
 8002976:	1c18      	adds	r0, r3, #0
 8002978:	f7fd fc90 	bl	800029c <__aeabi_fadd>
 800297c:	1c03      	adds	r3, r0, #0
 800297e:	1c1a      	adds	r2, r3, #0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2220      	movs	r2, #32
 8002988:	5e9b      	ldrsh	r3, [r3, r2]
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff fd00 	bl	8002390 <__aeabi_i2d>
 8002990:	2200      	movs	r2, #0
 8002992:	4b8f      	ldr	r3, [pc, #572]	; (8002bd0 <MPU6050_Read_All+0x3b8>)
 8002994:	f7fe fada 	bl	8000f4c <__aeabi_ddiv>
 8002998:	0002      	movs	r2, r0
 800299a:	000b      	movs	r3, r1
 800299c:	6939      	ldr	r1, [r7, #16]
 800299e:	628a      	str	r2, [r1, #40]	; 0x28
 80029a0:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2222      	movs	r2, #34	; 0x22
 80029a6:	5e9b      	ldrsh	r3, [r3, r2]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff fcf1 	bl	8002390 <__aeabi_i2d>
 80029ae:	2200      	movs	r2, #0
 80029b0:	4b87      	ldr	r3, [pc, #540]	; (8002bd0 <MPU6050_Read_All+0x3b8>)
 80029b2:	f7fe facb 	bl	8000f4c <__aeabi_ddiv>
 80029b6:	0002      	movs	r2, r0
 80029b8:	000b      	movs	r3, r1
 80029ba:	6939      	ldr	r1, [r7, #16]
 80029bc:	630a      	str	r2, [r1, #48]	; 0x30
 80029be:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	5e9b      	ldrsh	r3, [r3, r2]
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7ff fce2 	bl	8002390 <__aeabi_i2d>
 80029cc:	2200      	movs	r2, #0
 80029ce:	4b80      	ldr	r3, [pc, #512]	; (8002bd0 <MPU6050_Read_All+0x3b8>)
 80029d0:	f7fe fabc 	bl	8000f4c <__aeabi_ddiv>
 80029d4:	0002      	movs	r2, r0
 80029d6:	000b      	movs	r3, r1
 80029d8:	6939      	ldr	r1, [r7, #16]
 80029da:	638a      	str	r2, [r1, #56]	; 0x38
 80029dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80029de:	f000 fbc3 	bl	8003168 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <MPU6050_Read_All+0x3bc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7ff fd00 	bl	80023f0 <__aeabi_ui2d>
 80029f0:	2200      	movs	r2, #0
 80029f2:	4b79      	ldr	r3, [pc, #484]	; (8002bd8 <MPU6050_Read_All+0x3c0>)
 80029f4:	f7fe faaa 	bl	8000f4c <__aeabi_ddiv>
 80029f8:	0002      	movs	r2, r0
 80029fa:	000b      	movs	r3, r1
 80029fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80029fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 8002a00:	f000 fbb2 	bl	8003168 <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <MPU6050_Read_All+0x3bc>)
 8002a08:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	5e9b      	ldrsh	r3, [r3, r2]
 8002a10:	001a      	movs	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2100      	movs	r1, #0
 8002a16:	5e5b      	ldrsh	r3, [r3, r1]
 8002a18:	435a      	muls	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	5e5b      	ldrsh	r3, [r3, r1]
 8002a20:	0019      	movs	r1, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2004      	movs	r0, #4
 8002a26:	5e1b      	ldrsh	r3, [r3, r0]
 8002a28:	434b      	muls	r3, r1
 8002a2a:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff fcaf 	bl	8002390 <__aeabi_i2d>
 8002a32:	0002      	movs	r2, r0
 8002a34:	000b      	movs	r3, r1
 8002a36:	0010      	movs	r0, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	f002 fe5d 	bl	80056f8 <sqrt>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	000b      	movs	r3, r1
 8002a42:	633a      	str	r2, [r7, #48]	; 0x30
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 8002a46:	2200      	movs	r2, #0
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a4e:	f7fd fbf7 	bl	8000240 <__aeabi_dcmpeq>
 8002a52:	1e03      	subs	r3, r0, #0
 8002a54:	d118      	bne.n	8002a88 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	5e9b      	ldrsh	r3, [r3, r2]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fc97 	bl	8002390 <__aeabi_i2d>
 8002a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	f7fe fa71 	bl	8000f4c <__aeabi_ddiv>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	000b      	movs	r3, r1
 8002a6e:	0010      	movs	r0, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	f002 fcb9 	bl	80053e8 <atan>
 8002a76:	4a59      	ldr	r2, [pc, #356]	; (8002bdc <MPU6050_Read_All+0x3c4>)
 8002a78:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <MPU6050_Read_All+0x3c8>)
 8002a7a:	f7fe fe6d 	bl	8001758 <__aeabi_dmul>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	000b      	movs	r3, r1
 8002a82:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a86:	e003      	b.n	8002a90 <MPU6050_Read_All+0x278>
    }
    else
    {
        roll = 0.0;
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2200      	movs	r2, #0
 8002a94:	5e9b      	ldrsh	r3, [r3, r2]
 8002a96:	425b      	negs	r3, r3
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff fc79 	bl	8002390 <__aeabi_i2d>
 8002a9e:	0004      	movs	r4, r0
 8002aa0:	000d      	movs	r5, r1
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	5e9b      	ldrsh	r3, [r3, r2]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fc71 	bl	8002390 <__aeabi_i2d>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	000b      	movs	r3, r1
 8002ab2:	0020      	movs	r0, r4
 8002ab4:	0029      	movs	r1, r5
 8002ab6:	f002 fe1a 	bl	80056ee <atan2>
 8002aba:	4a48      	ldr	r2, [pc, #288]	; (8002bdc <MPU6050_Read_All+0x3c4>)
 8002abc:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <MPU6050_Read_All+0x3c8>)
 8002abe:	f7fe fe4b 	bl	8001758 <__aeabi_dmul>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	000b      	movs	r3, r1
 8002ac6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002aca:	2200      	movs	r2, #0
 8002acc:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <MPU6050_Read_All+0x3cc>)
 8002ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ad2:	f7fd fbbb 	bl	800024c <__aeabi_dcmplt>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d008      	beq.n	8002aec <MPU6050_Read_All+0x2d4>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002ade:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <MPU6050_Read_All+0x3d0>)
 8002ae4:	f7fd fbc6 	bl	8000274 <__aeabi_dcmpgt>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d110      	bne.n	8002b0e <MPU6050_Read_All+0x2f6>
 8002aec:	2200      	movs	r2, #0
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <MPU6050_Read_All+0x3d0>)
 8002af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002af4:	f7fd fbbe 	bl	8000274 <__aeabi_dcmpgt>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d013      	beq.n	8002b24 <MPU6050_Read_All+0x30c>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b02:	2200      	movs	r2, #0
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <MPU6050_Read_All+0x3cc>)
 8002b06:	f7fd fba1 	bl	800024c <__aeabi_dcmplt>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d00a      	beq.n	8002b24 <MPU6050_Read_All+0x30c>
    {
        KalmanY.angle = pitch;
 8002b0e:	4937      	ldr	r1, [pc, #220]	; (8002bec <MPU6050_Read_All+0x3d4>)
 8002b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	618a      	str	r2, [r1, #24]
 8002b16:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 8002b18:	6939      	ldr	r1, [r7, #16]
 8002b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	650a      	str	r2, [r1, #80]	; 0x50
 8002b20:	654b      	str	r3, [r1, #84]	; 0x54
 8002b22:	e015      	b.n	8002b50 <MPU6050_Read_All+0x338>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002b2c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002b2e:	4e2f      	ldr	r6, [pc, #188]	; (8002bec <MPU6050_Read_All+0x3d4>)
 8002b30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b34:	9002      	str	r0, [sp, #8]
 8002b36:	9103      	str	r1, [sp, #12]
 8002b38:	9200      	str	r2, [sp, #0]
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	002b      	movs	r3, r5
 8002b40:	0030      	movs	r0, r6
 8002b42:	f000 f857 	bl	8002bf4 <Kalman_getAngle>
 8002b46:	0002      	movs	r2, r0
 8002b48:	000b      	movs	r3, r1
 8002b4a:	6939      	ldr	r1, [r7, #16]
 8002b4c:	650a      	str	r2, [r1, #80]	; 0x50
 8002b4e:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	0011      	movs	r1, r2
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <MPU6050_Read_All+0x3d0>)
 8002b64:	68b8      	ldr	r0, [r7, #8]
 8002b66:	68f9      	ldr	r1, [r7, #12]
 8002b68:	f7fd fb84 	bl	8000274 <__aeabi_dcmpgt>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d00d      	beq.n	8002b8c <MPU6050_Read_All+0x374>
        DataStruct->Gx = -DataStruct->Gx;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	0011      	movs	r1, r2
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0609      	lsls	r1, r1, #24
 8002b7e:	4059      	eors	r1, r3
 8002b80:	6079      	str	r1, [r7, #4]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6299      	str	r1, [r3, #40]	; 0x28
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002b94:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002b96:	4e16      	ldr	r6, [pc, #88]	; (8002bf0 <MPU6050_Read_All+0x3d8>)
 8002b98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b9c:	9002      	str	r0, [sp, #8]
 8002b9e:	9103      	str	r1, [sp, #12]
 8002ba0:	9200      	str	r2, [sp, #0]
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	0022      	movs	r2, r4
 8002ba6:	002b      	movs	r3, r5
 8002ba8:	0030      	movs	r0, r6
 8002baa:	f000 f823 	bl	8002bf4 <Kalman_getAngle>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	000b      	movs	r3, r1
 8002bb2:	6939      	ldr	r1, [r7, #16]
 8002bb4:	648a      	str	r2, [r1, #72]	; 0x48
 8002bb6:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b015      	add	sp, #84	; 0x54
 8002bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc0:	40d00000 	.word	0x40d00000
 8002bc4:	40cc2900 	.word	0x40cc2900
 8002bc8:	43aa0000 	.word	0x43aa0000
 8002bcc:	42121eb8 	.word	0x42121eb8
 8002bd0:	40606000 	.word	0x40606000
 8002bd4:	20000258 	.word	0x20000258
 8002bd8:	408f4000 	.word	0x408f4000
 8002bdc:	1a63c1f8 	.word	0x1a63c1f8
 8002be0:	404ca5dc 	.word	0x404ca5dc
 8002be4:	c0568000 	.word	0xc0568000
 8002be8:	40568000 	.word	0x40568000
 8002bec:	20000048 	.word	0x20000048
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf6:	b093      	sub	sp, #76	; 0x4c
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	603a      	str	r2, [r7, #0]
 8002bfe:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002c08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002c0a:	f7ff f811 	bl	8001c30 <__aeabi_dsub>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	000b      	movs	r3, r1
 8002c12:	643a      	str	r2, [r7, #64]	; 0x40
 8002c14:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699c      	ldr	r4, [r3, #24]
 8002c1a:	69dd      	ldr	r5, [r3, #28]
 8002c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002c22:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002c24:	f7fe fd98 	bl	8001758 <__aeabi_dmul>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	000b      	movs	r3, r1
 8002c2c:	0020      	movs	r0, r4
 8002c2e:	0029      	movs	r1, r5
 8002c30:	f7fd fe22 	bl	8000878 <__aeabi_dadd>
 8002c34:	0002      	movs	r2, r0
 8002c36:	000b      	movs	r3, r1
 8002c38:	68f9      	ldr	r1, [r7, #12]
 8002c3a:	618a      	str	r2, [r1, #24]
 8002c3c:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002c42:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002c48:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4e:	f7fe fd83 	bl	8001758 <__aeabi_dmul>
 8002c52:	0002      	movs	r2, r0
 8002c54:	000b      	movs	r3, r1
 8002c56:	0010      	movs	r0, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	f7fe ffe6 	bl	8001c30 <__aeabi_dsub>
 8002c64:	0002      	movs	r2, r0
 8002c66:	000b      	movs	r3, r1
 8002c68:	0010      	movs	r0, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	f7fe ffdd 	bl	8001c30 <__aeabi_dsub>
 8002c76:	0002      	movs	r2, r0
 8002c78:	000b      	movs	r3, r1
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f7fd fdf8 	bl	8000878 <__aeabi_dadd>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	000b      	movs	r3, r1
 8002c8c:	0010      	movs	r0, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c94:	f7fe fd60 	bl	8001758 <__aeabi_dmul>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	000b      	movs	r3, r1
 8002c9c:	0020      	movs	r0, r4
 8002c9e:	0029      	movs	r1, r5
 8002ca0:	f7fd fdea 	bl	8000878 <__aeabi_dadd>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	000b      	movs	r3, r1
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	628a      	str	r2, [r1, #40]	; 0x28
 8002cac:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002cb2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002cb8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002cba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	f7fe fd4b 	bl	8001758 <__aeabi_dmul>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	000b      	movs	r3, r1
 8002cc6:	0020      	movs	r0, r4
 8002cc8:	0029      	movs	r1, r5
 8002cca:	f7fe ffb1 	bl	8001c30 <__aeabi_dsub>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	000b      	movs	r3, r1
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	630a      	str	r2, [r1, #48]	; 0x30
 8002cd6:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002cdc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002ce2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ce4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce8:	f7fe fd36 	bl	8001758 <__aeabi_dmul>
 8002cec:	0002      	movs	r2, r0
 8002cee:	000b      	movs	r3, r1
 8002cf0:	0020      	movs	r0, r4
 8002cf2:	0029      	movs	r1, r5
 8002cf4:	f7fe ff9c 	bl	8001c30 <__aeabi_dsub>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	000b      	movs	r3, r1
 8002cfc:	68f9      	ldr	r1, [r7, #12]
 8002cfe:	638a      	str	r2, [r1, #56]	; 0x38
 8002d00:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002d06:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6898      	ldr	r0, [r3, #8]
 8002d0c:	68d9      	ldr	r1, [r3, #12]
 8002d0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d12:	f7fe fd21 	bl	8001758 <__aeabi_dmul>
 8002d16:	0002      	movs	r2, r0
 8002d18:	000b      	movs	r3, r1
 8002d1a:	0020      	movs	r0, r4
 8002d1c:	0029      	movs	r1, r5
 8002d1e:	f7fd fdab 	bl	8000878 <__aeabi_dadd>
 8002d22:	0002      	movs	r2, r0
 8002d24:	000b      	movs	r3, r1
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	640a      	str	r2, [r1, #64]	; 0x40
 8002d2a:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f7fd fd9e 	bl	8000878 <__aeabi_dadd>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	000b      	movs	r3, r1
 8002d40:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	f7fe f8fd 	bl	8000f4c <__aeabi_ddiv>
 8002d52:	0002      	movs	r2, r0
 8002d54:	000b      	movs	r3, r1
 8002d56:	2610      	movs	r6, #16
 8002d58:	19b9      	adds	r1, r7, r6
 8002d5a:	600a      	str	r2, [r1, #0]
 8002d5c:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d62:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	f7fe f8f0 	bl	8000f4c <__aeabi_ddiv>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	000b      	movs	r3, r1
 8002d70:	19b9      	adds	r1, r7, r6
 8002d72:	608a      	str	r2, [r1, #8]
 8002d74:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	f7fe ff56 	bl	8001c30 <__aeabi_dsub>
 8002d84:	0002      	movs	r2, r0
 8002d86:	000b      	movs	r3, r1
 8002d88:	633a      	str	r2, [r7, #48]	; 0x30
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	699c      	ldr	r4, [r3, #24]
 8002d90:	69dd      	ldr	r5, [r3, #28]
 8002d92:	19bb      	adds	r3, r7, r6
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	f7fe fcdc 	bl	8001758 <__aeabi_dmul>
 8002da0:	0002      	movs	r2, r0
 8002da2:	000b      	movs	r3, r1
 8002da4:	0020      	movs	r0, r4
 8002da6:	0029      	movs	r1, r5
 8002da8:	f7fd fd66 	bl	8000878 <__aeabi_dadd>
 8002dac:	0002      	movs	r2, r0
 8002dae:	000b      	movs	r3, r1
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	618a      	str	r2, [r1, #24]
 8002db4:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1c      	ldr	r4, [r3, #32]
 8002dba:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002dbc:	19bb      	adds	r3, r7, r6
 8002dbe:	6898      	ldr	r0, [r3, #8]
 8002dc0:	68d9      	ldr	r1, [r3, #12]
 8002dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc6:	f7fe fcc7 	bl	8001758 <__aeabi_dmul>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	000b      	movs	r3, r1
 8002dce:	0020      	movs	r0, r4
 8002dd0:	0029      	movs	r1, r5
 8002dd2:	f7fd fd51 	bl	8000878 <__aeabi_dadd>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	000b      	movs	r3, r1
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	620a      	str	r2, [r1, #32]
 8002dde:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	623a      	str	r2, [r7, #32]
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002df8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002dfa:	19bb      	adds	r3, r7, r6
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	f7fe fca8 	bl	8001758 <__aeabi_dmul>
 8002e08:	0002      	movs	r2, r0
 8002e0a:	000b      	movs	r3, r1
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	0029      	movs	r1, r5
 8002e10:	f7fe ff0e 	bl	8001c30 <__aeabi_dsub>
 8002e14:	0002      	movs	r2, r0
 8002e16:	000b      	movs	r3, r1
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	628a      	str	r2, [r1, #40]	; 0x28
 8002e1c:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002e22:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8002e24:	19bb      	adds	r3, r7, r6
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	6a3a      	ldr	r2, [r7, #32]
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f7fe fc93 	bl	8001758 <__aeabi_dmul>
 8002e32:	0002      	movs	r2, r0
 8002e34:	000b      	movs	r3, r1
 8002e36:	0020      	movs	r0, r4
 8002e38:	0029      	movs	r1, r5
 8002e3a:	f7fe fef9 	bl	8001c30 <__aeabi_dsub>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	000b      	movs	r3, r1
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	630a      	str	r2, [r1, #48]	; 0x30
 8002e46:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002e4c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8002e4e:	19bb      	adds	r3, r7, r6
 8002e50:	6898      	ldr	r0, [r3, #8]
 8002e52:	68d9      	ldr	r1, [r3, #12]
 8002e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	f7fe fc7e 	bl	8001758 <__aeabi_dmul>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	000b      	movs	r3, r1
 8002e60:	0020      	movs	r0, r4
 8002e62:	0029      	movs	r1, r5
 8002e64:	f7fe fee4 	bl	8001c30 <__aeabi_dsub>
 8002e68:	0002      	movs	r2, r0
 8002e6a:	000b      	movs	r3, r1
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	638a      	str	r2, [r1, #56]	; 0x38
 8002e70:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002e76:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8002e78:	19bb      	adds	r3, r7, r6
 8002e7a:	6898      	ldr	r0, [r3, #8]
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	6a3a      	ldr	r2, [r7, #32]
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f7fe fc69 	bl	8001758 <__aeabi_dmul>
 8002e86:	0002      	movs	r2, r0
 8002e88:	000b      	movs	r3, r1
 8002e8a:	0020      	movs	r0, r4
 8002e8c:	0029      	movs	r1, r5
 8002e8e:	f7fe fecf 	bl	8001c30 <__aeabi_dsub>
 8002e92:	0002      	movs	r2, r0
 8002e94:	000b      	movs	r3, r1
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	640a      	str	r2, [r1, #64]	; 0x40
 8002e9a:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	69db      	ldr	r3, [r3, #28]
};
 8002ea2:	0010      	movs	r0, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b013      	add	sp, #76	; 0x4c
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	619a      	str	r2, [r3, #24]
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_MspInit+0x44>)
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0549      	lsls	r1, r1, #21
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	61da      	str	r2, [r3, #28]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_MspInit+0x44>)
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	055b      	lsls	r3, r3, #21
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b002      	add	sp, #8
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b08b      	sub	sp, #44	; 0x2c
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	2414      	movs	r4, #20
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	0018      	movs	r0, r3
 8002f02:	2314      	movs	r3, #20
 8002f04:	001a      	movs	r2, r3
 8002f06:	2100      	movs	r1, #0
 8002f08:	f002 fa66 	bl	80053d8 <memset>
  if(hi2c->Instance==I2C1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_I2C_MspInit+0x90>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d132      	bne.n	8002f7c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_I2C_MspInit+0x94>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_I2C_MspInit+0x94>)
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	02c9      	lsls	r1, r1, #11
 8002f20:	430a      	orrs	r2, r1
 8002f22:	615a      	str	r2, [r3, #20]
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_I2C_MspInit+0x94>)
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	02db      	lsls	r3, r3, #11
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	22c0      	movs	r2, #192	; 0xc0
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3a:	0021      	movs	r1, r4
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	2212      	movs	r2, #18
 8002f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	2201      	movs	r2, #1
 8002f52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_I2C_MspInit+0x98>)
 8002f58:	0019      	movs	r1, r3
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	f000 f9e6 	bl	800332c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_I2C_MspInit+0x94>)
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_I2C_MspInit+0x94>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0389      	lsls	r1, r1, #14
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	61da      	str	r2, [r3, #28]
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_I2C_MspInit+0x94>)
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	039b      	lsls	r3, r3, #14
 8002f76:	4013      	ands	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b00b      	add	sp, #44	; 0x2c
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	40005400 	.word	0x40005400
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	48000400 	.word	0x48000400

08002f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b08b      	sub	sp, #44	; 0x2c
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	2414      	movs	r4, #20
 8002f9a:	193b      	adds	r3, r7, r4
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	2314      	movs	r3, #20
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	f002 fa18 	bl	80053d8 <memset>
  if(huart->Instance==USART2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_UART_MspInit+0x90>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d132      	bne.n	8003018 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <HAL_UART_MspInit+0x94>)
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_UART_MspInit+0x94>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0289      	lsls	r1, r1, #10
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	61da      	str	r2, [r3, #28]
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <HAL_UART_MspInit+0x94>)
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_UART_MspInit+0x94>)
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HAL_UART_MspInit+0x94>)
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	0289      	lsls	r1, r1, #10
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	615a      	str	r2, [r3, #20]
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_UART_MspInit+0x94>)
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	029b      	lsls	r3, r3, #10
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fea:	0021      	movs	r1, r4
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	220c      	movs	r2, #12
 8002ff0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	2203      	movs	r2, #3
 8003002:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003004:	187b      	adds	r3, r7, r1
 8003006:	2201      	movs	r2, #1
 8003008:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	187a      	adds	r2, r7, r1
 800300c:	2390      	movs	r3, #144	; 0x90
 800300e:	05db      	lsls	r3, r3, #23
 8003010:	0011      	movs	r1, r2
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f98a 	bl	800332c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46bd      	mov	sp, r7
 800301c:	b00b      	add	sp, #44	; 0x2c
 800301e:	bd90      	pop	{r4, r7, pc}
 8003020:	40004400 	.word	0x40004400
 8003024:	40021000 	.word	0x40021000

08003028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800302c:	e7fe      	b.n	800302c <NMI_Handler+0x4>

0800302e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003032:	e7fe      	b.n	8003032 <HardFault_Handler+0x4>

08003034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800304c:	f000 f87a 	bl	8003144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003062:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <LoopForever+0x6>)
  ldr r1, =_edata
 8003066:	490e      	ldr	r1, [pc, #56]	; (80030a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003068:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <LoopForever+0xe>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800306c:	e002      	b.n	8003074 <LoopCopyDataInit>

0800306e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003072:	3304      	adds	r3, #4

08003074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003078:	d3f9      	bcc.n	800306e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800307c:	4c0b      	ldr	r4, [pc, #44]	; (80030ac <LoopForever+0x16>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003080:	e001      	b.n	8003086 <LoopFillZerobss>

08003082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003084:	3204      	adds	r2, #4

08003086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003088:	d3fb      	bcc.n	8003082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800308a:	f7ff ffe4 	bl	8003056 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800308e:	f002 f97f 	bl	8005390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003092:	f7ff f9f1 	bl	8002478 <main>

08003096 <LoopForever>:

LoopForever:
    b LoopForever
 8003096:	e7fe      	b.n	8003096 <LoopForever>
  ldr   r0, =_estack
 8003098:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800309c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80030a4:	08005be0 	.word	0x08005be0
  ldr r2, =_sbss
 80030a8:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80030ac:	20000260 	.word	0x20000260

080030b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030b0:	e7fe      	b.n	80030b0 <ADC1_IRQHandler>
	...

080030b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <HAL_Init+0x24>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_Init+0x24>)
 80030be:	2110      	movs	r1, #16
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f000 f809 	bl	80030dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ca:	f7ff feef 	bl	8002eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40022000 	.word	0x40022000

080030dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_InitTick+0x5c>)
 80030e6:	681c      	ldr	r4, [r3, #0]
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_InitTick+0x60>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	0019      	movs	r1, r3
 80030ee:	23fa      	movs	r3, #250	; 0xfa
 80030f0:	0098      	lsls	r0, r3, #2
 80030f2:	f7fd f809 	bl	8000108 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	0019      	movs	r1, r3
 80030fa:	0020      	movs	r0, r4
 80030fc:	f7fd f804 	bl	8000108 <__udivsi3>
 8003100:	0003      	movs	r3, r0
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f905 	bl	8003312 <HAL_SYSTICK_Config>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d001      	beq.n	8003110 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e00f      	b.n	8003130 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d80b      	bhi.n	800312e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	2301      	movs	r3, #1
 800311a:	425b      	negs	r3, r3
 800311c:	2200      	movs	r2, #0
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f8e2 	bl	80032e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_InitTick+0x64>)
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b003      	add	sp, #12
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	20000090 	.word	0x20000090
 800313c:	20000098 	.word	0x20000098
 8003140:	20000094 	.word	0x20000094

08003144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_IncTick+0x1c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	001a      	movs	r2, r3
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_IncTick+0x20>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	18d2      	adds	r2, r2, r3
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_IncTick+0x20>)
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	20000098 	.word	0x20000098
 8003164:	2000025c 	.word	0x2000025c

08003168 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  return uwTick;
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <HAL_GetTick+0x10>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	2000025c 	.word	0x2000025c

0800317c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fff0 	bl	8003168 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3301      	adds	r3, #1
 8003194:	d005      	beq.n	80031a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_Delay+0x44>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	001a      	movs	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	f7ff ffe0 	bl	8003168 <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d8f7      	bhi.n	80031a4 <HAL_Delay+0x28>
  {
  }
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b004      	add	sp, #16
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	20000098 	.word	0x20000098

080031c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	0002      	movs	r2, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	1dfb      	adds	r3, r7, #7
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b7f      	cmp	r3, #127	; 0x7f
 80031d8:	d828      	bhi.n	800322c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031da:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <__NVIC_SetPriority+0xd4>)
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	33c0      	adds	r3, #192	; 0xc0
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	589b      	ldr	r3, [r3, r2]
 80031ea:	1dfa      	adds	r2, r7, #7
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	0011      	movs	r1, r2
 80031f0:	2203      	movs	r2, #3
 80031f2:	400a      	ands	r2, r1
 80031f4:	00d2      	lsls	r2, r2, #3
 80031f6:	21ff      	movs	r1, #255	; 0xff
 80031f8:	4091      	lsls	r1, r2
 80031fa:	000a      	movs	r2, r1
 80031fc:	43d2      	mvns	r2, r2
 80031fe:	401a      	ands	r2, r3
 8003200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	401a      	ands	r2, r3
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	0018      	movs	r0, r3
 8003210:	2303      	movs	r3, #3
 8003212:	4003      	ands	r3, r0
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003218:	481f      	ldr	r0, [pc, #124]	; (8003298 <__NVIC_SetPriority+0xd4>)
 800321a:	1dfb      	adds	r3, r7, #7
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b25b      	sxtb	r3, r3
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	430a      	orrs	r2, r1
 8003224:	33c0      	adds	r3, #192	; 0xc0
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800322a:	e031      	b.n	8003290 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <__NVIC_SetPriority+0xd8>)
 800322e:	1dfb      	adds	r3, r7, #7
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	0019      	movs	r1, r3
 8003234:	230f      	movs	r3, #15
 8003236:	400b      	ands	r3, r1
 8003238:	3b08      	subs	r3, #8
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3306      	adds	r3, #6
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	18d3      	adds	r3, r2, r3
 8003242:	3304      	adds	r3, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1dfa      	adds	r2, r7, #7
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	0011      	movs	r1, r2
 800324c:	2203      	movs	r2, #3
 800324e:	400a      	ands	r2, r1
 8003250:	00d2      	lsls	r2, r2, #3
 8003252:	21ff      	movs	r1, #255	; 0xff
 8003254:	4091      	lsls	r1, r2
 8003256:	000a      	movs	r2, r1
 8003258:	43d2      	mvns	r2, r2
 800325a:	401a      	ands	r2, r3
 800325c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	019b      	lsls	r3, r3, #6
 8003262:	22ff      	movs	r2, #255	; 0xff
 8003264:	401a      	ands	r2, r3
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	0018      	movs	r0, r3
 800326c:	2303      	movs	r3, #3
 800326e:	4003      	ands	r3, r0
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003274:	4809      	ldr	r0, [pc, #36]	; (800329c <__NVIC_SetPriority+0xd8>)
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	001c      	movs	r4, r3
 800327c:	230f      	movs	r3, #15
 800327e:	4023      	ands	r3, r4
 8003280:	3b08      	subs	r3, #8
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	430a      	orrs	r2, r1
 8003286:	3306      	adds	r3, #6
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	18c3      	adds	r3, r0, r3
 800328c:	3304      	adds	r3, #4
 800328e:	601a      	str	r2, [r3, #0]
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b003      	add	sp, #12
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	045b      	lsls	r3, r3, #17
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d301      	bcc.n	80032b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b4:	2301      	movs	r3, #1
 80032b6:	e010      	b.n	80032da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <SysTick_Config+0x44>)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	3a01      	subs	r2, #1
 80032be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c0:	2301      	movs	r3, #1
 80032c2:	425b      	negs	r3, r3
 80032c4:	2103      	movs	r1, #3
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ff7c 	bl	80031c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <SysTick_Config+0x44>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <SysTick_Config+0x44>)
 80032d4:	2207      	movs	r2, #7
 80032d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d8:	2300      	movs	r3, #0
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	e000e010 	.word	0xe000e010

080032e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	210f      	movs	r1, #15
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	1c02      	adds	r2, r0, #0
 80032f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b25b      	sxtb	r3, r3
 8003302:	0011      	movs	r1, r2
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff ff5d 	bl	80031c4 <__NVIC_SetPriority>
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b004      	add	sp, #16
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ffbf 	bl	80032a0 <SysTick_Config>
 8003322:	0003      	movs	r3, r0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333a:	e14f      	b.n	80035dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4091      	lsls	r1, r2
 8003346:	000a      	movs	r2, r1
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d100      	bne.n	8003354 <HAL_GPIO_Init+0x28>
 8003352:	e140      	b.n	80035d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	4013      	ands	r3, r2
 800335c:	2b01      	cmp	r3, #1
 800335e:	d005      	beq.n	800336c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2203      	movs	r2, #3
 8003366:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003368:	2b02      	cmp	r3, #2
 800336a:	d130      	bne.n	80033ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	409a      	lsls	r2, r3
 800337a:	0013      	movs	r3, r2
 800337c:	43da      	mvns	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	409a      	lsls	r2, r3
 800338e:	0013      	movs	r3, r2
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a2:	2201      	movs	r2, #1
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	409a      	lsls	r2, r3
 80033a8:	0013      	movs	r3, r2
 80033aa:	43da      	mvns	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	2201      	movs	r2, #1
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
 80033c0:	0013      	movs	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2203      	movs	r2, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d017      	beq.n	800340a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	409a      	lsls	r2, r3
 80033e8:	0013      	movs	r3, r2
 80033ea:	43da      	mvns	r2, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	0013      	movs	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2203      	movs	r2, #3
 8003410:	4013      	ands	r3, r2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d123      	bne.n	800345e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	58d3      	ldr	r3, [r2, r3]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2207      	movs	r2, #7
 8003428:	4013      	ands	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	409a      	lsls	r2, r3
 8003430:	0013      	movs	r3, r2
 8003432:	43da      	mvns	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2107      	movs	r1, #7
 8003442:	400b      	ands	r3, r1
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	409a      	lsls	r2, r3
 8003448:	0013      	movs	r3, r2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	08da      	lsrs	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3208      	adds	r2, #8
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	6939      	ldr	r1, [r7, #16]
 800345c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2203      	movs	r2, #3
 800346a:	409a      	lsls	r2, r3
 800346c:	0013      	movs	r3, r2
 800346e:	43da      	mvns	r2, r3
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2203      	movs	r2, #3
 800347c:	401a      	ands	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	0013      	movs	r3, r2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	23c0      	movs	r3, #192	; 0xc0
 8003498:	029b      	lsls	r3, r3, #10
 800349a:	4013      	ands	r3, r2
 800349c:	d100      	bne.n	80034a0 <HAL_GPIO_Init+0x174>
 800349e:	e09a      	b.n	80035d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a0:	4b54      	ldr	r3, [pc, #336]	; (80035f4 <HAL_GPIO_Init+0x2c8>)
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_GPIO_Init+0x2c8>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	430a      	orrs	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
 80034ac:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_GPIO_Init+0x2c8>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2201      	movs	r2, #1
 80034b2:	4013      	ands	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034b8:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <HAL_GPIO_Init+0x2cc>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	3302      	adds	r3, #2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	589b      	ldr	r3, [r3, r2]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2203      	movs	r2, #3
 80034ca:	4013      	ands	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	220f      	movs	r2, #15
 80034d0:	409a      	lsls	r2, r3
 80034d2:	0013      	movs	r3, r2
 80034d4:	43da      	mvns	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	2390      	movs	r3, #144	; 0x90
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d013      	beq.n	800350e <HAL_GPIO_Init+0x1e2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a44      	ldr	r2, [pc, #272]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00d      	beq.n	800350a <HAL_GPIO_Init+0x1de>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a43      	ldr	r2, [pc, #268]	; (8003600 <HAL_GPIO_Init+0x2d4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <HAL_GPIO_Init+0x1da>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_GPIO_Init+0x2d8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_GPIO_Init+0x1d6>
 80034fe:	2303      	movs	r3, #3
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x1e4>
 8003502:	2305      	movs	r3, #5
 8003504:	e004      	b.n	8003510 <HAL_GPIO_Init+0x1e4>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_Init+0x1e4>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_Init+0x1e4>
 800350e:	2300      	movs	r3, #0
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	2103      	movs	r1, #3
 8003514:	400a      	ands	r2, r1
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003520:	4935      	ldr	r1, [pc, #212]	; (80035f8 <HAL_GPIO_Init+0x2cc>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43da      	mvns	r2, r3
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	4013      	ands	r3, r2
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003552:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43da      	mvns	r2, r3
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	4013      	ands	r3, r2
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43da      	mvns	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	035b      	lsls	r3, r3, #13
 800359a:	4013      	ands	r3, r2
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035a6:	4b18      	ldr	r3, [pc, #96]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43da      	mvns	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	039b      	lsls	r3, r3, #14
 80035c4:	4013      	ands	r3, r2
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_GPIO_Init+0x2dc>)
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	40da      	lsrs	r2, r3
 80035e4:	1e13      	subs	r3, r2, #0
 80035e6:	d000      	beq.n	80035ea <HAL_GPIO_Init+0x2be>
 80035e8:	e6a8      	b.n	800333c <HAL_GPIO_Init+0x10>
  } 
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b006      	add	sp, #24
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40010000 	.word	0x40010000
 80035fc:	48000400 	.word	0x48000400
 8003600:	48000800 	.word	0x48000800
 8003604:	48000c00 	.word	0x48000c00
 8003608:	40010400 	.word	0x40010400

0800360c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	0008      	movs	r0, r1
 8003616:	0011      	movs	r1, r2
 8003618:	1cbb      	adds	r3, r7, #2
 800361a:	1c02      	adds	r2, r0, #0
 800361c:	801a      	strh	r2, [r3, #0]
 800361e:	1c7b      	adds	r3, r7, #1
 8003620:	1c0a      	adds	r2, r1, #0
 8003622:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003624:	1c7b      	adds	r3, r7, #1
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800362c:	1cbb      	adds	r3, r7, #2
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003634:	e003      	b.n	800363e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003636:	1cbb      	adds	r3, r7, #2
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b002      	add	sp, #8
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e082      	b.n	8003760 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2241      	movs	r2, #65	; 0x41
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d107      	bne.n	8003676 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2240      	movs	r2, #64	; 0x40
 800366a:	2100      	movs	r1, #0
 800366c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	0018      	movs	r0, r3
 8003672:	f7ff fc3f 	bl	8002ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2241      	movs	r2, #65	; 0x41
 800367a:	2124      	movs	r1, #36	; 0x24
 800367c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	438a      	bics	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4934      	ldr	r1, [pc, #208]	; (8003768 <HAL_I2C_Init+0x120>)
 8003698:	400a      	ands	r2, r1
 800369a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4931      	ldr	r1, [pc, #196]	; (800376c <HAL_I2C_Init+0x124>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d108      	bne.n	80036c6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	0209      	lsls	r1, r1, #8
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e007      	b.n	80036d6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2184      	movs	r1, #132	; 0x84
 80036d0:	0209      	lsls	r1, r1, #8
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d104      	bne.n	80036e8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	491f      	ldr	r1, [pc, #124]	; (8003770 <HAL_I2C_Init+0x128>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	491a      	ldr	r1, [pc, #104]	; (800376c <HAL_I2C_Init+0x124>)
 8003704:	400a      	ands	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	431a      	orrs	r2, r3
 8003712:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69d9      	ldr	r1, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2241      	movs	r2, #65	; 0x41
 800374c:	2120      	movs	r1, #32
 800374e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2242      	movs	r2, #66	; 0x42
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}
 8003768:	f0ffffff 	.word	0xf0ffffff
 800376c:	ffff7fff 	.word	0xffff7fff
 8003770:	02008000 	.word	0x02008000

08003774 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	000c      	movs	r4, r1
 800377e:	0010      	movs	r0, r2
 8003780:	0019      	movs	r1, r3
 8003782:	230a      	movs	r3, #10
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	1c22      	adds	r2, r4, #0
 8003788:	801a      	strh	r2, [r3, #0]
 800378a:	2308      	movs	r3, #8
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	1c02      	adds	r2, r0, #0
 8003790:	801a      	strh	r2, [r3, #0]
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	1c0a      	adds	r2, r1, #0
 8003796:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2241      	movs	r2, #65	; 0x41
 800379c:	5c9b      	ldrb	r3, [r3, r2]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d000      	beq.n	80037a6 <HAL_I2C_Mem_Write+0x32>
 80037a4:	e10c      	b.n	80039c0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_I2C_Mem_Write+0x42>
 80037ac:	232c      	movs	r3, #44	; 0x2c
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e0ff      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	5c9b      	ldrb	r3, [r3, r2]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_I2C_Mem_Write+0x5c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0f8      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	2101      	movs	r1, #1
 80037d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037d8:	f7ff fcc6 	bl	8003168 <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	0219      	lsls	r1, r3, #8
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2319      	movs	r3, #25
 80037ec:	2201      	movs	r2, #1
 80037ee:	f000 fb0b 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e0e3      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2241      	movs	r2, #65	; 0x41
 80037fe:	2121      	movs	r1, #33	; 0x21
 8003800:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2242      	movs	r2, #66	; 0x42
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	222c      	movs	r2, #44	; 0x2c
 800381a:	18ba      	adds	r2, r7, r2
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003826:	1dbb      	adds	r3, r7, #6
 8003828:	881c      	ldrh	r4, [r3, #0]
 800382a:	2308      	movs	r3, #8
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	881a      	ldrh	r2, [r3, #0]
 8003830:	230a      	movs	r3, #10
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	8819      	ldrh	r1, [r3, #0]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	0023      	movs	r3, r4
 8003842:	f000 f9f9 	bl	8003c38 <I2C_RequestMemoryWrite>
 8003846:	1e03      	subs	r3, r0, #0
 8003848:	d005      	beq.n	8003856 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	2100      	movs	r1, #0
 8003850:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0b5      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2bff      	cmp	r3, #255	; 0xff
 800385e:	d911      	bls.n	8003884 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	b2da      	uxtb	r2, r3
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	045c      	lsls	r4, r3, #17
 8003870:	230a      	movs	r3, #10
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	8819      	ldrh	r1, [r3, #0]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	0023      	movs	r3, r4
 800387e:	f000 fbf7 	bl	8004070 <I2C_TransferConfig>
 8003882:	e012      	b.n	80038aa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	b2da      	uxtb	r2, r3
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	049c      	lsls	r4, r3, #18
 8003898:	230a      	movs	r3, #10
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	8819      	ldrh	r1, [r3, #0]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	2300      	movs	r3, #0
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	0023      	movs	r3, r4
 80038a6:	f000 fbe3 	bl	8004070 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 fae8 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e081      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03a      	beq.n	800396e <HAL_I2C_Mem_Write+0x1fa>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d136      	bne.n	800396e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	0013      	movs	r3, r2
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	f000 fa7b 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e053      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2bff      	cmp	r3, #255	; 0xff
 8003922:	d911      	bls.n	8003948 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	b2da      	uxtb	r2, r3
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	045c      	lsls	r4, r3, #17
 8003934:	230a      	movs	r3, #10
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	8819      	ldrh	r1, [r3, #0]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	2300      	movs	r3, #0
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	0023      	movs	r3, r4
 8003942:	f000 fb95 	bl	8004070 <I2C_TransferConfig>
 8003946:	e012      	b.n	800396e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	b2da      	uxtb	r2, r3
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	049c      	lsls	r4, r3, #18
 800395c:	230a      	movs	r3, #10
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	8819      	ldrh	r1, [r3, #0]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	2300      	movs	r3, #0
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	0023      	movs	r3, r4
 800396a:	f000 fb81 	bl	8004070 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d198      	bne.n	80038aa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	0018      	movs	r0, r3
 8003980:	f000 fac0 	bl	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e01a      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2220      	movs	r2, #32
 8003992:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	490b      	ldr	r1, [pc, #44]	; (80039cc <HAL_I2C_Mem_Write+0x258>)
 80039a0:	400a      	ands	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2241      	movs	r2, #65	; 0x41
 80039a8:	2120      	movs	r1, #32
 80039aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2242      	movs	r2, #66	; 0x42
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	2100      	movs	r1, #0
 80039ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b007      	add	sp, #28
 80039c8:	bd90      	pop	{r4, r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	fe00e800 	.word	0xfe00e800

080039d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	000c      	movs	r4, r1
 80039da:	0010      	movs	r0, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	230a      	movs	r3, #10
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	1c22      	adds	r2, r4, #0
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	2308      	movs	r3, #8
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	1c02      	adds	r2, r0, #0
 80039ec:	801a      	strh	r2, [r3, #0]
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1c0a      	adds	r2, r1, #0
 80039f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2241      	movs	r2, #65	; 0x41
 80039f8:	5c9b      	ldrb	r3, [r3, r2]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d000      	beq.n	8003a02 <HAL_I2C_Mem_Read+0x32>
 8003a00:	e110      	b.n	8003c24 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <HAL_I2C_Mem_Read+0x42>
 8003a08:	232c      	movs	r3, #44	; 0x2c
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e103      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2240      	movs	r2, #64	; 0x40
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_I2C_Mem_Read+0x5c>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0fc      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	2101      	movs	r1, #1
 8003a32:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a34:	f7ff fb98 	bl	8003168 <HAL_GetTick>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	0219      	lsls	r1, r3, #8
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2319      	movs	r3, #25
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f000 f9dd 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	1e03      	subs	r3, r0, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0e7      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2241      	movs	r2, #65	; 0x41
 8003a5a:	2122      	movs	r1, #34	; 0x22
 8003a5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2242      	movs	r2, #66	; 0x42
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	222c      	movs	r2, #44	; 0x2c
 8003a76:	18ba      	adds	r2, r7, r2
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a82:	1dbb      	adds	r3, r7, #6
 8003a84:	881c      	ldrh	r4, [r3, #0]
 8003a86:	2308      	movs	r3, #8
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	230a      	movs	r3, #10
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	8819      	ldrh	r1, [r3, #0]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	0023      	movs	r3, r4
 8003a9e:	f000 f92f 	bl	8003d00 <I2C_RequestMemoryRead>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2240      	movs	r2, #64	; 0x40
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0b9      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2bff      	cmp	r3, #255	; 0xff
 8003aba:	d911      	bls.n	8003ae0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	045c      	lsls	r4, r3, #17
 8003acc:	230a      	movs	r3, #10
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	8819      	ldrh	r1, [r3, #0]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	4b56      	ldr	r3, [pc, #344]	; (8003c30 <HAL_I2C_Mem_Read+0x260>)
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	0023      	movs	r3, r4
 8003ada:	f000 fac9 	bl	8004070 <I2C_TransferConfig>
 8003ade:	e012      	b.n	8003b06 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	049c      	lsls	r4, r3, #18
 8003af4:	230a      	movs	r3, #10
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	8819      	ldrh	r1, [r3, #0]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	4b4c      	ldr	r3, [pc, #304]	; (8003c30 <HAL_I2C_Mem_Read+0x260>)
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	0023      	movs	r3, r4
 8003b02:	f000 fab5 	bl	8004070 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	0013      	movs	r3, r2
 8003b10:	2200      	movs	r2, #0
 8003b12:	2104      	movs	r1, #4
 8003b14:	f000 f978 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e082      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d03a      	beq.n	8003bd2 <HAL_I2C_Mem_Read+0x202>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d136      	bne.n	8003bd2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	f000 f949 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e053      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2bff      	cmp	r3, #255	; 0xff
 8003b86:	d911      	bls.n	8003bac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	22ff      	movs	r2, #255	; 0xff
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	045c      	lsls	r4, r3, #17
 8003b98:	230a      	movs	r3, #10
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	8819      	ldrh	r1, [r3, #0]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	0023      	movs	r3, r4
 8003ba6:	f000 fa63 	bl	8004070 <I2C_TransferConfig>
 8003baa:	e012      	b.n	8003bd2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	049c      	lsls	r4, r3, #18
 8003bc0:	230a      	movs	r3, #10
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	8819      	ldrh	r1, [r3, #0]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	0023      	movs	r3, r4
 8003bce:	f000 fa4f 	bl	8004070 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d194      	bne.n	8003b06 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 f98e 	bl	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e01a      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	490c      	ldr	r1, [pc, #48]	; (8003c34 <HAL_I2C_Mem_Read+0x264>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2241      	movs	r2, #65	; 0x41
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2242      	movs	r2, #66	; 0x42
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2240      	movs	r2, #64	; 0x40
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b007      	add	sp, #28
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	80002400 	.word	0x80002400
 8003c34:	fe00e800 	.word	0xfe00e800

08003c38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c38:	b5b0      	push	{r4, r5, r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	000c      	movs	r4, r1
 8003c42:	0010      	movs	r0, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	250a      	movs	r5, #10
 8003c48:	197b      	adds	r3, r7, r5
 8003c4a:	1c22      	adds	r2, r4, #0
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	2308      	movs	r3, #8
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	1c02      	adds	r2, r0, #0
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	1dbb      	adds	r3, r7, #6
 8003c58:	1c0a      	adds	r2, r1, #0
 8003c5a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	045c      	lsls	r4, r3, #17
 8003c66:	197b      	adds	r3, r7, r5
 8003c68:	8819      	ldrh	r1, [r3, #0]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <I2C_RequestMemoryWrite+0xc4>)
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	0023      	movs	r3, r4
 8003c72:	f000 f9fd 	bl	8004070 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	6a39      	ldr	r1, [r7, #32]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 f902 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e033      	b.n	8003cf2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c92:	2308      	movs	r3, #8
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca0:	e019      	b.n	8003cd6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	6a39      	ldr	r1, [r7, #32]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 f8e3 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc0:	1e03      	subs	r3, r0, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e014      	b.n	8003cf2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc8:	2308      	movs	r3, #8
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd6:	6a3a      	ldr	r2, [r7, #32]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	0013      	movs	r3, r2
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	f000 f890 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003ce8:	1e03      	subs	r3, r0, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	80002000 	.word	0x80002000

08003d00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	000c      	movs	r4, r1
 8003d0a:	0010      	movs	r0, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	250a      	movs	r5, #10
 8003d10:	197b      	adds	r3, r7, r5
 8003d12:	1c22      	adds	r2, r4, #0
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	2308      	movs	r3, #8
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	1c02      	adds	r2, r0, #0
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	1dbb      	adds	r3, r7, #6
 8003d20:	1c0a      	adds	r2, r1, #0
 8003d22:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d24:	1dbb      	adds	r3, r7, #6
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	197b      	adds	r3, r7, r5
 8003d2c:	8819      	ldrh	r1, [r3, #0]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <I2C_RequestMemoryRead+0xc0>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2300      	movs	r3, #0
 8003d36:	f000 f99b 	bl	8004070 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 f8a0 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e033      	b.n	8003db6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d56:	2308      	movs	r3, #8
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
 8003d64:	e019      	b.n	8003d9a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d66:	2308      	movs	r3, #8
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 f881 	bl	8003e86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d84:	1e03      	subs	r3, r0, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e014      	b.n	8003db6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	0013      	movs	r3, r2
 8003da4:	2200      	movs	r2, #0
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	f000 f82e 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	80002000 	.word	0x80002000

08003dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d103      	bne.n	8003de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2201      	movs	r2, #1
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]
  }
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e18:	e021      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	d01e      	beq.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7ff f9a2 	bl	8003168 <HAL_GetTick>
 8003e24:	0002      	movs	r2, r0
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d113      	bne.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2241      	movs	r2, #65	; 0x41
 8003e46:	2120      	movs	r1, #32
 8003e48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2242      	movs	r2, #66	; 0x42
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2240      	movs	r2, #64	; 0x40
 8003e56:	2100      	movs	r1, #0
 8003e58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00f      	b.n	8003e7e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	425a      	negs	r2, r3
 8003e6e:	4153      	adcs	r3, r2
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	001a      	movs	r2, r3
 8003e74:	1dfb      	adds	r3, r7, #7
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d0ce      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e92:	e02b      	b.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 f86e 	bl	8003f7c <I2C_IsAcknowledgeFailed>
 8003ea0:	1e03      	subs	r3, r0, #0
 8003ea2:	d001      	beq.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e029      	b.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	d01e      	beq.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7ff f95b 	bl	8003168 <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d113      	bne.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	2220      	movs	r2, #32
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2241      	movs	r2, #65	; 0x41
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2242      	movs	r2, #66	; 0x42
 8003edc:	2100      	movs	r1, #0
 8003ede:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d1cc      	bne.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b004      	add	sp, #16
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f10:	e028      	b.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 f82f 	bl	8003f7c <I2C_IsAcknowledgeFailed>
 8003f1e:	1e03      	subs	r3, r0, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e026      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7ff f91f 	bl	8003168 <HAL_GetTick>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d113      	bne.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	2220      	movs	r2, #32
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2241      	movs	r2, #65	; 0x41
 8003f4c:	2120      	movs	r1, #32
 8003f4e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2242      	movs	r2, #66	; 0x42
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2240      	movs	r2, #64	; 0x40
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e007      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d1cf      	bne.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b004      	add	sp, #16
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d164      	bne.n	8004060 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	049b      	lsls	r3, r3, #18
 8003fa0:	401a      	ands	r2, r3
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	049b      	lsls	r3, r3, #18
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d02b      	beq.n	8004002 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	01c9      	lsls	r1, r1, #7
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fbc:	e021      	b.n	8004002 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	d01e      	beq.n	8004002 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7ff f8d0 	bl	8003168 <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_IsAcknowledgeFailed+0x5e>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	2220      	movs	r2, #32
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2241      	movs	r2, #65	; 0x41
 8003fea:	2120      	movs	r1, #32
 8003fec:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2242      	movs	r2, #66	; 0x42
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2240      	movs	r2, #64	; 0x40
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e02f      	b.n	8004062 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2220      	movs	r2, #32
 800400a:	4013      	ands	r3, r2
 800400c:	2b20      	cmp	r3, #32
 800400e:	d1d6      	bne.n	8003fbe <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2220      	movs	r2, #32
 800401e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fece 	bl	8003dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	490e      	ldr	r1, [pc, #56]	; (800406c <I2C_IsAcknowledgeFailed+0xf0>)
 8004034:	400a      	ands	r2, r1
 8004036:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	2204      	movs	r2, #4
 800403e:	431a      	orrs	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2241      	movs	r2, #65	; 0x41
 8004048:	2120      	movs	r1, #32
 800404a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2242      	movs	r2, #66	; 0x42
 8004050:	2100      	movs	r1, #0
 8004052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2240      	movs	r2, #64	; 0x40
 8004058:	2100      	movs	r1, #0
 800405a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	fe00e800 	.word	0xfe00e800

08004070 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	0008      	movs	r0, r1
 800407a:	0011      	movs	r1, r2
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	240a      	movs	r4, #10
 8004080:	193b      	adds	r3, r7, r4
 8004082:	1c02      	adds	r2, r0, #0
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	2009      	movs	r0, #9
 8004088:	183b      	adds	r3, r7, r0
 800408a:	1c0a      	adds	r2, r1, #0
 800408c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	0d51      	lsrs	r1, r2, #21
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	00d2      	lsls	r2, r2, #3
 800409c:	400a      	ands	r2, r1
 800409e:	490e      	ldr	r1, [pc, #56]	; (80040d8 <I2C_TransferConfig+0x68>)
 80040a0:	430a      	orrs	r2, r1
 80040a2:	43d2      	mvns	r2, r2
 80040a4:	401a      	ands	r2, r3
 80040a6:	0011      	movs	r1, r2
 80040a8:	193b      	adds	r3, r7, r4
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	059b      	lsls	r3, r3, #22
 80040ae:	0d9a      	lsrs	r2, r3, #22
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	0418      	lsls	r0, r3, #16
 80040b6:	23ff      	movs	r3, #255	; 0xff
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	4003      	ands	r3, r0
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b005      	add	sp, #20
 80040d4:	bd90      	pop	{r4, r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	03ff63ff 	.word	0x03ff63ff

080040dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2241      	movs	r2, #65	; 0x41
 80040ea:	5c9b      	ldrb	r3, [r3, r2]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d138      	bne.n	8004164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	5c9b      	ldrb	r3, [r3, r2]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e032      	b.n	8004166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	2101      	movs	r1, #1
 8004106:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2241      	movs	r2, #65	; 0x41
 800410c:	2124      	movs	r1, #36	; 0x24
 800410e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2101      	movs	r1, #1
 800411c:	438a      	bics	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4911      	ldr	r1, [pc, #68]	; (8004170 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800412c:	400a      	ands	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6819      	ldr	r1, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2101      	movs	r1, #1
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2241      	movs	r2, #65	; 0x41
 8004154:	2120      	movs	r1, #32
 8004156:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2240      	movs	r2, #64	; 0x40
 800415c:	2100      	movs	r1, #0
 800415e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	e000      	b.n	8004166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004164:	2302      	movs	r3, #2
  }
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b002      	add	sp, #8
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	ffffefff 	.word	0xffffefff

08004174 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2241      	movs	r2, #65	; 0x41
 8004182:	5c9b      	ldrb	r3, [r3, r2]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d139      	bne.n	80041fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2240      	movs	r2, #64	; 0x40
 800418e:	5c9b      	ldrb	r3, [r3, r2]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004194:	2302      	movs	r3, #2
 8004196:	e033      	b.n	8004200 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2240      	movs	r2, #64	; 0x40
 800419c:	2101      	movs	r1, #1
 800419e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2241      	movs	r2, #65	; 0x41
 80041a4:	2124      	movs	r1, #36	; 0x24
 80041a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2101      	movs	r1, #1
 80041b4:	438a      	bics	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a11      	ldr	r2, [pc, #68]	; (8004208 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2101      	movs	r1, #1
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2241      	movs	r2, #65	; 0x41
 80041ee:	2120      	movs	r1, #32
 80041f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2240      	movs	r2, #64	; 0x40
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}
 8004208:	fffff0ff 	.word	0xfffff0ff

0800420c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e305      	b.n	800482a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	4013      	ands	r3, r2
 8004226:	d100      	bne.n	800422a <HAL_RCC_OscConfig+0x1e>
 8004228:	e08d      	b.n	8004346 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800422a:	4bc5      	ldr	r3, [pc, #788]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	220c      	movs	r2, #12
 8004230:	4013      	ands	r3, r2
 8004232:	2b04      	cmp	r3, #4
 8004234:	d00e      	beq.n	8004254 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004236:	4bc2      	ldr	r3, [pc, #776]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	220c      	movs	r2, #12
 800423c:	4013      	ands	r3, r2
 800423e:	2b08      	cmp	r3, #8
 8004240:	d116      	bne.n	8004270 <HAL_RCC_OscConfig+0x64>
 8004242:	4bbf      	ldr	r3, [pc, #764]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	23c0      	movs	r3, #192	; 0xc0
 8004248:	025b      	lsls	r3, r3, #9
 800424a:	401a      	ands	r2, r3
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	025b      	lsls	r3, r3, #9
 8004250:	429a      	cmp	r2, r3
 8004252:	d10d      	bne.n	8004270 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	4bba      	ldr	r3, [pc, #744]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	029b      	lsls	r3, r3, #10
 800425c:	4013      	ands	r3, r2
 800425e:	d100      	bne.n	8004262 <HAL_RCC_OscConfig+0x56>
 8004260:	e070      	b.n	8004344 <HAL_RCC_OscConfig+0x138>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d000      	beq.n	800426c <HAL_RCC_OscConfig+0x60>
 800426a:	e06b      	b.n	8004344 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e2dc      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d107      	bne.n	8004288 <HAL_RCC_OscConfig+0x7c>
 8004278:	4bb1      	ldr	r3, [pc, #708]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4bb0      	ldr	r3, [pc, #704]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	0249      	lsls	r1, r1, #9
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e02f      	b.n	80042e8 <HAL_RCC_OscConfig+0xdc>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10c      	bne.n	80042aa <HAL_RCC_OscConfig+0x9e>
 8004290:	4bab      	ldr	r3, [pc, #684]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4baa      	ldr	r3, [pc, #680]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004296:	49ab      	ldr	r1, [pc, #684]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 8004298:	400a      	ands	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	4ba8      	ldr	r3, [pc, #672]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4ba7      	ldr	r3, [pc, #668]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042a2:	49a9      	ldr	r1, [pc, #676]	; (8004548 <HAL_RCC_OscConfig+0x33c>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e01e      	b.n	80042e8 <HAL_RCC_OscConfig+0xdc>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d10e      	bne.n	80042d0 <HAL_RCC_OscConfig+0xc4>
 80042b2:	4ba3      	ldr	r3, [pc, #652]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4ba2      	ldr	r3, [pc, #648]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	02c9      	lsls	r1, r1, #11
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	4b9f      	ldr	r3, [pc, #636]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b9e      	ldr	r3, [pc, #632]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	0249      	lsls	r1, r1, #9
 80042ca:	430a      	orrs	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xdc>
 80042d0:	4b9b      	ldr	r3, [pc, #620]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b9a      	ldr	r3, [pc, #616]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042d6:	499b      	ldr	r1, [pc, #620]	; (8004544 <HAL_RCC_OscConfig+0x338>)
 80042d8:	400a      	ands	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	4b98      	ldr	r3, [pc, #608]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b97      	ldr	r3, [pc, #604]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80042e2:	4999      	ldr	r1, [pc, #612]	; (8004548 <HAL_RCC_OscConfig+0x33c>)
 80042e4:	400a      	ands	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d014      	beq.n	800431a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe ff3a 	bl	8003168 <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042fa:	f7fe ff35 	bl	8003168 <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b64      	cmp	r3, #100	; 0x64
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e28e      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430c:	4b8c      	ldr	r3, [pc, #560]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	029b      	lsls	r3, r3, #10
 8004314:	4013      	ands	r3, r2
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0xee>
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fe ff25 	bl	8003168 <HAL_GetTick>
 800431e:	0003      	movs	r3, r0
 8004320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004324:	f7fe ff20 	bl	8003168 <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	; 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e279      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	029b      	lsls	r3, r3, #10
 800433e:	4013      	ands	r3, r2
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x118>
 8004342:	e000      	b.n	8004346 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2202      	movs	r2, #2
 800434c:	4013      	ands	r3, r2
 800434e:	d100      	bne.n	8004352 <HAL_RCC_OscConfig+0x146>
 8004350:	e06c      	b.n	800442c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004352:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	220c      	movs	r2, #12
 8004358:	4013      	ands	r3, r2
 800435a:	d00e      	beq.n	800437a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800435c:	4b78      	ldr	r3, [pc, #480]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	220c      	movs	r2, #12
 8004362:	4013      	ands	r3, r2
 8004364:	2b08      	cmp	r3, #8
 8004366:	d11f      	bne.n	80043a8 <HAL_RCC_OscConfig+0x19c>
 8004368:	4b75      	ldr	r3, [pc, #468]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	23c0      	movs	r3, #192	; 0xc0
 800436e:	025b      	lsls	r3, r3, #9
 8004370:	401a      	ands	r2, r3
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	429a      	cmp	r2, r3
 8004378:	d116      	bne.n	80043a8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	4b71      	ldr	r3, [pc, #452]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2202      	movs	r2, #2
 8004380:	4013      	ands	r3, r2
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x184>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e24c      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004390:	4b6b      	ldr	r3, [pc, #428]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	22f8      	movs	r2, #248	; 0xf8
 8004396:	4393      	bics	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00da      	lsls	r2, r3, #3
 80043a0:	4b67      	ldr	r3, [pc, #412]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80043a2:	430a      	orrs	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a6:	e041      	b.n	800442c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d024      	beq.n	80043fa <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b0:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b62      	ldr	r3, [pc, #392]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fed4 	bl	8003168 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fe fecf 	bl	8003168 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e228      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2202      	movs	r2, #2
 80043de:	4013      	ands	r3, r2
 80043e0:	d0f1      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b57      	ldr	r3, [pc, #348]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	22f8      	movs	r2, #248	; 0xf8
 80043e8:	4393      	bics	r3, r2
 80043ea:	0019      	movs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	00da      	lsls	r2, r3, #3
 80043f2:	4b53      	ldr	r3, [pc, #332]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e018      	b.n	800442c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b50      	ldr	r3, [pc, #320]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004400:	2101      	movs	r1, #1
 8004402:	438a      	bics	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fe feaf 	bl	8003168 <HAL_GetTick>
 800440a:	0003      	movs	r3, r0
 800440c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004410:	f7fe feaa 	bl	8003168 <HAL_GetTick>
 8004414:	0002      	movs	r2, r0
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e203      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2202      	movs	r2, #2
 8004428:	4013      	ands	r3, r2
 800442a:	d1f1      	bne.n	8004410 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2208      	movs	r2, #8
 8004432:	4013      	ands	r3, r2
 8004434:	d036      	beq.n	80044a4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d019      	beq.n	8004472 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443e:	4b40      	ldr	r3, [pc, #256]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004442:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444a:	f7fe fe8d 	bl	8003168 <HAL_GetTick>
 800444e:	0003      	movs	r3, r0
 8004450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004454:	f7fe fe88 	bl	8003168 <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1e1      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2202      	movs	r2, #2
 800446c:	4013      	ands	r3, r2
 800446e:	d0f1      	beq.n	8004454 <HAL_RCC_OscConfig+0x248>
 8004470:	e018      	b.n	80044a4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004472:	4b33      	ldr	r3, [pc, #204]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004476:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004478:	2101      	movs	r1, #1
 800447a:	438a      	bics	r2, r1
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7fe fe73 	bl	8003168 <HAL_GetTick>
 8004482:	0003      	movs	r3, r0
 8004484:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004488:	f7fe fe6e 	bl	8003168 <HAL_GetTick>
 800448c:	0002      	movs	r2, r0
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1c7      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2202      	movs	r2, #2
 80044a0:	4013      	ands	r3, r2
 80044a2:	d1f1      	bne.n	8004488 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2204      	movs	r2, #4
 80044aa:	4013      	ands	r3, r2
 80044ac:	d100      	bne.n	80044b0 <HAL_RCC_OscConfig+0x2a4>
 80044ae:	e0b5      	b.n	800461c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b0:	201f      	movs	r0, #31
 80044b2:	183b      	adds	r3, r7, r0
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b8:	4b21      	ldr	r3, [pc, #132]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	055b      	lsls	r3, r3, #21
 80044c0:	4013      	ands	r3, r2
 80044c2:	d110      	bne.n	80044e6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	0549      	lsls	r1, r1, #21
 80044ce:	430a      	orrs	r2, r1
 80044d0:	61da      	str	r2, [r3, #28]
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	055b      	lsls	r3, r3, #21
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_OscConfig+0x340>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4013      	ands	r3, r2
 80044f0:	d11a      	bne.n	8004528 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCC_OscConfig+0x340>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <HAL_RCC_OscConfig+0x340>)
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	0049      	lsls	r1, r1, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004500:	f7fe fe32 	bl	8003168 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450a:	f7fe fe2d 	bl	8003168 <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e186      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_OscConfig+0x340>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4013      	ands	r3, r2
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10f      	bne.n	8004550 <HAL_RCC_OscConfig+0x344>
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <HAL_RCC_OscConfig+0x334>)
 8004536:	2101      	movs	r1, #1
 8004538:	430a      	orrs	r2, r1
 800453a:	621a      	str	r2, [r3, #32]
 800453c:	e036      	b.n	80045ac <HAL_RCC_OscConfig+0x3a0>
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	40021000 	.word	0x40021000
 8004544:	fffeffff 	.word	0xfffeffff
 8004548:	fffbffff 	.word	0xfffbffff
 800454c:	40007000 	.word	0x40007000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10c      	bne.n	8004572 <HAL_RCC_OscConfig+0x366>
 8004558:	4bb6      	ldr	r3, [pc, #728]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	4bb5      	ldr	r3, [pc, #724]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800455e:	2101      	movs	r1, #1
 8004560:	438a      	bics	r2, r1
 8004562:	621a      	str	r2, [r3, #32]
 8004564:	4bb3      	ldr	r3, [pc, #716]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004566:	6a1a      	ldr	r2, [r3, #32]
 8004568:	4bb2      	ldr	r3, [pc, #712]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800456a:	2104      	movs	r1, #4
 800456c:	438a      	bics	r2, r1
 800456e:	621a      	str	r2, [r3, #32]
 8004570:	e01c      	b.n	80045ac <HAL_RCC_OscConfig+0x3a0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b05      	cmp	r3, #5
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0x388>
 800457a:	4bae      	ldr	r3, [pc, #696]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	4bad      	ldr	r3, [pc, #692]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004580:	2104      	movs	r1, #4
 8004582:	430a      	orrs	r2, r1
 8004584:	621a      	str	r2, [r3, #32]
 8004586:	4bab      	ldr	r3, [pc, #684]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004588:	6a1a      	ldr	r2, [r3, #32]
 800458a:	4baa      	ldr	r3, [pc, #680]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800458c:	2101      	movs	r1, #1
 800458e:	430a      	orrs	r2, r1
 8004590:	621a      	str	r2, [r3, #32]
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0x3a0>
 8004594:	4ba7      	ldr	r3, [pc, #668]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	4ba6      	ldr	r3, [pc, #664]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800459a:	2101      	movs	r1, #1
 800459c:	438a      	bics	r2, r1
 800459e:	621a      	str	r2, [r3, #32]
 80045a0:	4ba4      	ldr	r3, [pc, #656]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	4ba3      	ldr	r3, [pc, #652]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80045a6:	2104      	movs	r1, #4
 80045a8:	438a      	bics	r2, r1
 80045aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d014      	beq.n	80045de <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b4:	f7fe fdd8 	bl	8003168 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	e009      	b.n	80045d2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fe fdd3 	bl	8003168 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	4a9b      	ldr	r2, [pc, #620]	; (8004838 <HAL_RCC_OscConfig+0x62c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e12b      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	4b98      	ldr	r3, [pc, #608]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	2202      	movs	r2, #2
 80045d8:	4013      	ands	r3, r2
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x3b2>
 80045dc:	e013      	b.n	8004606 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fe fdc3 	bl	8003168 <HAL_GetTick>
 80045e2:	0003      	movs	r3, r0
 80045e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e6:	e009      	b.n	80045fc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe fdbe 	bl	8003168 <HAL_GetTick>
 80045ec:	0002      	movs	r2, r0
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	4a91      	ldr	r2, [pc, #580]	; (8004838 <HAL_RCC_OscConfig+0x62c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e116      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	2202      	movs	r2, #2
 8004602:	4013      	ands	r3, r2
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004606:	231f      	movs	r3, #31
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b88      	ldr	r3, [pc, #544]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	4b87      	ldr	r3, [pc, #540]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004616:	4989      	ldr	r1, [pc, #548]	; (800483c <HAL_RCC_OscConfig+0x630>)
 8004618:	400a      	ands	r2, r1
 800461a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2210      	movs	r2, #16
 8004622:	4013      	ands	r3, r2
 8004624:	d063      	beq.n	80046ee <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d12a      	bne.n	8004684 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800462e:	4b81      	ldr	r3, [pc, #516]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004632:	4b80      	ldr	r3, [pc, #512]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004634:	2104      	movs	r1, #4
 8004636:	430a      	orrs	r2, r1
 8004638:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800463a:	4b7e      	ldr	r3, [pc, #504]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800463c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463e:	4b7d      	ldr	r3, [pc, #500]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004640:	2101      	movs	r1, #1
 8004642:	430a      	orrs	r2, r1
 8004644:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004646:	f7fe fd8f 	bl	8003168 <HAL_GetTick>
 800464a:	0003      	movs	r3, r0
 800464c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004650:	f7fe fd8a 	bl	8003168 <HAL_GetTick>
 8004654:	0002      	movs	r2, r0
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0e3      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004662:	4b74      	ldr	r3, [pc, #464]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d0f1      	beq.n	8004650 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800466c:	4b71      	ldr	r3, [pc, #452]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	22f8      	movs	r2, #248	; 0xf8
 8004672:	4393      	bics	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	4b6d      	ldr	r3, [pc, #436]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800467e:	430a      	orrs	r2, r1
 8004680:	635a      	str	r2, [r3, #52]	; 0x34
 8004682:	e034      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	3305      	adds	r3, #5
 800468a:	d111      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800468c:	4b69      	ldr	r3, [pc, #420]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	4b68      	ldr	r3, [pc, #416]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004692:	2104      	movs	r1, #4
 8004694:	438a      	bics	r2, r1
 8004696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004698:	4b66      	ldr	r3, [pc, #408]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	22f8      	movs	r2, #248	; 0xf8
 800469e:	4393      	bics	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	00da      	lsls	r2, r3, #3
 80046a8:	4b62      	ldr	r3, [pc, #392]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046aa:	430a      	orrs	r2, r1
 80046ac:	635a      	str	r2, [r3, #52]	; 0x34
 80046ae:	e01e      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80046b0:	4b60      	ldr	r3, [pc, #384]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b4:	4b5f      	ldr	r3, [pc, #380]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046b6:	2104      	movs	r1, #4
 80046b8:	430a      	orrs	r2, r1
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80046bc:	4b5d      	ldr	r3, [pc, #372]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c0:	4b5c      	ldr	r3, [pc, #368]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046c2:	2101      	movs	r1, #1
 80046c4:	438a      	bics	r2, r1
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c8:	f7fe fd4e 	bl	8003168 <HAL_GetTick>
 80046cc:	0003      	movs	r3, r0
 80046ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046d2:	f7fe fd49 	bl	8003168 <HAL_GetTick>
 80046d6:	0002      	movs	r2, r0
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0a2      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046e4:	4b53      	ldr	r3, [pc, #332]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e8:	2202      	movs	r2, #2
 80046ea:	4013      	ands	r3, r2
 80046ec:	d1f1      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d100      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4ec>
 80046f6:	e097      	b.n	8004828 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f8:	4b4e      	ldr	r3, [pc, #312]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	220c      	movs	r2, #12
 80046fe:	4013      	ands	r3, r2
 8004700:	2b08      	cmp	r3, #8
 8004702:	d100      	bne.n	8004706 <HAL_RCC_OscConfig+0x4fa>
 8004704:	e06b      	b.n	80047de <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d14c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b49      	ldr	r3, [pc, #292]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b48      	ldr	r3, [pc, #288]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004714:	494a      	ldr	r1, [pc, #296]	; (8004840 <HAL_RCC_OscConfig+0x634>)
 8004716:	400a      	ands	r2, r1
 8004718:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471a:	f7fe fd25 	bl	8003168 <HAL_GetTick>
 800471e:	0003      	movs	r3, r0
 8004720:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004724:	f7fe fd20 	bl	8003168 <HAL_GetTick>
 8004728:	0002      	movs	r2, r0
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e079      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	4b3f      	ldr	r3, [pc, #252]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	049b      	lsls	r3, r3, #18
 800473e:	4013      	ands	r3, r2
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004742:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	220f      	movs	r2, #15
 8004748:	4393      	bics	r3, r2
 800474a:	0019      	movs	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	4b38      	ldr	r3, [pc, #224]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004752:	430a      	orrs	r2, r1
 8004754:	62da      	str	r2, [r3, #44]	; 0x2c
 8004756:	4b37      	ldr	r3, [pc, #220]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4a3a      	ldr	r2, [pc, #232]	; (8004844 <HAL_RCC_OscConfig+0x638>)
 800475c:	4013      	ands	r3, r2
 800475e:	0019      	movs	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	431a      	orrs	r2, r3
 800476a:	4b32      	ldr	r3, [pc, #200]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 8004776:	2180      	movs	r1, #128	; 0x80
 8004778:	0449      	lsls	r1, r1, #17
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fe fcf3 	bl	8003168 <HAL_GetTick>
 8004782:	0003      	movs	r3, r0
 8004784:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004788:	f7fe fcee 	bl	8003168 <HAL_GetTick>
 800478c:	0002      	movs	r2, r0
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e047      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	049b      	lsls	r3, r3, #18
 80047a2:	4013      	ands	r3, r2
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x57c>
 80047a6:	e03f      	b.n	8004828 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b22      	ldr	r3, [pc, #136]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80047ae:	4924      	ldr	r1, [pc, #144]	; (8004840 <HAL_RCC_OscConfig+0x634>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fe fcd8 	bl	8003168 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047be:	f7fe fcd3 	bl	8003168 <HAL_GetTick>
 80047c2:	0002      	movs	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e02c      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047d0:	4b18      	ldr	r3, [pc, #96]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	049b      	lsls	r3, r3, #18
 80047d8:	4013      	ands	r3, r2
 80047da:	d1f0      	bne.n	80047be <HAL_RCC_OscConfig+0x5b2>
 80047dc:	e024      	b.n	8004828 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e01f      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80047f0:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_RCC_OscConfig+0x628>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	23c0      	movs	r3, #192	; 0xc0
 80047fa:	025b      	lsls	r3, r3, #9
 80047fc:	401a      	ands	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	429a      	cmp	r2, r3
 8004804:	d10e      	bne.n	8004824 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	220f      	movs	r2, #15
 800480a:	401a      	ands	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	23f0      	movs	r3, #240	; 0xf0
 8004818:	039b      	lsls	r3, r3, #14
 800481a:	401a      	ands	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b008      	add	sp, #32
 8004830:	bd80      	pop	{r7, pc}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	40021000 	.word	0x40021000
 8004838:	00001388 	.word	0x00001388
 800483c:	efffffff 	.word	0xefffffff
 8004840:	feffffff 	.word	0xfeffffff
 8004844:	ffc27fff 	.word	0xffc27fff

08004848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0b3      	b.n	80049c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b5b      	ldr	r3, [pc, #364]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	4013      	ands	r3, r2
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d911      	bls.n	800488e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b58      	ldr	r3, [pc, #352]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2201      	movs	r2, #1
 8004870:	4393      	bics	r3, r2
 8004872:	0019      	movs	r1, r3
 8004874:	4b55      	ldr	r3, [pc, #340]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	4013      	ands	r3, r2
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d001      	beq.n	800488e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e09a      	b.n	80049c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2202      	movs	r2, #2
 8004894:	4013      	ands	r3, r2
 8004896:	d015      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2204      	movs	r2, #4
 800489e:	4013      	ands	r3, r2
 80048a0:	d006      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048a2:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 80048a8:	21e0      	movs	r1, #224	; 0xe0
 80048aa:	00c9      	lsls	r1, r1, #3
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b0:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	22f0      	movs	r2, #240	; 0xf0
 80048b6:	4393      	bics	r3, r2
 80048b8:	0019      	movs	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	d040      	beq.n	8004950 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	029b      	lsls	r3, r3, #10
 80048de:	4013      	ands	r3, r2
 80048e0:	d114      	bne.n	800490c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06e      	b.n	80049c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	049b      	lsls	r3, r3, #18
 80048f6:	4013      	ands	r3, r2
 80048f8:	d108      	bne.n	800490c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e062      	b.n	80049c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2202      	movs	r2, #2
 8004904:	4013      	ands	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e05b      	b.n	80049c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490c:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2203      	movs	r2, #3
 8004912:	4393      	bics	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 800491c:	430a      	orrs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004920:	f7fe fc22 	bl	8003168 <HAL_GetTick>
 8004924:	0003      	movs	r3, r0
 8004926:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004928:	e009      	b.n	800493e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492a:	f7fe fc1d 	bl	8003168 <HAL_GetTick>
 800492e:	0002      	movs	r2, r0
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <HAL_RCC_ClockConfig+0x18c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e042      	b.n	80049c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	220c      	movs	r2, #12
 8004944:	401a      	ands	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	429a      	cmp	r2, r3
 800494e:	d1ec      	bne.n	800492a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004950:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	4013      	ands	r3, r2
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d211      	bcs.n	8004982 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	4393      	bics	r3, r2
 8004966:	0019      	movs	r1, r3
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004970:	4b16      	ldr	r3, [pc, #88]	; (80049cc <HAL_RCC_ClockConfig+0x184>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	4013      	ands	r3, r2
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e020      	b.n	80049c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2204      	movs	r2, #4
 8004988:	4013      	ands	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <HAL_RCC_ClockConfig+0x190>)
 8004992:	4013      	ands	r3, r2
 8004994:	0019      	movs	r1, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049a0:	f000 f820 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80049a4:	0001      	movs	r1, r0
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_RCC_ClockConfig+0x188>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	220f      	movs	r2, #15
 80049ae:	4013      	ands	r3, r2
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <HAL_RCC_ClockConfig+0x194>)
 80049b2:	5cd3      	ldrb	r3, [r2, r3]
 80049b4:	000a      	movs	r2, r1
 80049b6:	40da      	lsrs	r2, r3
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCC_ClockConfig+0x198>)
 80049ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80049bc:	2000      	movs	r0, #0
 80049be:	f7fe fb8d 	bl	80030dc <HAL_InitTick>
  
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b004      	add	sp, #16
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	00001388 	.word	0x00001388
 80049d8:	fffff8ff 	.word	0xfffff8ff
 80049dc:	08005b50 	.word	0x08005b50
 80049e0:	20000090 	.word	0x20000090

080049e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b08f      	sub	sp, #60	; 0x3c
 80049e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80049ea:	2314      	movs	r3, #20
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049f2:	c313      	stmia	r3!, {r0, r1, r4}
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80049f8:	1d3b      	adds	r3, r7, #4
 80049fa:	4a2a      	ldr	r2, [pc, #168]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049fe:	c313      	stmia	r3!, {r0, r1, r4}
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a08:	2300      	movs	r3, #0
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a10:	2300      	movs	r3, #0
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	220c      	movs	r2, #12
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d002      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x4a>
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x50>
 8004a2c:	e02f      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a32:	e02f      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	0c9b      	lsrs	r3, r3, #18
 8004a38:	220f      	movs	r2, #15
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2214      	movs	r2, #20
 8004a3e:	18ba      	adds	r2, r7, r2
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a44:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	220f      	movs	r2, #15
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	1d3a      	adds	r2, r7, #4
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a54:	23c0      	movs	r3, #192	; 0xc0
 8004a56:	025b      	lsls	r3, r3, #9
 8004a58:	401a      	ands	r2, r3
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	025b      	lsls	r3, r3, #9
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a64:	4811      	ldr	r0, [pc, #68]	; (8004aac <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a66:	f7fb fb4f 	bl	8000108 <__udivsi3>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	4353      	muls	r3, r2
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a78:	480c      	ldr	r0, [pc, #48]	; (8004aac <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a7a:	f7fb fb45 	bl	8000108 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	001a      	movs	r2, r3
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	4353      	muls	r3, r2
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a8c:	e002      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b00f      	add	sp, #60	; 0x3c
 8004a9c:	bd90      	pop	{r4, r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	08005a30 	.word	0x08005a30
 8004aa4:	08005a40 	.word	0x08005a40
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	20000090 	.word	0x20000090

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004ac8:	f7ff fff2 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004acc:	0001      	movs	r1, r0
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ada:	5cd3      	ldrb	r3, [r2, r3]
 8004adc:	40d9      	lsrs	r1, r3
 8004ade:	000b      	movs	r3, r1
}    
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	08005b60 	.word	0x08005b60

08004af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	025b      	lsls	r3, r3, #9
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d100      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b0c:	e08e      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2017      	movs	r0, #23
 8004b10:	183b      	adds	r3, r7, r0
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b16:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	055b      	lsls	r3, r3, #21
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d110      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	4b5c      	ldr	r3, [pc, #368]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b24:	69da      	ldr	r2, [r3, #28]
 8004b26:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b28:	2180      	movs	r1, #128	; 0x80
 8004b2a:	0549      	lsls	r1, r1, #21
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	61da      	str	r2, [r3, #28]
 8004b30:	4b58      	ldr	r3, [pc, #352]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	055b      	lsls	r3, r3, #21
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3e:	183b      	adds	r3, r7, r0
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b54      	ldr	r3, [pc, #336]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d11a      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b50:	4b51      	ldr	r3, [pc, #324]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b50      	ldr	r3, [pc, #320]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	0049      	lsls	r1, r1, #1
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5e:	f7fe fb03 	bl	8003168 <HAL_GetTick>
 8004b62:	0003      	movs	r3, r0
 8004b64:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b68:	f7fe fafe 	bl	8003168 <HAL_GetTick>
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e087      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7a:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4013      	ands	r3, r2
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b86:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	23c0      	movs	r3, #192	; 0xc0
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d034      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	23c0      	movs	r3, #192	; 0xc0
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d02c      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4a3b      	ldr	r2, [pc, #236]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bb2:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bb4:	6a1a      	ldr	r2, [r3, #32]
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bb8:	2180      	movs	r1, #128	; 0x80
 8004bba:	0249      	lsls	r1, r1, #9
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bc2:	6a1a      	ldr	r2, [r3, #32]
 8004bc4:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bc6:	4936      	ldr	r1, [pc, #216]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bcc:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fe fac5 	bl	8003168 <HAL_GetTick>
 8004bde:	0003      	movs	r3, r0
 8004be0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be2:	e009      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fe fac0 	bl	8003168 <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	4a2d      	ldr	r2, [pc, #180]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e048      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4a25      	ldr	r2, [pc, #148]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c12:	430a      	orrs	r2, r1
 8004c14:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c16:	2317      	movs	r3, #23
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c20:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c26:	4920      	ldr	r1, [pc, #128]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2201      	movs	r2, #1
 8004c32:	4013      	ands	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	4393      	bics	r3, r2
 8004c3e:	0019      	movs	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c46:	430a      	orrs	r2, r1
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	4013      	ands	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	2210      	movs	r2, #16
 8004c5a:	4393      	bics	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c64:	430a      	orrs	r2, r1
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	4013      	ands	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	2280      	movs	r2, #128	; 0x80
 8004c7a:	4393      	bics	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004c84:	430a      	orrs	r2, r1
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b006      	add	sp, #24
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	fffffcff 	.word	0xfffffcff
 8004ca0:	fffeffff 	.word	0xfffeffff
 8004ca4:	00001388 	.word	0x00001388
 8004ca8:	efffffff 	.word	0xefffffff

08004cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e044      	b.n	8004d48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d107      	bne.n	8004cd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2274      	movs	r2, #116	; 0x74
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fe f95d 	bl	8002f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2224      	movs	r2, #36	; 0x24
 8004cda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	438a      	bics	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 f830 	bl	8004d54 <UART_SetConfig>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e024      	b.n	8004d48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 f97b 	bl	8005004 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	490d      	ldr	r1, [pc, #52]	; (8004d50 <HAL_UART_Init+0xa4>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2108      	movs	r1, #8
 8004d2a:	438a      	bics	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f000 fa13 	bl	800516c <UART_CheckIdleState>
 8004d46:	0003      	movs	r3, r0
}
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b002      	add	sp, #8
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	fffff7ff 	.word	0xfffff7ff

08004d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d5c:	231e      	movs	r3, #30
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a97      	ldr	r2, [pc, #604]	; (8004fe0 <UART_SetConfig+0x28c>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	0019      	movs	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a92      	ldr	r2, [pc, #584]	; (8004fe4 <UART_SetConfig+0x290>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4a89      	ldr	r2, [pc, #548]	; (8004fe8 <UART_SetConfig+0x294>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a85      	ldr	r2, [pc, #532]	; (8004fec <UART_SetConfig+0x298>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d127      	bne.n	8004e2a <UART_SetConfig+0xd6>
 8004dda:	4b85      	ldr	r3, [pc, #532]	; (8004ff0 <UART_SetConfig+0x29c>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	2203      	movs	r2, #3
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d00d      	beq.n	8004e02 <UART_SetConfig+0xae>
 8004de6:	d81b      	bhi.n	8004e20 <UART_SetConfig+0xcc>
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d014      	beq.n	8004e16 <UART_SetConfig+0xc2>
 8004dec:	d818      	bhi.n	8004e20 <UART_SetConfig+0xcc>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <UART_SetConfig+0xa4>
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d00a      	beq.n	8004e0c <UART_SetConfig+0xb8>
 8004df6:	e013      	b.n	8004e20 <UART_SetConfig+0xcc>
 8004df8:	231f      	movs	r3, #31
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e035      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e02:	231f      	movs	r3, #31
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2202      	movs	r2, #2
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e030      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e0c:	231f      	movs	r3, #31
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2204      	movs	r2, #4
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e02b      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e16:	231f      	movs	r3, #31
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e026      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e20:	231f      	movs	r3, #31
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	2210      	movs	r2, #16
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e021      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a71      	ldr	r2, [pc, #452]	; (8004ff4 <UART_SetConfig+0x2a0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d104      	bne.n	8004e3e <UART_SetConfig+0xea>
 8004e34:	231f      	movs	r3, #31
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e017      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a6d      	ldr	r2, [pc, #436]	; (8004ff8 <UART_SetConfig+0x2a4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d104      	bne.n	8004e52 <UART_SetConfig+0xfe>
 8004e48:	231f      	movs	r3, #31
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e00d      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a69      	ldr	r2, [pc, #420]	; (8004ffc <UART_SetConfig+0x2a8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d104      	bne.n	8004e66 <UART_SetConfig+0x112>
 8004e5c:	231f      	movs	r3, #31
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e003      	b.n	8004e6e <UART_SetConfig+0x11a>
 8004e66:	231f      	movs	r3, #31
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d15d      	bne.n	8004f36 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8004e7a:	231f      	movs	r3, #31
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d015      	beq.n	8004eb0 <UART_SetConfig+0x15c>
 8004e84:	dc18      	bgt.n	8004eb8 <UART_SetConfig+0x164>
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d00d      	beq.n	8004ea6 <UART_SetConfig+0x152>
 8004e8a:	dc15      	bgt.n	8004eb8 <UART_SetConfig+0x164>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <UART_SetConfig+0x142>
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d005      	beq.n	8004ea0 <UART_SetConfig+0x14c>
 8004e94:	e010      	b.n	8004eb8 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e96:	f7ff fe15 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	61bb      	str	r3, [r7, #24]
        break;
 8004e9e:	e012      	b.n	8004ec6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea0:	4b57      	ldr	r3, [pc, #348]	; (8005000 <UART_SetConfig+0x2ac>)
 8004ea2:	61bb      	str	r3, [r7, #24]
        break;
 8004ea4:	e00f      	b.n	8004ec6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea6:	f7ff fd9d 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	61bb      	str	r3, [r7, #24]
        break;
 8004eae:	e00a      	b.n	8004ec6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	61bb      	str	r3, [r7, #24]
        break;
 8004eb6:	e006      	b.n	8004ec6 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ebc:	231e      	movs	r3, #30
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
        break;
 8004ec4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d100      	bne.n	8004ece <UART_SetConfig+0x17a>
 8004ecc:	e07b      	b.n	8004fc6 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	005a      	lsls	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	18d2      	adds	r2, r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0019      	movs	r1, r3
 8004ee0:	0010      	movs	r0, r2
 8004ee2:	f7fb f911 	bl	8000108 <__udivsi3>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b0f      	cmp	r3, #15
 8004ef0:	d91c      	bls.n	8004f2c <UART_SetConfig+0x1d8>
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	025b      	lsls	r3, r3, #9
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d217      	bcs.n	8004f2c <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	200e      	movs	r0, #14
 8004f02:	183b      	adds	r3, r7, r0
 8004f04:	210f      	movs	r1, #15
 8004f06:	438a      	bics	r2, r1
 8004f08:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2207      	movs	r2, #7
 8004f12:	4013      	ands	r3, r2
 8004f14:	b299      	uxth	r1, r3
 8004f16:	183b      	adds	r3, r7, r0
 8004f18:	183a      	adds	r2, r7, r0
 8004f1a:	8812      	ldrh	r2, [r2, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	183a      	adds	r2, r7, r0
 8004f26:	8812      	ldrh	r2, [r2, #0]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	e04c      	b.n	8004fc6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2c:	231e      	movs	r3, #30
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	e047      	b.n	8004fc6 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f36:	231f      	movs	r3, #31
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d015      	beq.n	8004f6c <UART_SetConfig+0x218>
 8004f40:	dc18      	bgt.n	8004f74 <UART_SetConfig+0x220>
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d00d      	beq.n	8004f62 <UART_SetConfig+0x20e>
 8004f46:	dc15      	bgt.n	8004f74 <UART_SetConfig+0x220>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <UART_SetConfig+0x1fe>
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d005      	beq.n	8004f5c <UART_SetConfig+0x208>
 8004f50:	e010      	b.n	8004f74 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f52:	f7ff fdb7 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8004f56:	0003      	movs	r3, r0
 8004f58:	61bb      	str	r3, [r7, #24]
        break;
 8004f5a:	e012      	b.n	8004f82 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f5c:	4b28      	ldr	r3, [pc, #160]	; (8005000 <UART_SetConfig+0x2ac>)
 8004f5e:	61bb      	str	r3, [r7, #24]
        break;
 8004f60:	e00f      	b.n	8004f82 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f62:	f7ff fd3f 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8004f66:	0003      	movs	r3, r0
 8004f68:	61bb      	str	r3, [r7, #24]
        break;
 8004f6a:	e00a      	b.n	8004f82 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	61bb      	str	r3, [r7, #24]
        break;
 8004f72:	e006      	b.n	8004f82 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f78:	231e      	movs	r3, #30
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
        break;
 8004f80:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01e      	beq.n	8004fc6 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	085a      	lsrs	r2, r3, #1
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	18d2      	adds	r2, r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	0019      	movs	r1, r3
 8004f98:	0010      	movs	r0, r2
 8004f9a:	f7fb f8b5 	bl	8000108 <__udivsi3>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d909      	bls.n	8004fbe <UART_SetConfig+0x26a>
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	025b      	lsls	r3, r3, #9
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d204      	bcs.n	8004fbe <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	60da      	str	r2, [r3, #12]
 8004fbc:	e003      	b.n	8004fc6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004fbe:	231e      	movs	r3, #30
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fd2:	231e      	movs	r3, #30
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	781b      	ldrb	r3, [r3, #0]
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b008      	add	sp, #32
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	efff69f3 	.word	0xefff69f3
 8004fe4:	ffffcfff 	.word	0xffffcfff
 8004fe8:	fffff4ff 	.word	0xfffff4ff
 8004fec:	40013800 	.word	0x40013800
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40004400 	.word	0x40004400
 8004ff8:	40004800 	.word	0x40004800
 8004ffc:	40004c00 	.word	0x40004c00
 8005000:	007a1200 	.word	0x007a1200

08005004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2201      	movs	r2, #1
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a4a      	ldr	r2, [pc, #296]	; (8005148 <UART_AdvFeatureConfig+0x144>)
 800501e:	4013      	ands	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2202      	movs	r2, #2
 8005034:	4013      	ands	r3, r2
 8005036:	d00b      	beq.n	8005050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4a43      	ldr	r2, [pc, #268]	; (800514c <UART_AdvFeatureConfig+0x148>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2204      	movs	r2, #4
 8005056:	4013      	ands	r3, r2
 8005058:	d00b      	beq.n	8005072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a3b      	ldr	r2, [pc, #236]	; (8005150 <UART_AdvFeatureConfig+0x14c>)
 8005062:	4013      	ands	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2208      	movs	r2, #8
 8005078:	4013      	ands	r3, r2
 800507a:	d00b      	beq.n	8005094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4a34      	ldr	r2, [pc, #208]	; (8005154 <UART_AdvFeatureConfig+0x150>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2210      	movs	r2, #16
 800509a:	4013      	ands	r3, r2
 800509c:	d00b      	beq.n	80050b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <UART_AdvFeatureConfig+0x154>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2220      	movs	r2, #32
 80050bc:	4013      	ands	r3, r2
 80050be:	d00b      	beq.n	80050d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	4a25      	ldr	r2, [pc, #148]	; (800515c <UART_AdvFeatureConfig+0x158>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2240      	movs	r2, #64	; 0x40
 80050de:	4013      	ands	r3, r2
 80050e0:	d01d      	beq.n	800511e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <UART_AdvFeatureConfig+0x15c>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	035b      	lsls	r3, r3, #13
 8005102:	429a      	cmp	r2, r3
 8005104:	d10b      	bne.n	800511e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <UART_AdvFeatureConfig+0x160>)
 800510e:	4013      	ands	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2280      	movs	r2, #128	; 0x80
 8005124:	4013      	ands	r3, r2
 8005126:	d00b      	beq.n	8005140 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4a0e      	ldr	r2, [pc, #56]	; (8005168 <UART_AdvFeatureConfig+0x164>)
 8005130:	4013      	ands	r3, r2
 8005132:	0019      	movs	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}
 8005148:	fffdffff 	.word	0xfffdffff
 800514c:	fffeffff 	.word	0xfffeffff
 8005150:	fffbffff 	.word	0xfffbffff
 8005154:	ffff7fff 	.word	0xffff7fff
 8005158:	ffffefff 	.word	0xffffefff
 800515c:	ffffdfff 	.word	0xffffdfff
 8005160:	ffefffff 	.word	0xffefffff
 8005164:	ff9fffff 	.word	0xff9fffff
 8005168:	fff7ffff 	.word	0xfff7ffff

0800516c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af02      	add	r7, sp, #8
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2280      	movs	r2, #128	; 0x80
 8005178:	2100      	movs	r1, #0
 800517a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800517c:	f7fd fff4 	bl	8003168 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2208      	movs	r2, #8
 800518c:	4013      	ands	r3, r2
 800518e:	2b08      	cmp	r3, #8
 8005190:	d10c      	bne.n	80051ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	0391      	lsls	r1, r2, #14
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <UART_CheckIdleState+0x8c>)
 800519c:	9200      	str	r2, [sp, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	f000 f82c 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d001      	beq.n	80051ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e021      	b.n	80051f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2204      	movs	r2, #4
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d10c      	bne.n	80051d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2280      	movs	r2, #128	; 0x80
 80051be:	03d1      	lsls	r1, r2, #15
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <UART_CheckIdleState+0x8c>)
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f000 f818 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 80051cc:	1e03      	subs	r3, r0, #0
 80051ce:	d001      	beq.n	80051d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e00d      	b.n	80051f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2274      	movs	r2, #116	; 0x74
 80051ea:	2100      	movs	r1, #0
 80051ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b004      	add	sp, #16
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	01ffffff 	.word	0x01ffffff

080051fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b094      	sub	sp, #80	; 0x50
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520c:	e0a3      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005210:	3301      	adds	r3, #1
 8005212:	d100      	bne.n	8005216 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005214:	e09f      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fd ffa7 	bl	8003168 <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <UART_WaitOnFlagUntilTimeout+0x30>
 8005226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005228:	2b00      	cmp	r3, #0
 800522a:	d13d      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522c:	f3ef 8310 	mrs	r3, PRIMASK
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005234:	647b      	str	r3, [r7, #68]	; 0x44
 8005236:	2301      	movs	r3, #1
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	f383 8810 	msr	PRIMASK, r3
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	494c      	ldr	r1, [pc, #304]	; (8005380 <UART_WaitOnFlagUntilTimeout+0x184>)
 800524e:	400a      	ands	r2, r1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	f383 8810 	msr	PRIMASK, r3
}
 800525c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525e:	f3ef 8310 	mrs	r3, PRIMASK
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	643b      	str	r3, [r7, #64]	; 0x40
 8005268:	2301      	movs	r3, #1
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	f383 8810 	msr	PRIMASK, r3
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2101      	movs	r1, #1
 8005280:	438a      	bics	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	f383 8810 	msr	PRIMASK, r3
}
 800528e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2274      	movs	r2, #116	; 0x74
 80052a0:	2100      	movs	r1, #0
 80052a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e067      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2204      	movs	r2, #4
 80052b0:	4013      	ands	r3, r2
 80052b2:	d050      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	401a      	ands	r2, r3
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d146      	bne.n	8005356 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2280      	movs	r2, #128	; 0x80
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8310 	mrs	r3, PRIMASK
 80052d6:	613b      	str	r3, [r7, #16]
  return(result);
 80052d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f383 8810 	msr	PRIMASK, r3
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4923      	ldr	r1, [pc, #140]	; (8005380 <UART_WaitOnFlagUntilTimeout+0x184>)
 80052f4:	400a      	ands	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005304:	f3ef 8310 	mrs	r3, PRIMASK
 8005308:	61fb      	str	r3, [r7, #28]
  return(result);
 800530a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	64bb      	str	r3, [r7, #72]	; 0x48
 800530e:	2301      	movs	r3, #1
 8005310:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2101      	movs	r1, #1
 8005326:	438a      	bics	r2, r1
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	2120      	movs	r1, #32
 8005348:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2274      	movs	r2, #116	; 0x74
 800534e:	2100      	movs	r1, #0
 8005350:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e010      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	425a      	negs	r2, r3
 8005366:	4153      	adcs	r3, r2
 8005368:	b2db      	uxtb	r3, r3
 800536a:	001a      	movs	r2, r3
 800536c:	1dfb      	adds	r3, r7, #7
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d100      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005374:	e74b      	b.n	800520e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	0018      	movs	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	b014      	add	sp, #80	; 0x50
 800537e:	bd80      	pop	{r7, pc}
 8005380:	fffffe5f 	.word	0xfffffe5f

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	; (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	2000009c 	.word	0x2000009c

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	2600      	movs	r6, #0
 8005394:	4d0c      	ldr	r5, [pc, #48]	; (80053c8 <__libc_init_array+0x38>)
 8005396:	4c0d      	ldr	r4, [pc, #52]	; (80053cc <__libc_init_array+0x3c>)
 8005398:	1b64      	subs	r4, r4, r5
 800539a:	10a4      	asrs	r4, r4, #2
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	2600      	movs	r6, #0
 80053a2:	f000 fb37 	bl	8005a14 <_init>
 80053a6:	4d0a      	ldr	r5, [pc, #40]	; (80053d0 <__libc_init_array+0x40>)
 80053a8:	4c0a      	ldr	r4, [pc, #40]	; (80053d4 <__libc_init_array+0x44>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	00b3      	lsls	r3, r6, #2
 80053b6:	58eb      	ldr	r3, [r5, r3]
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	00b3      	lsls	r3, r6, #2
 80053c0:	58eb      	ldr	r3, [r5, r3]
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	08005bd8 	.word	0x08005bd8
 80053cc:	08005bd8 	.word	0x08005bd8
 80053d0:	08005bd8 	.word	0x08005bd8
 80053d4:	08005bdc 	.word	0x08005bdc

080053d8 <memset>:
 80053d8:	0003      	movs	r3, r0
 80053da:	1882      	adds	r2, r0, r2
 80053dc:	4293      	cmp	r3, r2
 80053de:	d100      	bne.n	80053e2 <memset+0xa>
 80053e0:	4770      	bx	lr
 80053e2:	7019      	strb	r1, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	e7f9      	b.n	80053dc <memset+0x4>

080053e8 <atan>:
 80053e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ea:	4b98      	ldr	r3, [pc, #608]	; (800564c <atan+0x264>)
 80053ec:	b085      	sub	sp, #20
 80053ee:	004e      	lsls	r6, r1, #1
 80053f0:	0004      	movs	r4, r0
 80053f2:	000d      	movs	r5, r1
 80053f4:	9103      	str	r1, [sp, #12]
 80053f6:	0876      	lsrs	r6, r6, #1
 80053f8:	429e      	cmp	r6, r3
 80053fa:	dd18      	ble.n	800542e <atan+0x46>
 80053fc:	4b94      	ldr	r3, [pc, #592]	; (8005650 <atan+0x268>)
 80053fe:	429e      	cmp	r6, r3
 8005400:	dc02      	bgt.n	8005408 <atan+0x20>
 8005402:	d10a      	bne.n	800541a <atan+0x32>
 8005404:	2800      	cmp	r0, #0
 8005406:	d008      	beq.n	800541a <atan+0x32>
 8005408:	0022      	movs	r2, r4
 800540a:	002b      	movs	r3, r5
 800540c:	0020      	movs	r0, r4
 800540e:	0029      	movs	r1, r5
 8005410:	f7fb fa32 	bl	8000878 <__aeabi_dadd>
 8005414:	0004      	movs	r4, r0
 8005416:	000d      	movs	r5, r1
 8005418:	e005      	b.n	8005426 <atan+0x3e>
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	4c8d      	ldr	r4, [pc, #564]	; (8005654 <atan+0x26c>)
 800541e:	2b00      	cmp	r3, #0
 8005420:	dd00      	ble.n	8005424 <atan+0x3c>
 8005422:	e110      	b.n	8005646 <atan+0x25e>
 8005424:	4d8c      	ldr	r5, [pc, #560]	; (8005658 <atan+0x270>)
 8005426:	0020      	movs	r0, r4
 8005428:	0029      	movs	r1, r5
 800542a:	b005      	add	sp, #20
 800542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542e:	4b8b      	ldr	r3, [pc, #556]	; (800565c <atan+0x274>)
 8005430:	429e      	cmp	r6, r3
 8005432:	dc0f      	bgt.n	8005454 <atan+0x6c>
 8005434:	4b8a      	ldr	r3, [pc, #552]	; (8005660 <atan+0x278>)
 8005436:	429e      	cmp	r6, r3
 8005438:	dc09      	bgt.n	800544e <atan+0x66>
 800543a:	4a8a      	ldr	r2, [pc, #552]	; (8005664 <atan+0x27c>)
 800543c:	4b8a      	ldr	r3, [pc, #552]	; (8005668 <atan+0x280>)
 800543e:	f7fb fa1b 	bl	8000878 <__aeabi_dadd>
 8005442:	2200      	movs	r2, #0
 8005444:	4b89      	ldr	r3, [pc, #548]	; (800566c <atan+0x284>)
 8005446:	f7fa ff15 	bl	8000274 <__aeabi_dcmpgt>
 800544a:	2800      	cmp	r0, #0
 800544c:	d1eb      	bne.n	8005426 <atan+0x3e>
 800544e:	2301      	movs	r3, #1
 8005450:	425b      	negs	r3, r3
 8005452:	e025      	b.n	80054a0 <atan+0xb8>
 8005454:	f000 f948 	bl	80056e8 <fabs>
 8005458:	4b85      	ldr	r3, [pc, #532]	; (8005670 <atan+0x288>)
 800545a:	0004      	movs	r4, r0
 800545c:	000d      	movs	r5, r1
 800545e:	429e      	cmp	r6, r3
 8005460:	dd00      	ble.n	8005464 <atan+0x7c>
 8005462:	e0aa      	b.n	80055ba <atan+0x1d2>
 8005464:	4b83      	ldr	r3, [pc, #524]	; (8005674 <atan+0x28c>)
 8005466:	429e      	cmp	r6, r3
 8005468:	dd00      	ble.n	800546c <atan+0x84>
 800546a:	e090      	b.n	800558e <atan+0x1a6>
 800546c:	0002      	movs	r2, r0
 800546e:	000b      	movs	r3, r1
 8005470:	f7fb fa02 	bl	8000878 <__aeabi_dadd>
 8005474:	2200      	movs	r2, #0
 8005476:	4b7d      	ldr	r3, [pc, #500]	; (800566c <atan+0x284>)
 8005478:	f7fc fbda 	bl	8001c30 <__aeabi_dsub>
 800547c:	2380      	movs	r3, #128	; 0x80
 800547e:	0006      	movs	r6, r0
 8005480:	000f      	movs	r7, r1
 8005482:	2200      	movs	r2, #0
 8005484:	0020      	movs	r0, r4
 8005486:	0029      	movs	r1, r5
 8005488:	05db      	lsls	r3, r3, #23
 800548a:	f7fb f9f5 	bl	8000878 <__aeabi_dadd>
 800548e:	000b      	movs	r3, r1
 8005490:	0002      	movs	r2, r0
 8005492:	0039      	movs	r1, r7
 8005494:	0030      	movs	r0, r6
 8005496:	f7fb fd59 	bl	8000f4c <__aeabi_ddiv>
 800549a:	2300      	movs	r3, #0
 800549c:	0004      	movs	r4, r0
 800549e:	000d      	movs	r5, r1
 80054a0:	0022      	movs	r2, r4
 80054a2:	9302      	str	r3, [sp, #8]
 80054a4:	0020      	movs	r0, r4
 80054a6:	002b      	movs	r3, r5
 80054a8:	0029      	movs	r1, r5
 80054aa:	f7fc f955 	bl	8001758 <__aeabi_dmul>
 80054ae:	0002      	movs	r2, r0
 80054b0:	000b      	movs	r3, r1
 80054b2:	9000      	str	r0, [sp, #0]
 80054b4:	9101      	str	r1, [sp, #4]
 80054b6:	f7fc f94f 	bl	8001758 <__aeabi_dmul>
 80054ba:	0006      	movs	r6, r0
 80054bc:	000f      	movs	r7, r1
 80054be:	4a6e      	ldr	r2, [pc, #440]	; (8005678 <atan+0x290>)
 80054c0:	4b6e      	ldr	r3, [pc, #440]	; (800567c <atan+0x294>)
 80054c2:	f7fc f949 	bl	8001758 <__aeabi_dmul>
 80054c6:	4a6e      	ldr	r2, [pc, #440]	; (8005680 <atan+0x298>)
 80054c8:	4b6e      	ldr	r3, [pc, #440]	; (8005684 <atan+0x29c>)
 80054ca:	f7fb f9d5 	bl	8000878 <__aeabi_dadd>
 80054ce:	0032      	movs	r2, r6
 80054d0:	003b      	movs	r3, r7
 80054d2:	f7fc f941 	bl	8001758 <__aeabi_dmul>
 80054d6:	4a6c      	ldr	r2, [pc, #432]	; (8005688 <atan+0x2a0>)
 80054d8:	4b6c      	ldr	r3, [pc, #432]	; (800568c <atan+0x2a4>)
 80054da:	f7fb f9cd 	bl	8000878 <__aeabi_dadd>
 80054de:	0032      	movs	r2, r6
 80054e0:	003b      	movs	r3, r7
 80054e2:	f7fc f939 	bl	8001758 <__aeabi_dmul>
 80054e6:	4a6a      	ldr	r2, [pc, #424]	; (8005690 <atan+0x2a8>)
 80054e8:	4b6a      	ldr	r3, [pc, #424]	; (8005694 <atan+0x2ac>)
 80054ea:	f7fb f9c5 	bl	8000878 <__aeabi_dadd>
 80054ee:	0032      	movs	r2, r6
 80054f0:	003b      	movs	r3, r7
 80054f2:	f7fc f931 	bl	8001758 <__aeabi_dmul>
 80054f6:	4a68      	ldr	r2, [pc, #416]	; (8005698 <atan+0x2b0>)
 80054f8:	4b68      	ldr	r3, [pc, #416]	; (800569c <atan+0x2b4>)
 80054fa:	f7fb f9bd 	bl	8000878 <__aeabi_dadd>
 80054fe:	0032      	movs	r2, r6
 8005500:	003b      	movs	r3, r7
 8005502:	f7fc f929 	bl	8001758 <__aeabi_dmul>
 8005506:	4a66      	ldr	r2, [pc, #408]	; (80056a0 <atan+0x2b8>)
 8005508:	4b66      	ldr	r3, [pc, #408]	; (80056a4 <atan+0x2bc>)
 800550a:	f7fb f9b5 	bl	8000878 <__aeabi_dadd>
 800550e:	9a00      	ldr	r2, [sp, #0]
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	f7fc f921 	bl	8001758 <__aeabi_dmul>
 8005516:	4a64      	ldr	r2, [pc, #400]	; (80056a8 <atan+0x2c0>)
 8005518:	9000      	str	r0, [sp, #0]
 800551a:	9101      	str	r1, [sp, #4]
 800551c:	4b63      	ldr	r3, [pc, #396]	; (80056ac <atan+0x2c4>)
 800551e:	0030      	movs	r0, r6
 8005520:	0039      	movs	r1, r7
 8005522:	f7fc f919 	bl	8001758 <__aeabi_dmul>
 8005526:	4a62      	ldr	r2, [pc, #392]	; (80056b0 <atan+0x2c8>)
 8005528:	4b62      	ldr	r3, [pc, #392]	; (80056b4 <atan+0x2cc>)
 800552a:	f7fc fb81 	bl	8001c30 <__aeabi_dsub>
 800552e:	0032      	movs	r2, r6
 8005530:	003b      	movs	r3, r7
 8005532:	f7fc f911 	bl	8001758 <__aeabi_dmul>
 8005536:	4a60      	ldr	r2, [pc, #384]	; (80056b8 <atan+0x2d0>)
 8005538:	4b60      	ldr	r3, [pc, #384]	; (80056bc <atan+0x2d4>)
 800553a:	f7fc fb79 	bl	8001c30 <__aeabi_dsub>
 800553e:	0032      	movs	r2, r6
 8005540:	003b      	movs	r3, r7
 8005542:	f7fc f909 	bl	8001758 <__aeabi_dmul>
 8005546:	4a5e      	ldr	r2, [pc, #376]	; (80056c0 <atan+0x2d8>)
 8005548:	4b5e      	ldr	r3, [pc, #376]	; (80056c4 <atan+0x2dc>)
 800554a:	f7fc fb71 	bl	8001c30 <__aeabi_dsub>
 800554e:	0032      	movs	r2, r6
 8005550:	003b      	movs	r3, r7
 8005552:	f7fc f901 	bl	8001758 <__aeabi_dmul>
 8005556:	4a5c      	ldr	r2, [pc, #368]	; (80056c8 <atan+0x2e0>)
 8005558:	4b5c      	ldr	r3, [pc, #368]	; (80056cc <atan+0x2e4>)
 800555a:	f7fc fb69 	bl	8001c30 <__aeabi_dsub>
 800555e:	0032      	movs	r2, r6
 8005560:	003b      	movs	r3, r7
 8005562:	f7fc f8f9 	bl	8001758 <__aeabi_dmul>
 8005566:	0002      	movs	r2, r0
 8005568:	000b      	movs	r3, r1
 800556a:	9800      	ldr	r0, [sp, #0]
 800556c:	9901      	ldr	r1, [sp, #4]
 800556e:	f7fb f983 	bl	8000878 <__aeabi_dadd>
 8005572:	002b      	movs	r3, r5
 8005574:	0022      	movs	r2, r4
 8005576:	f7fc f8ef 	bl	8001758 <__aeabi_dmul>
 800557a:	9b02      	ldr	r3, [sp, #8]
 800557c:	3301      	adds	r3, #1
 800557e:	d143      	bne.n	8005608 <atan+0x220>
 8005580:	0002      	movs	r2, r0
 8005582:	000b      	movs	r3, r1
 8005584:	0020      	movs	r0, r4
 8005586:	0029      	movs	r1, r5
 8005588:	f7fc fb52 	bl	8001c30 <__aeabi_dsub>
 800558c:	e742      	b.n	8005414 <atan+0x2c>
 800558e:	2200      	movs	r2, #0
 8005590:	4b36      	ldr	r3, [pc, #216]	; (800566c <atan+0x284>)
 8005592:	f7fc fb4d 	bl	8001c30 <__aeabi_dsub>
 8005596:	2200      	movs	r2, #0
 8005598:	0006      	movs	r6, r0
 800559a:	000f      	movs	r7, r1
 800559c:	0020      	movs	r0, r4
 800559e:	0029      	movs	r1, r5
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <atan+0x284>)
 80055a2:	f7fb f969 	bl	8000878 <__aeabi_dadd>
 80055a6:	000b      	movs	r3, r1
 80055a8:	0002      	movs	r2, r0
 80055aa:	0039      	movs	r1, r7
 80055ac:	0030      	movs	r0, r6
 80055ae:	f7fb fccd 	bl	8000f4c <__aeabi_ddiv>
 80055b2:	2301      	movs	r3, #1
 80055b4:	0004      	movs	r4, r0
 80055b6:	000d      	movs	r5, r1
 80055b8:	e772      	b.n	80054a0 <atan+0xb8>
 80055ba:	4b45      	ldr	r3, [pc, #276]	; (80056d0 <atan+0x2e8>)
 80055bc:	429e      	cmp	r6, r3
 80055be:	dc19      	bgt.n	80055f4 <atan+0x20c>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4b44      	ldr	r3, [pc, #272]	; (80056d4 <atan+0x2ec>)
 80055c4:	f7fc fb34 	bl	8001c30 <__aeabi_dsub>
 80055c8:	2200      	movs	r2, #0
 80055ca:	0006      	movs	r6, r0
 80055cc:	000f      	movs	r7, r1
 80055ce:	0020      	movs	r0, r4
 80055d0:	0029      	movs	r1, r5
 80055d2:	4b40      	ldr	r3, [pc, #256]	; (80056d4 <atan+0x2ec>)
 80055d4:	f7fc f8c0 	bl	8001758 <__aeabi_dmul>
 80055d8:	2200      	movs	r2, #0
 80055da:	4b24      	ldr	r3, [pc, #144]	; (800566c <atan+0x284>)
 80055dc:	f7fb f94c 	bl	8000878 <__aeabi_dadd>
 80055e0:	000b      	movs	r3, r1
 80055e2:	0002      	movs	r2, r0
 80055e4:	0039      	movs	r1, r7
 80055e6:	0030      	movs	r0, r6
 80055e8:	f7fb fcb0 	bl	8000f4c <__aeabi_ddiv>
 80055ec:	2302      	movs	r3, #2
 80055ee:	0004      	movs	r4, r0
 80055f0:	000d      	movs	r5, r1
 80055f2:	e755      	b.n	80054a0 <atan+0xb8>
 80055f4:	000b      	movs	r3, r1
 80055f6:	0002      	movs	r2, r0
 80055f8:	4937      	ldr	r1, [pc, #220]	; (80056d8 <atan+0x2f0>)
 80055fa:	2000      	movs	r0, #0
 80055fc:	f7fb fca6 	bl	8000f4c <__aeabi_ddiv>
 8005600:	2303      	movs	r3, #3
 8005602:	0004      	movs	r4, r0
 8005604:	000d      	movs	r5, r1
 8005606:	e74b      	b.n	80054a0 <atan+0xb8>
 8005608:	9b02      	ldr	r3, [sp, #8]
 800560a:	4f34      	ldr	r7, [pc, #208]	; (80056dc <atan+0x2f4>)
 800560c:	00de      	lsls	r6, r3, #3
 800560e:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <atan+0x2f8>)
 8005610:	19bf      	adds	r7, r7, r6
 8005612:	199e      	adds	r6, r3, r6
 8005614:	6832      	ldr	r2, [r6, #0]
 8005616:	6873      	ldr	r3, [r6, #4]
 8005618:	f7fc fb0a 	bl	8001c30 <__aeabi_dsub>
 800561c:	0022      	movs	r2, r4
 800561e:	002b      	movs	r3, r5
 8005620:	f7fc fb06 	bl	8001c30 <__aeabi_dsub>
 8005624:	000b      	movs	r3, r1
 8005626:	0002      	movs	r2, r0
 8005628:	6838      	ldr	r0, [r7, #0]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	f7fc fb00 	bl	8001c30 <__aeabi_dsub>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	0004      	movs	r4, r0
 8005634:	000d      	movs	r5, r1
 8005636:	2b00      	cmp	r3, #0
 8005638:	db00      	blt.n	800563c <atan+0x254>
 800563a:	e6f4      	b.n	8005426 <atan+0x3e>
 800563c:	2180      	movs	r1, #128	; 0x80
 800563e:	0609      	lsls	r1, r1, #24
 8005640:	186b      	adds	r3, r5, r1
 8005642:	001d      	movs	r5, r3
 8005644:	e6ef      	b.n	8005426 <atan+0x3e>
 8005646:	4d27      	ldr	r5, [pc, #156]	; (80056e4 <atan+0x2fc>)
 8005648:	e6ed      	b.n	8005426 <atan+0x3e>
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	440fffff 	.word	0x440fffff
 8005650:	7ff00000 	.word	0x7ff00000
 8005654:	54442d18 	.word	0x54442d18
 8005658:	bff921fb 	.word	0xbff921fb
 800565c:	3fdbffff 	.word	0x3fdbffff
 8005660:	3e1fffff 	.word	0x3e1fffff
 8005664:	8800759c 	.word	0x8800759c
 8005668:	7e37e43c 	.word	0x7e37e43c
 800566c:	3ff00000 	.word	0x3ff00000
 8005670:	3ff2ffff 	.word	0x3ff2ffff
 8005674:	3fe5ffff 	.word	0x3fe5ffff
 8005678:	e322da11 	.word	0xe322da11
 800567c:	3f90ad3a 	.word	0x3f90ad3a
 8005680:	24760deb 	.word	0x24760deb
 8005684:	3fa97b4b 	.word	0x3fa97b4b
 8005688:	a0d03d51 	.word	0xa0d03d51
 800568c:	3fb10d66 	.word	0x3fb10d66
 8005690:	c54c206e 	.word	0xc54c206e
 8005694:	3fb745cd 	.word	0x3fb745cd
 8005698:	920083ff 	.word	0x920083ff
 800569c:	3fc24924 	.word	0x3fc24924
 80056a0:	5555550d 	.word	0x5555550d
 80056a4:	3fd55555 	.word	0x3fd55555
 80056a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80056ac:	bfa2b444 	.word	0xbfa2b444
 80056b0:	52defd9a 	.word	0x52defd9a
 80056b4:	3fadde2d 	.word	0x3fadde2d
 80056b8:	af749a6d 	.word	0xaf749a6d
 80056bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80056c0:	fe231671 	.word	0xfe231671
 80056c4:	3fbc71c6 	.word	0x3fbc71c6
 80056c8:	9998ebc4 	.word	0x9998ebc4
 80056cc:	3fc99999 	.word	0x3fc99999
 80056d0:	40037fff 	.word	0x40037fff
 80056d4:	3ff80000 	.word	0x3ff80000
 80056d8:	bff00000 	.word	0xbff00000
 80056dc:	08005b68 	.word	0x08005b68
 80056e0:	08005b88 	.word	0x08005b88
 80056e4:	3ff921fb 	.word	0x3ff921fb

080056e8 <fabs>:
 80056e8:	004b      	lsls	r3, r1, #1
 80056ea:	0859      	lsrs	r1, r3, #1
 80056ec:	4770      	bx	lr

080056ee <atan2>:
 80056ee:	b510      	push	{r4, lr}
 80056f0:	f000 f830 	bl	8005754 <__ieee754_atan2>
 80056f4:	bd10      	pop	{r4, pc}
	...

080056f8 <sqrt>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	0004      	movs	r4, r0
 80056fc:	000d      	movs	r5, r1
 80056fe:	f000 f8d5 	bl	80058ac <__ieee754_sqrt>
 8005702:	4b13      	ldr	r3, [pc, #76]	; (8005750 <sqrt+0x58>)
 8005704:	0006      	movs	r6, r0
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	000f      	movs	r7, r1
 800570a:	b25b      	sxtb	r3, r3
 800570c:	3301      	adds	r3, #1
 800570e:	d01b      	beq.n	8005748 <sqrt+0x50>
 8005710:	0022      	movs	r2, r4
 8005712:	002b      	movs	r3, r5
 8005714:	0020      	movs	r0, r4
 8005716:	0029      	movs	r1, r5
 8005718:	f7fc fe1c 	bl	8002354 <__aeabi_dcmpun>
 800571c:	2800      	cmp	r0, #0
 800571e:	d113      	bne.n	8005748 <sqrt+0x50>
 8005720:	2200      	movs	r2, #0
 8005722:	2300      	movs	r3, #0
 8005724:	0020      	movs	r0, r4
 8005726:	0029      	movs	r1, r5
 8005728:	f7fa fd90 	bl	800024c <__aeabi_dcmplt>
 800572c:	2800      	cmp	r0, #0
 800572e:	d00b      	beq.n	8005748 <sqrt+0x50>
 8005730:	f7ff fe28 	bl	8005384 <__errno>
 8005734:	2321      	movs	r3, #33	; 0x21
 8005736:	2200      	movs	r2, #0
 8005738:	6003      	str	r3, [r0, #0]
 800573a:	2300      	movs	r3, #0
 800573c:	0010      	movs	r0, r2
 800573e:	0019      	movs	r1, r3
 8005740:	f7fb fc04 	bl	8000f4c <__aeabi_ddiv>
 8005744:	0006      	movs	r6, r0
 8005746:	000f      	movs	r7, r1
 8005748:	0030      	movs	r0, r6
 800574a:	0039      	movs	r1, r7
 800574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	20000100 	.word	0x20000100

08005754 <__ieee754_atan2>:
 8005754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005756:	0016      	movs	r6, r2
 8005758:	001d      	movs	r5, r3
 800575a:	005a      	lsls	r2, r3, #1
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	4273      	negs	r3, r6
 8005760:	4333      	orrs	r3, r6
 8005762:	4f46      	ldr	r7, [pc, #280]	; (800587c <__ieee754_atan2+0x128>)
 8005764:	0852      	lsrs	r2, r2, #1
 8005766:	0fdb      	lsrs	r3, r3, #31
 8005768:	4313      	orrs	r3, r2
 800576a:	42bb      	cmp	r3, r7
 800576c:	d809      	bhi.n	8005782 <__ieee754_atan2+0x2e>
 800576e:	4244      	negs	r4, r0
 8005770:	004b      	lsls	r3, r1, #1
 8005772:	4304      	orrs	r4, r0
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	0fe4      	lsrs	r4, r4, #31
 8005778:	9100      	str	r1, [sp, #0]
 800577a:	9001      	str	r0, [sp, #4]
 800577c:	431c      	orrs	r4, r3
 800577e:	42bc      	cmp	r4, r7
 8005780:	d905      	bls.n	800578e <__ieee754_atan2+0x3a>
 8005782:	0032      	movs	r2, r6
 8005784:	002b      	movs	r3, r5
 8005786:	f7fb f877 	bl	8000878 <__aeabi_dadd>
 800578a:	b003      	add	sp, #12
 800578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578e:	4c3c      	ldr	r4, [pc, #240]	; (8005880 <__ieee754_atan2+0x12c>)
 8005790:	192c      	adds	r4, r5, r4
 8005792:	4334      	orrs	r4, r6
 8005794:	d102      	bne.n	800579c <__ieee754_atan2+0x48>
 8005796:	f7ff fe27 	bl	80053e8 <atan>
 800579a:	e7f6      	b.n	800578a <__ieee754_atan2+0x36>
 800579c:	17ac      	asrs	r4, r5, #30
 800579e:	46a4      	mov	ip, r4
 80057a0:	2402      	movs	r4, #2
 80057a2:	4667      	mov	r7, ip
 80057a4:	403c      	ands	r4, r7
 80057a6:	9f00      	ldr	r7, [sp, #0]
 80057a8:	0fff      	lsrs	r7, r7, #31
 80057aa:	433c      	orrs	r4, r7
 80057ac:	9f01      	ldr	r7, [sp, #4]
 80057ae:	431f      	orrs	r7, r3
 80057b0:	d106      	bne.n	80057c0 <__ieee754_atan2+0x6c>
 80057b2:	2c02      	cmp	r4, #2
 80057b4:	d056      	beq.n	8005864 <__ieee754_atan2+0x110>
 80057b6:	2c03      	cmp	r4, #3
 80057b8:	d1e7      	bne.n	800578a <__ieee754_atan2+0x36>
 80057ba:	4832      	ldr	r0, [pc, #200]	; (8005884 <__ieee754_atan2+0x130>)
 80057bc:	4932      	ldr	r1, [pc, #200]	; (8005888 <__ieee754_atan2+0x134>)
 80057be:	e7e4      	b.n	800578a <__ieee754_atan2+0x36>
 80057c0:	0017      	movs	r7, r2
 80057c2:	4337      	orrs	r7, r6
 80057c4:	d105      	bne.n	80057d2 <__ieee754_atan2+0x7e>
 80057c6:	9b00      	ldr	r3, [sp, #0]
 80057c8:	482e      	ldr	r0, [pc, #184]	; (8005884 <__ieee754_atan2+0x130>)
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da53      	bge.n	8005876 <__ieee754_atan2+0x122>
 80057ce:	492f      	ldr	r1, [pc, #188]	; (800588c <__ieee754_atan2+0x138>)
 80057d0:	e7db      	b.n	800578a <__ieee754_atan2+0x36>
 80057d2:	4f2a      	ldr	r7, [pc, #168]	; (800587c <__ieee754_atan2+0x128>)
 80057d4:	42ba      	cmp	r2, r7
 80057d6:	d10f      	bne.n	80057f8 <__ieee754_atan2+0xa4>
 80057d8:	3c01      	subs	r4, #1
 80057da:	4293      	cmp	r3, r2
 80057dc:	d107      	bne.n	80057ee <__ieee754_atan2+0x9a>
 80057de:	2c02      	cmp	r4, #2
 80057e0:	d843      	bhi.n	800586a <__ieee754_atan2+0x116>
 80057e2:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <__ieee754_atan2+0x13c>)
 80057e4:	00e4      	lsls	r4, r4, #3
 80057e6:	191c      	adds	r4, r3, r4
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	6861      	ldr	r1, [r4, #4]
 80057ec:	e7cd      	b.n	800578a <__ieee754_atan2+0x36>
 80057ee:	2c02      	cmp	r4, #2
 80057f0:	d83e      	bhi.n	8005870 <__ieee754_atan2+0x11c>
 80057f2:	4b28      	ldr	r3, [pc, #160]	; (8005894 <__ieee754_atan2+0x140>)
 80057f4:	00e4      	lsls	r4, r4, #3
 80057f6:	e7f6      	b.n	80057e6 <__ieee754_atan2+0x92>
 80057f8:	4f20      	ldr	r7, [pc, #128]	; (800587c <__ieee754_atan2+0x128>)
 80057fa:	42bb      	cmp	r3, r7
 80057fc:	d0e3      	beq.n	80057c6 <__ieee754_atan2+0x72>
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	151b      	asrs	r3, r3, #20
 8005802:	2b3c      	cmp	r3, #60	; 0x3c
 8005804:	dc18      	bgt.n	8005838 <__ieee754_atan2+0xe4>
 8005806:	2d00      	cmp	r5, #0
 8005808:	da01      	bge.n	800580e <__ieee754_atan2+0xba>
 800580a:	333c      	adds	r3, #60	; 0x3c
 800580c:	db17      	blt.n	800583e <__ieee754_atan2+0xea>
 800580e:	0032      	movs	r2, r6
 8005810:	002b      	movs	r3, r5
 8005812:	f7fb fb9b 	bl	8000f4c <__aeabi_ddiv>
 8005816:	f7ff ff67 	bl	80056e8 <fabs>
 800581a:	f7ff fde5 	bl	80053e8 <atan>
 800581e:	2c01      	cmp	r4, #1
 8005820:	d010      	beq.n	8005844 <__ieee754_atan2+0xf0>
 8005822:	2c02      	cmp	r4, #2
 8005824:	d013      	beq.n	800584e <__ieee754_atan2+0xfa>
 8005826:	2c00      	cmp	r4, #0
 8005828:	d0af      	beq.n	800578a <__ieee754_atan2+0x36>
 800582a:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <__ieee754_atan2+0x144>)
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <__ieee754_atan2+0x148>)
 800582e:	f7fc f9ff 	bl	8001c30 <__aeabi_dsub>
 8005832:	4a14      	ldr	r2, [pc, #80]	; (8005884 <__ieee754_atan2+0x130>)
 8005834:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <__ieee754_atan2+0x14c>)
 8005836:	e012      	b.n	800585e <__ieee754_atan2+0x10a>
 8005838:	4812      	ldr	r0, [pc, #72]	; (8005884 <__ieee754_atan2+0x130>)
 800583a:	491a      	ldr	r1, [pc, #104]	; (80058a4 <__ieee754_atan2+0x150>)
 800583c:	e7ef      	b.n	800581e <__ieee754_atan2+0xca>
 800583e:	2000      	movs	r0, #0
 8005840:	2100      	movs	r1, #0
 8005842:	e7ec      	b.n	800581e <__ieee754_atan2+0xca>
 8005844:	2480      	movs	r4, #128	; 0x80
 8005846:	0624      	lsls	r4, r4, #24
 8005848:	190b      	adds	r3, r1, r4
 800584a:	0019      	movs	r1, r3
 800584c:	e79d      	b.n	800578a <__ieee754_atan2+0x36>
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <__ieee754_atan2+0x144>)
 8005850:	4b12      	ldr	r3, [pc, #72]	; (800589c <__ieee754_atan2+0x148>)
 8005852:	f7fc f9ed 	bl	8001c30 <__aeabi_dsub>
 8005856:	0002      	movs	r2, r0
 8005858:	000b      	movs	r3, r1
 800585a:	480a      	ldr	r0, [pc, #40]	; (8005884 <__ieee754_atan2+0x130>)
 800585c:	4910      	ldr	r1, [pc, #64]	; (80058a0 <__ieee754_atan2+0x14c>)
 800585e:	f7fc f9e7 	bl	8001c30 <__aeabi_dsub>
 8005862:	e792      	b.n	800578a <__ieee754_atan2+0x36>
 8005864:	4807      	ldr	r0, [pc, #28]	; (8005884 <__ieee754_atan2+0x130>)
 8005866:	490e      	ldr	r1, [pc, #56]	; (80058a0 <__ieee754_atan2+0x14c>)
 8005868:	e78f      	b.n	800578a <__ieee754_atan2+0x36>
 800586a:	4806      	ldr	r0, [pc, #24]	; (8005884 <__ieee754_atan2+0x130>)
 800586c:	490e      	ldr	r1, [pc, #56]	; (80058a8 <__ieee754_atan2+0x154>)
 800586e:	e78c      	b.n	800578a <__ieee754_atan2+0x36>
 8005870:	2000      	movs	r0, #0
 8005872:	2100      	movs	r1, #0
 8005874:	e789      	b.n	800578a <__ieee754_atan2+0x36>
 8005876:	490b      	ldr	r1, [pc, #44]	; (80058a4 <__ieee754_atan2+0x150>)
 8005878:	e787      	b.n	800578a <__ieee754_atan2+0x36>
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	7ff00000 	.word	0x7ff00000
 8005880:	c0100000 	.word	0xc0100000
 8005884:	54442d18 	.word	0x54442d18
 8005888:	c00921fb 	.word	0xc00921fb
 800588c:	bff921fb 	.word	0xbff921fb
 8005890:	08005ba8 	.word	0x08005ba8
 8005894:	08005bc0 	.word	0x08005bc0
 8005898:	33145c07 	.word	0x33145c07
 800589c:	3ca1a626 	.word	0x3ca1a626
 80058a0:	400921fb 	.word	0x400921fb
 80058a4:	3ff921fb 	.word	0x3ff921fb
 80058a8:	3fe921fb 	.word	0x3fe921fb

080058ac <__ieee754_sqrt>:
 80058ac:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <__ieee754_sqrt+0x15c>)
 80058ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b0:	0002      	movs	r2, r0
 80058b2:	0005      	movs	r5, r0
 80058b4:	0018      	movs	r0, r3
 80058b6:	000c      	movs	r4, r1
 80058b8:	b085      	sub	sp, #20
 80058ba:	4008      	ands	r0, r1
 80058bc:	4298      	cmp	r0, r3
 80058be:	d10f      	bne.n	80058e0 <__ieee754_sqrt+0x34>
 80058c0:	000b      	movs	r3, r1
 80058c2:	0028      	movs	r0, r5
 80058c4:	f7fb ff48 	bl	8001758 <__aeabi_dmul>
 80058c8:	0002      	movs	r2, r0
 80058ca:	000b      	movs	r3, r1
 80058cc:	0028      	movs	r0, r5
 80058ce:	0021      	movs	r1, r4
 80058d0:	f7fa ffd2 	bl	8000878 <__aeabi_dadd>
 80058d4:	0005      	movs	r5, r0
 80058d6:	000c      	movs	r4, r1
 80058d8:	0028      	movs	r0, r5
 80058da:	0021      	movs	r1, r4
 80058dc:	b005      	add	sp, #20
 80058de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e0:	2900      	cmp	r1, #0
 80058e2:	dc10      	bgt.n	8005906 <__ieee754_sqrt+0x5a>
 80058e4:	004b      	lsls	r3, r1, #1
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	432b      	orrs	r3, r5
 80058ea:	d0f5      	beq.n	80058d8 <__ieee754_sqrt+0x2c>
 80058ec:	2000      	movs	r0, #0
 80058ee:	4281      	cmp	r1, r0
 80058f0:	d100      	bne.n	80058f4 <__ieee754_sqrt+0x48>
 80058f2:	e080      	b.n	80059f6 <__ieee754_sqrt+0x14a>
 80058f4:	000b      	movs	r3, r1
 80058f6:	0028      	movs	r0, r5
 80058f8:	f7fc f99a 	bl	8001c30 <__aeabi_dsub>
 80058fc:	0002      	movs	r2, r0
 80058fe:	000b      	movs	r3, r1
 8005900:	f7fb fb24 	bl	8000f4c <__aeabi_ddiv>
 8005904:	e7e6      	b.n	80058d4 <__ieee754_sqrt+0x28>
 8005906:	1508      	asrs	r0, r1, #20
 8005908:	d075      	beq.n	80059f6 <__ieee754_sqrt+0x14a>
 800590a:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <__ieee754_sqrt+0x160>)
 800590c:	0309      	lsls	r1, r1, #12
 800590e:	18c4      	adds	r4, r0, r3
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	0b09      	lsrs	r1, r1, #12
 8005914:	035b      	lsls	r3, r3, #13
 8005916:	4319      	orrs	r1, r3
 8005918:	07c3      	lsls	r3, r0, #31
 800591a:	d403      	bmi.n	8005924 <__ieee754_sqrt+0x78>
 800591c:	0fd3      	lsrs	r3, r2, #31
 800591e:	0049      	lsls	r1, r1, #1
 8005920:	18c9      	adds	r1, r1, r3
 8005922:	0052      	lsls	r2, r2, #1
 8005924:	1063      	asrs	r3, r4, #1
 8005926:	2400      	movs	r4, #0
 8005928:	0049      	lsls	r1, r1, #1
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	0fd3      	lsrs	r3, r2, #31
 800592e:	18cb      	adds	r3, r1, r3
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	2516      	movs	r5, #22
 8005934:	0020      	movs	r0, r4
 8005936:	0052      	lsls	r2, r2, #1
 8005938:	0389      	lsls	r1, r1, #14
 800593a:	1846      	adds	r6, r0, r1
 800593c:	429e      	cmp	r6, r3
 800593e:	dc02      	bgt.n	8005946 <__ieee754_sqrt+0x9a>
 8005940:	1870      	adds	r0, r6, r1
 8005942:	1b9b      	subs	r3, r3, r6
 8005944:	1864      	adds	r4, r4, r1
 8005946:	0fd6      	lsrs	r6, r2, #31
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	3d01      	subs	r5, #1
 800594c:	18f3      	adds	r3, r6, r3
 800594e:	0052      	lsls	r2, r2, #1
 8005950:	0849      	lsrs	r1, r1, #1
 8005952:	2d00      	cmp	r5, #0
 8005954:	d1f1      	bne.n	800593a <__ieee754_sqrt+0x8e>
 8005956:	2620      	movs	r6, #32
 8005958:	2780      	movs	r7, #128	; 0x80
 800595a:	0029      	movs	r1, r5
 800595c:	9601      	str	r6, [sp, #4]
 800595e:	063f      	lsls	r7, r7, #24
 8005960:	197e      	adds	r6, r7, r5
 8005962:	46b4      	mov	ip, r6
 8005964:	4283      	cmp	r3, r0
 8005966:	dc02      	bgt.n	800596e <__ieee754_sqrt+0xc2>
 8005968:	d114      	bne.n	8005994 <__ieee754_sqrt+0xe8>
 800596a:	4296      	cmp	r6, r2
 800596c:	d812      	bhi.n	8005994 <__ieee754_sqrt+0xe8>
 800596e:	4665      	mov	r5, ip
 8005970:	4666      	mov	r6, ip
 8005972:	19ed      	adds	r5, r5, r7
 8005974:	9002      	str	r0, [sp, #8]
 8005976:	2e00      	cmp	r6, #0
 8005978:	da03      	bge.n	8005982 <__ieee754_sqrt+0xd6>
 800597a:	43ee      	mvns	r6, r5
 800597c:	0ff6      	lsrs	r6, r6, #31
 800597e:	1986      	adds	r6, r0, r6
 8005980:	9602      	str	r6, [sp, #8]
 8005982:	1a1b      	subs	r3, r3, r0
 8005984:	4562      	cmp	r2, ip
 8005986:	4180      	sbcs	r0, r0
 8005988:	4240      	negs	r0, r0
 800598a:	1a1b      	subs	r3, r3, r0
 800598c:	4660      	mov	r0, ip
 800598e:	1a12      	subs	r2, r2, r0
 8005990:	9802      	ldr	r0, [sp, #8]
 8005992:	19c9      	adds	r1, r1, r7
 8005994:	0fd6      	lsrs	r6, r2, #31
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	18f3      	adds	r3, r6, r3
 800599a:	9e01      	ldr	r6, [sp, #4]
 800599c:	0052      	lsls	r2, r2, #1
 800599e:	3e01      	subs	r6, #1
 80059a0:	087f      	lsrs	r7, r7, #1
 80059a2:	9601      	str	r6, [sp, #4]
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	d1db      	bne.n	8005960 <__ieee754_sqrt+0xb4>
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d003      	beq.n	80059b4 <__ieee754_sqrt+0x108>
 80059ac:	1c4b      	adds	r3, r1, #1
 80059ae:	d127      	bne.n	8005a00 <__ieee754_sqrt+0x154>
 80059b0:	0031      	movs	r1, r6
 80059b2:	3401      	adds	r4, #1
 80059b4:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <__ieee754_sqrt+0x164>)
 80059b6:	1060      	asrs	r0, r4, #1
 80059b8:	18c0      	adds	r0, r0, r3
 80059ba:	0849      	lsrs	r1, r1, #1
 80059bc:	07e3      	lsls	r3, r4, #31
 80059be:	d502      	bpl.n	80059c6 <__ieee754_sqrt+0x11a>
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	061b      	lsls	r3, r3, #24
 80059c4:	4319      	orrs	r1, r3
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	000d      	movs	r5, r1
 80059ca:	051c      	lsls	r4, r3, #20
 80059cc:	1823      	adds	r3, r4, r0
 80059ce:	001c      	movs	r4, r3
 80059d0:	e782      	b.n	80058d8 <__ieee754_sqrt+0x2c>
 80059d2:	0ad1      	lsrs	r1, r2, #11
 80059d4:	3b15      	subs	r3, #21
 80059d6:	0552      	lsls	r2, r2, #21
 80059d8:	2900      	cmp	r1, #0
 80059da:	d0fa      	beq.n	80059d2 <__ieee754_sqrt+0x126>
 80059dc:	2480      	movs	r4, #128	; 0x80
 80059de:	0364      	lsls	r4, r4, #13
 80059e0:	4221      	tst	r1, r4
 80059e2:	d00a      	beq.n	80059fa <__ieee754_sqrt+0x14e>
 80059e4:	2420      	movs	r4, #32
 80059e6:	0016      	movs	r6, r2
 80059e8:	1a24      	subs	r4, r4, r0
 80059ea:	40e6      	lsrs	r6, r4
 80059ec:	1e45      	subs	r5, r0, #1
 80059ee:	4082      	lsls	r2, r0
 80059f0:	4331      	orrs	r1, r6
 80059f2:	1b58      	subs	r0, r3, r5
 80059f4:	e789      	b.n	800590a <__ieee754_sqrt+0x5e>
 80059f6:	2300      	movs	r3, #0
 80059f8:	e7ee      	b.n	80059d8 <__ieee754_sqrt+0x12c>
 80059fa:	0049      	lsls	r1, r1, #1
 80059fc:	3001      	adds	r0, #1
 80059fe:	e7ef      	b.n	80059e0 <__ieee754_sqrt+0x134>
 8005a00:	2301      	movs	r3, #1
 8005a02:	3101      	adds	r1, #1
 8005a04:	4399      	bics	r1, r3
 8005a06:	e7d5      	b.n	80059b4 <__ieee754_sqrt+0x108>
 8005a08:	7ff00000 	.word	0x7ff00000
 8005a0c:	fffffc01 	.word	0xfffffc01
 8005a10:	3fe00000 	.word	0x3fe00000

08005a14 <_init>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	469e      	mov	lr, r3
 8005a1e:	4770      	bx	lr

08005a20 <_fini>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr
